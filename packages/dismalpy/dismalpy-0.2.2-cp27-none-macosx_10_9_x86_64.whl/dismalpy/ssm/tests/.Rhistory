ls()
ls()
install.package("ggplot2")
install.packages("ggplot2")
v <- c("A", "B", "C")
df <- data.frame(h=v, r=rnorm(3,0,1))
df
df <- data.frame(h=v, r=rnorm(2,0,1))
df <- data.frame(h=v, r=rnorm(3,0,1), s="Kyrpton")
df
df$t = "Krypton2"
df
df$t = c(1,2,3)
df
df$t = c(1,2)
df$t = c(1)
df
rm v
rm(v)
as.numeric('1,230.12')
as.numeric("1,230.12")
library(GB2)
install.packages("GB2")
head(rnorm(10,0,5))
head(rnorm(10,0,5), n=5)
test = rnorm(100,0,5)
quantile(test)
quantile(test, probs=90)
quantile(test, probs=0.90)
type(quantile(test, probs=0.90))
?quantile(test, probs=0.90)
?t
?type
typeof(quantile(test, probs=0.90))
class(quantile(test, probs=0.90))
quantile(test, probs=0.90)
quantile(test, probs=0.90)[0]
quantile(test, probs=0.90)
quantile(test, probs=0.90)$90%
quantile(test, probs=0.90)['90%']
quantile(test, probs=0.90)
as.numeric(quantile(test, probs=0.90))
quantile(test, probs=0.90)
?class
oldClass(quantile(test, probs=0.90))
class(quantile(test, probs=0.90))
is.facotr(quantile(test, probs=0.90))
is.factor(quantile(test, probs=0.90))
is.list(quantile(test, probs=0.90))
is.df(quantile(test, probs=0.90))
is.data.frame(quantile(test, probs=0.90))
?quantile
?sapply
f = rnorm(1000, 0, 5)
f[f > 0 = -1000]
f[f > 0] = -1000
f
?save
?load
?ssmarima
?SSMarima
library(foreign)
library(KFAS)
setwd('~/projects/dismalpy/examples/')
data <- read.dta('wpi1.dta')
dwpi = diff(data$wpi)
?SSMarima
m <- SSModel(df ~ SSMarima(ar=3, ma=0, d=0, stationary=FALSE, n=123))
df <- matrix(dwpi, nrow=1, ncol=123)
m <- SSModel(df ~ SSMarima(ar=3, ma=0, d=0, stationary=FALSE, n=123))
df <- matrix(dwpi, nrow=123, ncol=1)
m <- SSModel(df ~ SSMarima(ar=3, ma=0, d=0, stationary=FALSE, n=123))
out <- KFS(m, filtering='state', smoothing='state')
out
m <- SSModel(df ~ SSMarima(ar=4, ma=0, d=0, stationary=FALSE, n=123))
out <- KFS(m, filtering='state', smoothing='state')
out
df <- matrix(dwpi, nrow=123, ncol=1)
m <- SSModel(df ~ SSMarima(ar=3 ma=0, d=0, stationary=FALSE, n=123))
out <- KFS(m, filtering='state', smoothing='state')
m <- SSModel(df ~ SSMarima(ar=3, ma=0, d=0, stationary=FALSE, n=123))
out <- KFS(m, filtering='state', smoothing='state')
out$P
out$a
install.packages(des)
install.packages('dse')
library(dse)
ARMA
?ARMA
arma <- ARMA(c(.5270715, .0952613, .2580355))
arma <- ARMA(c(.5270715, .0952613, .2580355), B=c())
arma <- ARMA(c(1, .5270715, .0952613, .2580355), B=c(1))
arma
arma <- ARMA(c(1, -.5270715, -.0952613, -.2580355), B=c(1))
arma
rm(m)
rm(out)
ss <- toSS(arma)
ss$F
ss$K
res <- l(ss, dwpi)
res <- l(ss, dwpi)
simulate(ss, start=c(1920,1), freq=1)
x <- simulate(ss, start=c(1920,1), freq=1)
res <- l(ss, dwpi)
dwpi = data.frame(diff(data$wpi))
res <- l(ss, dwpi)
View(dwpi)
ss
dwpi = diff(data$wpi)
df <- TSdata(input=dwpi)
res <- l(ss, df)
rm(x)
arma <- ARMA(c(1, -.5270715, -.0952613, -.2580355), B=1)
est.model <- estMaxLik(arma, dwpi)
est.model <- estMaxLik(arma, df)
df
arma <- ARMA(c(1, -.5270715, -.0952613, -.2580355), B=1)
df <- TSdata(input=dwpi)
est.model <- estMaxLik(arma, df)
df <- TSdata(output=dwpi)
est.model <- estMaxLik(arma, df)
est.model
est.model$results$par
est.model$results
est.model
est.model$estimates
est.model$estimates$results
est.model$estimates$results$par
ss <- toSS(arma)
res <- l(ss, df)
sres <- smoother(ss, df)
sres <- smoother(toSSChol(ss), df)
state(sres)
sres$smooth
sm <- sres$smooth
sm
sm$state
state(res)
s
ss
t(ss$F)
ss
type(ss)
class(ss)
source('~/projects/statsmodels/statsmodels/tsa/statespace/tests/results/test_clark1989_r.R')
source('~/projects/dismalpy/dismalpy/ssm/tests/test_clark1989_r.R')
source('~/projects/dismalpy/dismalpy/ssm/tests/test_clark1989_r.R')
source('~/.active-rstudio-document')
ans
ans$Ptt
source('~/projects/dismalpy/dismalpy/ssm/tests/test_wpi1_r.R')
rm(est.model)
rm(arma)
ans$Ptt
initial_state_cov
rm(res)
rm(sm)
rm(sres)
rm(ss)
source('~/projects/dismalpy/dismalpy/ssm/tests/test_wpi1_r.R')
att[.,0]
ans$att[.,0]
ans$att[,0]
ans$att[,1]
ans$at[,1]
ans$at[,2]
ans$at[,123]
ans$at[,124]
ans$Pt[,124]
ans$Pt[,,124]
ans$Ptt[,,124]
ans$Ptt[,,123]
ans$att[,,123]
ans$att[,123]
ans$att[,124]
?KalmanSmooth
?makeARIMA
params[1:4]
params[1:3]
arima = makeARIMA(parmas[1:3])
arima = makeARIMA(params[1:3])
arima = makeARIMA(params[1:3],c())
arima = makeARIMA(params[1:3],c(),c())
arima$T
t(arima$T)
arima$T = t(arima$T)
arima$V[1,1] = params[4]^2
arima$Pn
initial_state_cov
aarima$Pn = initial_state_cov
arima$Pn = initial_state_cov
KalmanLike(dwpi, arima)
res <- KalmanRun(dwpi, arima)
res$states
smoothed <- KalmanSmooth(dwpi, arima) # smoothed states
smoothed$smooth
ans$Pt
ans$att
t(ans$att)
data.frame(smoothed$smooth)
output <- rbind(
data.frame(ans$at),
data.frame(filtered$states),
data.frame(smoothed$smooth)
)
filtered <- KalmanRun(dwpi, arima) # filtered states
output <- rbind(
data.frame(ans$at),
data.frame(filtered$states),
data.frame(smoothed$smooth)
)
output <- cbind(
data.frame(ans$at),
data.frame(filtered$states),
data.frame(smoothed$smooth)
)
View(output)
output <- cbind(
data.frame(filtered$states),
data.frame(smoothed$smooth)
)
View(output)
?data.frame
filtered$states[,1]
ans$at
t(ans$at)
predicted = t(ans$at)
predicted[1:123,1]
output <- data.frame(
sp1=predicted[1:123,1],
sp2=predicted[1:123,2],
sp3=predicted[1:123,3],
sf1=filtered$states[,1],
sf2=filtered$states[,2],
sf3=filtered$states[,3],
sm1=smoothed$smooth[,1],
sm2=smoothed$smooth[,2],
sm2=smoothed$smooth[,3],
)
output <- data.frame(
sp1=predicted[1:123,1],
sp2=predicted[1:123,2],
sp3=predicted[1:123,3],
sf1=filtered$states[,1],
sf2=filtered$states[,2],
sf3=filtered$states[,3],
sm1=smoothed$smooth[,1],
sm2=smoothed$smooth[,2],
sm2=smoothed$smooth[,3]
)
View(output)
write.csv(output, file='results_wpi1_ar3_R.csv', row.names=FALSE)
