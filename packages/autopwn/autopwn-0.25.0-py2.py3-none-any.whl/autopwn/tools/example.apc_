# autopwn v0.25.0 yaml tool config file

# The name as it will be referenced by in assessments
name: example

# Files which should be accessible in PATH
dependencies: ['binary_1', 'binary_2']

# Website
url: http://example.net/

# Description
# What does the tool do?
description: Describes which options can be set and what they mean

# Version
# The autopwn version with which this config file is compatible with
autopwn_version: 0.25.0

# Assessment groups
# To which assessments this tool should belong
assessment_groups: ['example']

# Valid tool options
# Which options does the tool support and which should be shown
# when running 'show options'?
#
# required - Is this option required? True or no required
# example_values - Example values which will appear
#                  in 'show options'
# default_value - Default value assigned if no target
#                 is loaded (thus no option set)
# type - Field type. Checks will be performed to ensure
#        user enters expected type
options:
    target_name:
        required: True
        example_values: target1
    target:
        type: ip_address
        required: True
        example_values: 127.0.0.1|example.org
    port_number:
        type: port_number
        required: True
        example_values: 80|443
        default_value: 80
    protocol:
        required: True
        example_values: http|https
        default_value: http

option-formats:
    # Some tools accept cookie strings on the command line, the following options
    # deal with this.
    # 0 - The option-placeholder defines what type of option this block describes.
    #     This can be 'cookies', 'cookie_file', or 'ip_address_list'
    # 1 - The option setting allows for the specification of the option value to
    #     set cookie strings for this particular tool
    # 2 - The option-separator setting allows for the specification of the separator
    #     between the option value and the argument. This will normally be a space,
    #     but sometimes this won't be the case
    # 3 - The substitution setting allows for the specification of the format of the
    #     cookie string. This will typically be key=value, represented by {0}={1}
    # 4 - If the argument-prepend-option setting is set to True, then the tool expects
    #     the option to specified before each cookie. For example:
    #     -C cookie1=cookie1 -C cookie2=cookie2
    # 5 - The argument-separator setting only applies when the argument-prepend-option is
    #     set to False. It allows for the specification of a separator between cookies.
    #     For example: -C cookie1=cookie1,cookie2=cookie2
    # 6 - The argument-encapsulation setting allows for the specification of argument
    #     encapsulation values. This will typically be a single or double quote. This
    #     feature has not really been tested
    cookie-cli-option-format:
        option-placeholder: 'cookies'
        option: '--http-cookie-string'
        option-separator: ' '
        substitution: '{0}={1}'
        argument-prepend-option: False
        argument-separator: '\;'
        argument-encapsulation: ''

    # Some tools also accept the option to specify a cookie file. The following options
    # deal with this.
    # 0 - The option-placeholder defines what type of option this block describes.
    #     This can be 'cookies', 'cookie_file', or 'ip_address_list'
    # 1 - The option setting allows for the specification of the cookie file option value
    # 2 - The option-separator setting allows for the specification of the option separator
    #     between the cookie file option and the cookie file argument. This will normally be
    #     a space
    # 3 - The substitution setting allows for the specification of the format of the cookie
    #     file argument. This will typically be just the file name
    cookie-file-option-format:
        option-placeholder: 'cookies_file'
        option: '--http-cookie-jar'
        option-separator: ' '
        substitution: '{0}'

# Execute shell commands before and/or after tool execution
# Pre and post tool execution commands will always run one
# after another (even if parallel option set)
pre_tool_execution: "sleep 5"
post_tool_execution: "/usr/bin/example_report {output_dir}"

# Tool arguments
# Python's str.format() is used for variable replacement. Valid entries are:
# * target (domain name or ip address)
# * protocol (returns 'http' or 'https')
# * date (current date in format 20150226_213959) # date =  strftime("%Y%m%d_%H%M%S")
# * port_number (if target port number has been specified)
# * output_dir (directory where tool output will be saved for specific target)
# * ip_address_list (where the IP address option and argument go (e.g. '-i ips.txt')
# * cookie_arguments (where the cookie arguments go (both the cookie files and cli options)
execute_string: "tool {protocol}://{target}:{port_number} {cookie_arguments} -o {output_dir}/{date}_example_{target_name}"

# Given the arguments option, will this tool generate output? If redirection is used,
# then this is not going to be the case (excluding stderr).
# Specifyng this option will determine whether or not a stdout file for the tool
# is generated
stdout: True
