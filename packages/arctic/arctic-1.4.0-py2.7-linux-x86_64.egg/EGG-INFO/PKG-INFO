Metadata-Version: 1.1
Name: arctic
Version: 1.4.0
Summary: AHL Research Versioned TimeSeries and Tick store
Home-page: https://github.com/manahl/arctic
Author: Man AHL Technology
Author-email: ManAHLTech@ahl.com
License: GPL
Description: |arctic| `Arctic TimeSeries and Tick store <https://github.com/manahl/arctic>`__
        ================================================================================
        
        |Circle CI| |Coverage Status| |Join the chat at
        https://gitter.im/manahl/arctic|
        
        Arctic is a high performance datastore for numeric data. It supports
        `Pandas <http://pandas.pydata.org/>`__,
        `numpy <http://www.numpy.org/>`__ arrays and pickled objects
        out-of-the-box, with pluggable support for other data types and optional
        versioning.
        
        Arctic can query millions of rows per second per client, achieves ~10x
        compression on network bandwidth, ~10x compression on disk, and scales
        to hundreds of millions of rows per second per
        `MongoDB <https://www.mongodb.org/>`__ instance.
        
        Arctic has been under active development at `Man
        AHL <http://www.ahl.com/>`__ since 2012.
        
        Quickstart
        ----------
        
        Install Arctic
        ~~~~~~~~~~~~~~
        
        ::
        
            pip install git+https://github.com/manahl/arctic.git
        
        Run a MongoDB
        ~~~~~~~~~~~~~
        
        ::
        
            mongod --dbpath <path/to/db_directory>
        
        Using VersionStore
        ~~~~~~~~~~~~~~~~~~
        
        ::
        
            from arctic import Arctic
        
            # Connect to Local MONGODB
            store = Arctic('localhost')
        
            # Create the library - defaults to VersionStore
            store.initialize_library('NASDAQ')
        
            # Access the library
            library = store['NASDAQ']
        
            # Load some data - maybe from Quandl
            aapl = Quandl.get("NASDAQ/AAPL", authtoken="your token here")
        
            # Store the data in the library
            library.write('AAPL', aapl, metadata={'source': 'Quandl'})
        
            # Reading the data
            item = library.read('AAPL')
            aapl = item.data
            metadata = item.metadata
        
        VersionStore supports much more: `See the
        HowTo <howtos/how_to_use_arctic.py>`__!
        
        Adding your own storage engine
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        Plugging a custom class in as a library type is straightforward. `This
        example shows how. <howtos/how_to_custom_arctic_library.py>`__
        
        Concepts
        --------
        
        Libraries
        ~~~~~~~~~
        
        Arctic provides namespaced *libraries* of data. These libraries allow
        bucketing data by *source*, *user* or some other metric (for example
        frequency: End-Of-Day; Minute Bars; etc.).
        
        Arctic supports multiple data libraries per user. A user (or namespace)
        maps to a MongoDB database (the granularity of mongo authentication).
        The library itself is composed of a number of collections within the
        database. Libraries look like:
        
        -  user.EOD
        -  user.ONEMINUTE
        
        A library is mapped to a Python class. All library databases in MongoDB
        are prefixed with 'arctic\_'
        
        Storage Engines
        ~~~~~~~~~~~~~~~
        
        Arctic includes two storage engines:
        
        -  `VersionStore <arctic/store/version_store.py>`__: a key-value
           versioned TimeSeries store. It supports:
        
           -  Pandas data types (other Python types pickled)
           -  Multiple versions of each data item. Can easily read previous
              versions.
           -  Create point-in-time snapshots across symbols in a library
           -  Soft quota support
           -  Hooks for persisting other data types
           -  Audited writes: API for saving metadata and data before and after
              a write.
           -  a wide range of TimeSeries data frequencies: End-Of-Day to Minute
              bars
           -  `See the HowTo <howtos/how_to_use_arctic.py>`__
        
        -  `TickStore <arctic/tickstore/tickstore.py>`__: Column oriented tick
           database. Supports dynamic fields, chunks aren't versioned. Designed
           for large continuously ticking data.
        
        Arctic storage implementations are **pluggable**. VersionStore is the
        default.
        
        Requirements
        ------------
        
        Arctic currently works with:
        
        -  Python 2.7
        -  pymongo >= 3.0
        -  Pandas
        -  MongoDB >= 2.4.x
        
        Acknowledgements
        ----------------
        
        Arctic has been under active development at `Man
        AHL <http://www.ahl.com/>`__ since 2012.
        
        It wouldn't be possible without the work of the AHL Data Engineering
        Team including:
        
        -  `Richard Bounds <https://github.com/richardbounds>`__
        -  `James Blackburn <https://github.com/jamesblackburn>`__
        -  `Vlad Mereuta <https://github.com/vmereuta>`__
        -  Tom Taylor
        -  Tope Olukemi
        -  Drake Siard
        -  `Slavi Marinov <https://github.com/slavi>`__
        -  `Wilfred Hughes <https://github.com/wilfred>`__
        -  `Edward Easton <https://github.com/eeaston>`__
        -  ... and many others ...
        
        Contributions welcome!
        
        License
        -------
        
        Arctic is licensed under the GNU LGPL v2.1. A copy of which is included
        in `LICENSE <LICENSE>`__
        
        .. |arctic| image:: logo/arctic_50.png
           :target: https://github.com/manahl/arctic
        .. |Circle CI| image:: https://circleci.com/gh/manahl/arctic.svg?style=shield
           :target: https://circleci.com/gh/manahl/arctic
        .. |Coverage Status| image:: https://coveralls.io/repos/github/manahl/arctic/badge.svg?branch=master
           :target: https://coveralls.io/github/manahl/arctic?branch=master
        .. |Join the chat at https://gitter.im/manahl/arctic| image:: https://badges.gitter.im/Join%20Chat.svg
           :target: https://gitter.im/manahl/arctic?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
        
Keywords: ahl,keyvalue,tickstore,mongo,timeseries
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Cython
Classifier: Topic :: Database
Classifier: Topic :: Database :: Front-Ends
Classifier: Topic :: Software Development :: Libraries
