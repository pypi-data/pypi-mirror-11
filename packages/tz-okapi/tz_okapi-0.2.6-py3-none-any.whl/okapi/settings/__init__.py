import os

from okapi.core.loggers.console import ColoredConsole
from okapi.core.utils import parse_headers
from okapi.settings.cache import CacheSettings
from okapi.settings.configparser import ConfigParser
from okapi.settings.headers import HeadersSettings
from okapi.settings.internal import InternalSettings
from okapi.settings.template import TemplateSettings


class Settings(object):
    output = None
    """
    Path to output directory

    :type: str
    """

    file = None
    """
    Path to input RST file.

    :type: str
    """

    config = 'okapi.cfg'
    """
    Path to config file.

    :type: str
    """

    url = None
    """
    Base url against which are requests made.

    :type: str
    """

    debug = False
    """
    If tests fail, enables pdb debugger

    :type: bool
    """

    prototype = False
    """
    Enables a prototype mode. No requests are made.

    :type: bool
    """

    cache = CacheSettings()
    template = TemplateSettings()
    headers = HeadersSettings()
    internal = InternalSettings()

    log = ColoredConsole()
    """ :type: okapi.core.loggers.base.BaseLogger """

    def __init__(self):
        self.template.set_env(os.path.join(self.internal.path, 'templates'))

    def load_from_cli(self, arguments):
        """
        Loads settings from CLI arguments.

        :param arguments: Dictionary generated by docopt
        :type arguments: dict
        """
        self.config = arguments.get('--config', self.config)
        self.load_from_file()

        if arguments['--headers']:
            splitted_headers = arguments['--headers'].split(',')
            self.headers.hidden.update(parse_headers(splitted_headers))

        self.cache.enabled = arguments.get('-c') or self.cache.enabled
        self.debug = arguments.get('-d') or self.debug
        self.output = arguments.get('-o') or self.output
        self.file = arguments.get('<in>') or self.file
        self.url = arguments.get('--url') or self.url
        self.log.verbosity = int(arguments.get('-v')) or self.log.verbosity
        self.prototype = arguments.get('--prototype') or self.prototype

    def load_from_file(self):
        """
        Loads settings from config file.
        """
        if not os.path.isfile(self.config):
            return False

        config = ConfigParser()
        config.read(self.config)

        base_path = os.path.dirname(self.config)

        self.cache.enabled = \
            config.getboolean('base', 'cache') or self.cache.enabled

        self.debug = config.getboolean('base', 'debug') or self.debug

        output = config.getstring('base', 'output')
        self.output = os.path.join(base_path, output) or self.output

        file = config.getstring('base', 'file')
        self.file = os.path.join(base_path, file) or self.file

        self.url = config.getstring('base', 'url') or self.url
        templates = config.getstring('base', 'templates')
        if templates:
            self.template.set_env([
                os.path.join(base_path, templates),
                os.path.join(self.internal.path, 'templates'),
            ])

        verbosity = config.getint('base', 'verbosity')
        self.log.verbosity = verbosity or self.log.verbosity

    def check(self):
        status = True

        if not self.file:
            status = False
            self.log.error('No input file provided.')

        return status


settings = Settings()
