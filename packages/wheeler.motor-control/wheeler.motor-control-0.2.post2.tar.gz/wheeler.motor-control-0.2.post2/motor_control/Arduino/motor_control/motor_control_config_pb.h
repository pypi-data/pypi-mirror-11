/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3 at Fri Jul 17 13:28:35 2015. */

#ifndef PB_CONFIG_PB_H_INCLUDED
#define PB_CONFIG_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef struct _motor_control_Config {
    bool has_serial_number;
    uint32_t serial_number;
    bool has_baud_rate;
    uint32_t baud_rate;
    bool has_i2c_address;
    uint32_t i2c_address;
    bool has_max_waveform_voltage;
    float max_waveform_voltage;
    bool has_min_waveform_frequency;
    float min_waveform_frequency;
    bool has_max_waveform_frequency;
    float max_waveform_frequency;
} motor_control_Config;

typedef struct _motor_control_State {
    bool has_motor_enabled;
    bool motor_enabled;
    bool has_motor_direction;
    bool motor_direction;
    bool has_motor_speed;
    float motor_speed;
    bool has_motor_position;
    int32_t motor_position;
    bool has_motor_pulse_us;
    uint32_t motor_pulse_us;
    bool has_motor_delay_us;
    uint32_t motor_delay_us;
    bool has_motor_continuous;
    bool motor_continuous;
} motor_control_State;

/* Default values for struct fields */
extern const uint32_t motor_control_Config_baud_rate_default;
extern const float motor_control_Config_max_waveform_voltage_default;
extern const float motor_control_Config_max_waveform_frequency_default;
extern const bool motor_control_State_motor_enabled_default;
extern const bool motor_control_State_motor_direction_default;
extern const float motor_control_State_motor_speed_default;
extern const int32_t motor_control_State_motor_position_default;
extern const uint32_t motor_control_State_motor_pulse_us_default;
extern const uint32_t motor_control_State_motor_delay_us_default;
extern const bool motor_control_State_motor_continuous_default;

/* Initializer values for message structs */
#define motor_control_Config_init_default        {false, 0, false, 115200u, false, 0, false, 200, false, 0, false, 10000}
#define motor_control_State_init_default         {false, false, false, false, false, 0, false, 0, false, 20u, false, 1000u, false, false}
#define motor_control_Config_init_zero           {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define motor_control_State_init_zero            {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define motor_control_Config_serial_number_tag   1
#define motor_control_Config_baud_rate_tag       2
#define motor_control_Config_i2c_address_tag     3
#define motor_control_Config_max_waveform_voltage_tag 50
#define motor_control_Config_min_waveform_frequency_tag 51
#define motor_control_Config_max_waveform_frequency_tag 52
#define motor_control_State_motor_enabled_tag    1
#define motor_control_State_motor_direction_tag  2
#define motor_control_State_motor_speed_tag      3
#define motor_control_State_motor_position_tag   4
#define motor_control_State_motor_pulse_us_tag   5
#define motor_control_State_motor_delay_us_tag   6
#define motor_control_State_motor_continuous_tag 7

/* Struct field encoding specification for nanopb */
extern const pb_field_t motor_control_Config_fields[7];
extern const pb_field_t motor_control_State_fields[8];

/* Maximum encoded size of messages (where known) */
#define motor_control_Config_size                36
#define motor_control_State_size                 34

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CONFIG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
