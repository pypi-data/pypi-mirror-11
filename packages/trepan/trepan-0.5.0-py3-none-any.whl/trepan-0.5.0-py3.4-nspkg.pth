import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan',)); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan',types.ModuleType('trepan')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'bwprocessor')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.bwprocessor',types.ModuleType('trepan.bwprocessor')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan'], 'bwprocessor', m)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'inout')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.inout',types.ModuleType('trepan.inout')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan'], 'inout', m)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'interfaces')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.interfaces',types.ModuleType('trepan.interfaces')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan'], 'interfaces', m)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'lib')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.lib',types.ModuleType('trepan.lib')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan'], 'lib', m)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'processor')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.processor',types.ModuleType('trepan.processor')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan'], 'processor', m)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'processor', 'command')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.processor.command',types.ModuleType('trepan.processor.command')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan.processor'], 'command', m)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'processor', 'command', 'info_subcmd')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.processor.command.info_subcmd',types.ModuleType('trepan.processor.command.info_subcmd')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan.processor.command'], 'info_subcmd', m)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'processor', 'command', 'set_subcmd')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.processor.command.set_subcmd',types.ModuleType('trepan.processor.command.set_subcmd')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan.processor.command'], 'set_subcmd', m)
import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('trepan', 'processor', 'command', 'show_subcmd')); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('trepan.processor.command.show_subcmd',types.ModuleType('trepan.processor.command.show_subcmd')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p); m and setattr(sys.modules['trepan.processor.command'], 'show_subcmd', m)
