#!/bin/env python

import os
import sys
import logging as log
from ${package} import *

# INFO:
# This file is just a template. Won't be installed as a runable script for
# your module as long as it's called "dummy.py" (see your setup.py for
# details as to why) but anything else in this directory would be
# installable by a python packager such as pip.


def config_logging(verbose=False):
    """Setup logging"""
    if verbose:
        loglevel = log.DEBUG
        log_format = '%(funcName)s - %(asctime)s - %(levelname)s - %(message)s'
    else:
        loglevel = log.INFO
        log_format = '[%(levelname)s] %(message)s'
    log.basicConfig(format=log_format, datefmt='%F_%T', level=loglevel)


class dummy(object):
    """ Nice docstring for a Dummy class """
    def __init__(self):
        pass


if __name__ == '__main__':

    try:
        import pkg_resources

        # Note that when working from a source tree, this could end up finding
        # the system installed version, so it may not accurately reflect the
        # actual version. Thus, it is always best to work in a virtual
        # environment.
        VERSION = pkg_resources.get_distribution('${project}').version
    except:
        # Just use a dummy version to make it clear this is coming from the
        # source tree and is not an installed version.
        VERSION = '0.0+treedev'

    from argparse import ArgumentParser
    parser = ArgumentParser(usage="%(prog)s [options]")
    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + VERSION)
    parser.add_argument('-v', '--verbose', action="store_true", default=False,
                        help="Set loglevel to DEBUG")
    # TODO: Add more relevant options

    args = parser.parse_args()

    # Setup logging
    config_logging(args.verbose)

    # If you'd like a dictionary of the arguments, try: vars(args)
