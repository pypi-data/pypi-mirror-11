{
  "name": "react-select",
  "version": "0.4.9",
  "description": "A Select control built with and for ReactJS",
  "main": "lib/Select.js",
  "author": {
    "name": "Jed Watson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/JedWatson/react-select.git"
  },
  "dependencies": {
    "classnames": "^2.1.1",
    "react-input-autosize": "^0.4.3"
  },
  "devDependencies": {
    "babel-eslint": "^3.1.1",
    "babel-jest": "^5.2.0",
    "eslint": "^0.21.0",
    "eslint-plugin-react": "^2.2.0",
    "gulp": "^3.8.11",
    "jest-cli": "^0.4.2",
    "react": ">=0.12.0",
    "react-component-gulp-tasks": "^0.7.0"
  },
  "peerDependencies": {
    "react": ">=0.12.0"
  },
  "browserify-shim": {
    "classnames": "global:classNames",
    "react": "global:React",
    "react-input-autosize": "global:AutosizeInput"
  },
  "scripts": {
    "build": "gulp clean && NODE_ENV=production gulp build",
    "bump": "gulp bump",
    "bump:major": "gulp bump:major",
    "bump:minor": "gulp bump:minor",
    "dev": "gulp dev",
    "examples": "gulp dev:server",
    "lint": "eslint ./; true",
    "release": "gulp release",
    "test": "jest; true",
    "watch": "gulp watch:lib"
  },
  "jest": {
    "scriptPreprocessor": "<rootDir>/node_modules/babel-jest",
    "unmockedModulePathPatterns": [
      "<rootDir>/node_modules/react"
    ],
    "testPathDirs": [
      "<rootDir>/src"
    ]
  },
  "keywords": [
    "react",
    "react-component",
    "select",
    "multiselect",
    "combobox",
    "input",
    "form",
    "ui"
  ],
  "readme": "React-Select\n============\n\nA Select control built with and for [React](http://facebook.github.io/react/index.html). Initially built for use in [KeystoneJS](http://www.keystonejs.com).\n\n\n## Demo & Examples\n\nLive demo: [jedwatson.github.io/react-select](http://jedwatson.github.io/react-select/)\n\nTo build the examples locally, run:\n\n```\nnpm install\ngulp dev\n```\n\nThen open [`localhost:8000`](http://localhost:8000) in a browser.\n\n\n## Project Status\n\nThis project is quite stable and ready for production use, however there are plans to improve it including:\n\n- CSS Styles and theme support (working, could be improved)\n- Documentation website (currently just examples)\n- Custom options rendering\n\nIt's loosely based on [Selectize](http://brianreavis.github.io/selectize.js/) (in terms of behaviour and user experience) and [React-Autocomplete](https://github.com/rackt/react-autocomplete) (as a native React Combobox implemenation), as well as other select controls including [Chosen](http://harvesthq.github.io/chosen/) and [Select2](http://ivaynberg.github.io/select2/).\n\n\n## Installation\n\nThe easiest way to use React-Select is to install it from NPM and include it in your own React build process (using [Browserify](http://browserify.org), etc).\n\n```\nnpm install react-select --save\n```\n\nYou can also use the standalone build by including `dist/select.js` and `dist/default.css` in your page. If you use this, make sure you have already included the following dependencies: \n\n* [React](http://facebook.github.io/react/)\n* [classNames](http://jedwatson.github.io/classnames/)\n* [react-input-autosize](https://github.com/JedWatson/react-input-autosize)\n\n\n## Usage\n\nReact-Select generates a hidden text field containing the selected value, so you can submit it as part of a standard form. You can also listen for changes with the `onChange` event property.\n\nOptions should be provided as an `Array` of `Object`s, each with a `value` and `label` property for rendering and searching.\n\nWhen the value is changed, `onChange(newValue, [selectedOptions])` will fire.\n\n```\nvar Select = require('react-select');\n\nvar options = [\n\t{ value: 'one', label: 'One' },\n\t{ value: 'two', label: 'Two' }\n];\n\nfunction logChange(val) {\n\tconsole.log(\"Selected: \" + val);\n}\n\n<Select\n\tname=\"form-field-name\"\n\tvalue=\"one\"\n\toptions={options}\n\tonChange={logChange}\n/>\n```\n\n### Multiselect options\n\nYou can enable multi-value selection by setting `multi={true}`. In this mode:\n\n* Selected options will be removed from the dropdown menu\n* The values of the selected items are joined using the `delimiter` property to create the input value\n* A simple value, if provided, will be split using the `delimiter` property\n* The `onChange` event provides an array of the selected options as the second argument\n\n### Async options\n\nIf you want to load options asynchronously, instead of providing an `options` Array, provide a `asyncOptions` Function.\n\nThe function takes two arguments `String input, Function callback`and will be called when the input text is changed.\n\nWhen your async process finishes getting the options, pass them to `callback(err, data)` in a Object `{ options: [] }`.\n\nThe select control will intelligently cache options for input strings that have already been fetched. Async options will still be filtered like the normal options array, so if your async process would only return a smaller set of results for a more specific query, also pass `complete: true` in the callback object.\n\nUnless you specify the property `autoload={false}` the control will automatically load the default set of options (i.e. for `input: ''`) when it is mounted.\n\n```\nvar Select = require('react-select');\n\nvar getOptions = function(input, callback) {\n\tsetTimeout(function() {\n\t\tcallback(null, {\n\t\t\toptions: [\n\t\t\t\t{ value: 'one', label: 'One' },\n\t\t\t\t{ value: 'two', label: 'Two' }\n\t\t\t],\n\t\t\t// CAREFUL! Only set this to true when there are no more options,\n\t\t\t// or more specific queries will not be sent to the server.\n\t\t\tcomplete: true\n\t\t});\n\t}, 500);\n};\n\n<Select\n\tname=\"form-field-name\"\n\tvalue=\"one\"\n\tasyncOptions={getOptions}\n/>\n```\n\n### Filtering options\n\nYou can control how options are filtered with the following properties:\n\n* `matchPos`: `\"start\"` or `\"any\"`: whether to match the text entered at the start or any position in the option value\n* `matchProp`: `\"label\"`, `\"value\"` or `\"any\"`: whether to match the value, label or both values of each option when filtering\n\nBoth properties default to `\"any\"`.\n\n#### Advanced filters\n\nYou can also completely replace the method used to filter either a single option, or the entire options array (allowing custom sort mechanisms, etc.)\n\n* `filterOption`: `function(Object option, String filter)` returns `Boolean`. Will override `matchPos` and `matchProp` options.\n* `filterOptions`: `function(Array options, String filter, Array currentValues)` returns `Array filteredOptions`. Will override `filterOption`, `matchPos` and `matchProp` options.\n\nFor multi-select inputs, when providing a custom `filterOptions` method, remember to exclude current values from the returned array of options.\n\n### Further options\n\n\n\tProperty\t\t\t|\tType\t\t|\tDescription\n:-----------------------|:--------------|:--------------------------------\n\tvalue \t\t\t\t|\tany\t\t\t|\t initial field value\n\tmulti \t\t\t\t|\tbool\t\t|\t multi-value input\n\tdisabled \t\t\t|\tbool\t\t|\t whether the Select is disabled or not\n\toptions \t\t\t|\tarray\t\t|\t array of options\n\tdelimiter \t\t\t|\tstring\t\t|\t delimiter to use to join multiple values\n\tasyncOptions \t\t|\tfunc\t\t|\t function to call to get options\n\tautoload \t\t\t|\tbool\t\t|\t whether to auto-load the default async options set\n\tplaceholder \t\t|\tstring\t\t|\t field placeholder, displayed when there's no value\n\tnoResultsText \t\t|\tstring\t\t|\t placeholder displayed when there are no matching search results\n\tclearable \t\t\t|\tbool\t\t|\t should it be possible to reset value\n\tclearValueText \t\t|\tstring\t\t|\t title for the \"clear\" control\n\tclearAllText \t\t|\tstring\t\t|\t title for the \"clear\" control when multi: true\n\tsearchable \t\t\t|\tbool\t\t|\t whether to enable searching feature or not\n\tsearchPromptText \t|\tstring\t\t|\t label to prompt for search input\n\tname \t\t\t\t|\tstring\t\t|\t field name, for hidden <input /> tag\n\tonChange \t\t\t|\tfunc\t\t|\t onChange handler: function(newValue) {}\n\tonFocus \t\t\t|\tfunc\t\t|\t onFocus handler: function(event) {}\n\tonBlur \t\t\t\t|\tfunc\t\t|\t onBlur handler: function(event) {}\n\tclassName \t\t\t|\tstring\t\t|\t className for the outer element\n\tfilterOption \t\t|\tfunc\t\t|\t method to filter a single option: function(option, filterString)\n\tfilterOptions \t\t|\tfunc\t\t|\t method to filter the options array: function([options], filterString, [values])\n\tmatchPos \t\t\t|\tstring\t\t|\t (any, start) match the start or entire string when filtering\n\tmatchProp \t\t\t|\tstring\t\t|\t (any, label, value) which option property to filter on\n\tinputProps \t\t\t|\tobject\t\t|\t custom attributes for the Input (in the Select-control) e.g: {'data-foo': 'bar'}\n\n\n# Contributing\n\nSee our [CONTRIBUTING.md](https://github.com/JedWatson/react-select/blob/master/CONTRIBUTING.md) for information on how to contribute.\n\n\n# License\n\nMIT Licensed. Copyright (c) Jed Watson 2015.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/JedWatson/react-select/issues"
  },
  "_id": "react-select@0.4.9",
  "_from": "react-select@^0.4.9"
}
