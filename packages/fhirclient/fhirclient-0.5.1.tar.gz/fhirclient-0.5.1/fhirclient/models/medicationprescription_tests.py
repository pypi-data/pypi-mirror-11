#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 0.5.0.5149 on 2015-07-06.
#  2015, SMART Health IT.


import os
import io
import unittest
import json
from . import medicationprescription
from .fhirdate import FHIRDate


class MedicationPrescriptionTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("MedicationPrescription", js["resourceType"])
        return medicationprescription.MedicationPrescription(js)
    
    def testMedicationPrescription1(self):
        inst = self.instantiate_from("medicationprescription-example-f001-combivent.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription1(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription1(inst2)
    
    def implMedicationPrescription1(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2013-05-25T19:32:52+01:00").date)
        self.assertEqual(inst.dateWritten.as_json(), "2013-05-25T19:32:52+01:00")
        self.assertEqual(inst.dispense.expectedSupplyDuration.code, "d")
        self.assertEqual(inst.dispense.expectedSupplyDuration.system, "urn:oid:2.16.840.1.113883.6.8")
        self.assertEqual(inst.dispense.expectedSupplyDuration.units, "days")
        self.assertEqual(inst.dispense.expectedSupplyDuration.value, 40)
        self.assertEqual(inst.dispense.numberOfRepeatsAllowed, 20)
        self.assertEqual(inst.dispense.quantity.code, "ug")
        self.assertEqual(inst.dispense.quantity.system, "urn:oid:2.16.840.1.113883.6.8")
        self.assertEqual(inst.dispense.quantity.units, "mcg")
        self.assertEqual(inst.dispense.quantity.value, 100)
        self.assertEqual(inst.dispense.validityPeriod.end.date, FHIRDate("2013-05-30").date)
        self.assertEqual(inst.dispense.validityPeriod.end.as_json(), "2013-05-30")
        self.assertEqual(inst.dispense.validityPeriod.start.date, FHIRDate("2013-04-08").date)
        self.assertEqual(inst.dispense.validityPeriod.start.as_json(), "2013-04-08")
        self.assertEqual(inst.dosageInstruction[0].additionalInstructions.text, "for use during pregnancy, contact physician")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.code, "ml")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.units, "ml")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.value, 10)
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].code, "394899003")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].display, "oral administration of treatment")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.end.date, FHIRDate("2013-11-05").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.end.as_json(), "2013-11-05")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.date, FHIRDate("2013-08-04").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.as_json(), "2013-08-04")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.frequency, 3)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.period, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.periodUnits, "d")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].code, "181220002")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].display, "Entire oral cavity")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].text, "3 tot 4 maal daags 1 flacon")
        self.assertEqual(inst.id, "f001")
        self.assertEqual(inst.identifier[0].system, "http://www.bmc/portal/prescriptions")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "order9837293")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].code, "13645005")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].display, "Chronic obstructive pulmonary disease")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
    
    def testMedicationPrescription2(self):
        inst = self.instantiate_from("medicationprescription-example-f002-crestor.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription2(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription2(inst2)
    
    def implMedicationPrescription2(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2013-04-08").date)
        self.assertEqual(inst.dateWritten.as_json(), "2013-04-08")
        self.assertEqual(inst.dispense.quantity.code, "46992007")
        self.assertEqual(inst.dispense.quantity.system, "http://snomed.info/sct")
        self.assertEqual(inst.dispense.quantity.value, 90)
        self.assertEqual(inst.dispense.validityPeriod.start.date, FHIRDate("2013-04-08").date)
        self.assertEqual(inst.dispense.validityPeriod.start.as_json(), "2013-04-08")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.code, "mg")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.units, "mg")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.value, 10)
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].code, "386359008")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].display, "Administration of drug or medicament via oral route")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.date, FHIRDate("2013-08-04").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.as_json(), "2013-08-04")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.frequency, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.period, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.periodUnits, "d")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].code, "181220002")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].display, "Entire oral cavity")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.id, "f002")
        self.assertEqual(inst.identifier[0].system, "http://www.bmc.nl/portal/prescriptions")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "order9837343")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].code, "28036006")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].display, "High density lipoprotein cholesterol level")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
    
    def testMedicationPrescription3(self):
        inst = self.instantiate_from("medicationprescription-example-f003-tolbutamide.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription3(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription3(inst2)
    
    def implMedicationPrescription3(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dateWritten.as_json(), "2011-05-01")
        self.assertEqual(inst.dispense.quantity.code, "46992007")
        self.assertEqual(inst.dispense.quantity.system, "http://snomed.info/sct")
        self.assertEqual(inst.dispense.quantity.value, 90)
        self.assertEqual(inst.dispense.validityPeriod.start.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dispense.validityPeriod.start.as_json(), "2011-05-01")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.code, "mg")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.units, "mg")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.value, 500)
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].code, "386359008")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].display, "Administration of drug or medicament via oral route")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.as_json(), "2011-05-01")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.frequency, 3)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.period, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.periodUnits, "d")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].code, "181220002")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].display, "Entire oral cavity")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.id, "f003")
        self.assertEqual(inst.identifier[0].system, "http://www.bmc.nl/portal/prescriptions")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "order9845343")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].code, "444780001")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].display, "High glucose level in blood")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
    
    def testMedicationPrescription4(self):
        inst = self.instantiate_from("medicationprescription-example-f004-metoprolol.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription4(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription4(inst2)
    
    def implMedicationPrescription4(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dateWritten.as_json(), "2011-05-01")
        self.assertEqual(inst.dispense.quantity.code, "46992007")
        self.assertEqual(inst.dispense.quantity.system, "http://snomed.info/sct")
        self.assertEqual(inst.dispense.quantity.value, 90)
        self.assertEqual(inst.dispense.validityPeriod.start.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dispense.validityPeriod.start.as_json(), "2011-05-01")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.code, "mg")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.units, "mg")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.value, 50)
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].code, "386359008")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].display, "Administration of drug or medicament via oral route")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.as_json(), "2011-05-01")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.frequency, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.period, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.periodUnits, "d")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].code, "181220002")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].display, "Entire oral cavity")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.id, "f004")
        self.assertEqual(inst.identifier[0].system, "http://www.bmc.nl/portal/prescriptions")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "order9845343")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].code, "38341003")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].display, "High blood pressure")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
    
    def testMedicationPrescription5(self):
        inst = self.instantiate_from("medicationprescription-example-f005-enalapril.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription5(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription5(inst2)
    
    def implMedicationPrescription5(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dateWritten.as_json(), "2011-05-01")
        self.assertEqual(inst.dispense.quantity.code, "46992007")
        self.assertEqual(inst.dispense.quantity.system, "http://snomed.info/sct")
        self.assertEqual(inst.dispense.quantity.value, 28)
        self.assertEqual(inst.dispense.validityPeriod.start.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dispense.validityPeriod.start.as_json(), "2011-05-01")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.code, "mg")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.units, "mg")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.value, 5)
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].code, "386359008")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].display, "Administration of drug or medicament via oral route")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.date, FHIRDate("2011-05-01").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.as_json(), "2011-05-01")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.frequency, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.period, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.periodUnits, "d")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].code, "181220002")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].display, "Entire oral cavity")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.id, "f005")
        self.assertEqual(inst.identifier[0].system, "http://www.bmc.nl/portal/prescriptions")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "order9823343")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].code, "38341003")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].display, "High blood pressure")
        self.assertEqual(inst.reasonCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
    
    def testMedicationPrescription6(self):
        inst = self.instantiate_from("medicationprescription-example-f201-salmeterol.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription6(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription6(inst2)
    
    def implMedicationPrescription6(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2013-03-11").date)
        self.assertEqual(inst.dateWritten.as_json(), "2013-03-11")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.code, "PUFF")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.system, "http://hl7.org/fhir/v3/orderableDrugForm")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.value, 1)
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.code, "259032004")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.units, "daily")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.value, 1)
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.code, "415215001")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.units, "puffs")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.value, 2)
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].code, "320276009")
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].display, "Salmeterol+fluticasone 25/250ug inhaler")
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].code, "321667001")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].display, "Respiratory tract")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.end.date, FHIRDate("2013-05-11").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.end.as_json(), "2013-05-11")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.date, FHIRDate("2013-03-11").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.bounds.start.as_json(), "2013-03-11")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.frequency, 2)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.period, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.periodUnits, "d")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].code, "74262004")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].display, "Oral cavity")
        self.assertEqual(inst.dosageInstruction[0].site.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].text, "aerosol 25/250ug/do 120do 2x - 1 dose - daily")
        self.assertEqual(inst.id, "f201")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
    
    def testMedicationPrescription7(self):
        inst = self.instantiate_from("medicationprescription-example-f202-flucloxacilline.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription7(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription7(inst2)
    
    def implMedicationPrescription7(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2013-03-11").date)
        self.assertEqual(inst.dateWritten.as_json(), "2013-03-11")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.code, "258702006")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.units, "hours")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.value, 24)
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.code, "258682000")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.units, "gram")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.value, 12)
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].code, "323493005")
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].display, "Injected floxacillin")
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].code, "47625008")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].display, "Intravenous route")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].scheduledPeriod.end.date, FHIRDate("2013-03-21").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledPeriod.end.as_json(), "2013-03-21")
        self.assertEqual(inst.dosageInstruction[0].scheduledPeriod.start.date, FHIRDate("2013-03-11").date)
        self.assertEqual(inst.dosageInstruction[0].scheduledPeriod.start.as_json(), "2013-03-11")
        self.assertEqual(inst.dosageInstruction[0].text, "Flucloxacilline 12g/24h")
        self.assertEqual(inst.id, "f202")
        self.assertEqual(inst.status, "completed")
        self.assertEqual(inst.text.status, "generated")
    
    def testMedicationPrescription8(self):
        inst = self.instantiate_from("medicationprescription-example-f203-paracetamol.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription8(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription8(inst2)
    
    def implMedicationPrescription8(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2013-04-04").date)
        self.assertEqual(inst.dateWritten.as_json(), "2013-04-04")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.code, "258702006")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.units, "hours")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.denominator.value, 24)
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.code, "258684004")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.units, "milligram")
        self.assertEqual(inst.dosageInstruction[0].maxDosePerPeriod.numerator.value, 3000)
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].code, "322236009")
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].display, "Paracetamol 500mg tablet")
        self.assertEqual(inst.dosageInstruction[0].method.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].text, "Paracetamol 3xdaags 1000mg")
        self.assertEqual(inst.id, "f203")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
    
    def testMedicationPrescription9(self):
        inst = self.instantiate_from("medicationprescription-qicore-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a MedicationPrescription instance")
        self.implMedicationPrescription9(inst)
        
        js = inst.as_json()
        self.assertEqual("MedicationPrescription", js["resourceType"])
        inst2 = medicationprescription.MedicationPrescription(js)
        self.implMedicationPrescription9(inst2)
    
    def implMedicationPrescription9(self, inst):
        self.assertEqual(inst.dateWritten.date, FHIRDate("2015-03-25T19:32:52-05:00").date)
        self.assertEqual(inst.dateWritten.as_json(), "2015-03-25T19:32:52-05:00")
        self.assertEqual(inst.dispense.quantity.code, "ml")
        self.assertEqual(inst.dispense.quantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dispense.quantity.units, "ml")
        self.assertEqual(inst.dispense.quantity.value, 100)
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.code, "ml")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.units, "ml")
        self.assertEqual(inst.dosageInstruction[0].doseQuantity.value, 5)
        self.assertEqual(inst.dosageInstruction[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/pharmacy-core-doseType")
        self.assertEqual(inst.dosageInstruction[0].extension[0].valueCodeableConcept.coding[0].code, "440231000124106")
        self.assertEqual(inst.dosageInstruction[0].extension[0].valueCodeableConcept.coding[0].display, "Maintenance dose")
        self.assertEqual(inst.dosageInstruction[0].extension[0].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].extension[1].url, "http://hl7.org/fhir/StructureDefinition/pharmacy-core-infuseOver")
        self.assertEqual(inst.dosageInstruction[0].extension[1].valueQuantity.code, "m")
        self.assertEqual(inst.dosageInstruction[0].extension[1].valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].extension[1].valueQuantity.units, "min")
        self.assertEqual(inst.dosageInstruction[0].extension[1].valueQuantity.value, 1)
        self.assertEqual(inst.dosageInstruction[0].extension[2].url, "http://hl7.org/fhir/StructureDefinition/pharmacy-core-minDosePerPeriod")
        self.assertEqual(inst.dosageInstruction[0].extension[2].valueRatio.denominator.code, "day")
        self.assertEqual(inst.dosageInstruction[0].extension[2].valueRatio.denominator.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].extension[2].valueRatio.denominator.units, "day")
        self.assertEqual(inst.dosageInstruction[0].extension[2].valueRatio.denominator.value, 1)
        self.assertEqual(inst.dosageInstruction[0].extension[2].valueRatio.numerator.code, "ml")
        self.assertEqual(inst.dosageInstruction[0].extension[2].valueRatio.numerator.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].extension[2].valueRatio.numerator.units, "ml")
        self.assertEqual(inst.dosageInstruction[0].extension[2].valueRatio.numerator.value, 15)
        self.assertEqual(inst.dosageInstruction[0].extension[3].url, "http://hl7.org/fhir/StructureDefinition/pharmacy-core-maxDeliveryVolume")
        self.assertEqual(inst.dosageInstruction[0].extension[3].valueQuantity.code, "ml")
        self.assertEqual(inst.dosageInstruction[0].extension[3].valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.dosageInstruction[0].extension[3].valueQuantity.units, "ml")
        self.assertEqual(inst.dosageInstruction[0].extension[3].valueQuantity.value, 15)
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].code, "394899003")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].display, "oral administration of treatment")
        self.assertEqual(inst.dosageInstruction[0].route.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.frequency, 3)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.period, 1)
        self.assertEqual(inst.dosageInstruction[0].scheduledTiming.repeat.periodUnits, "d")
        self.assertEqual(inst.id, "qicore")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")

