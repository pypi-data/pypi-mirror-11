{
 "metadata": {},
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Example of tuning an SVC model in scikit-learn with Optunity\n",
      "# This example requires sklearn\n",
      "\n",
      "import optunity\n",
      "import optunity.metrics\n",
      "import sklearn.svm\n",
      "import numpy\n",
      "import time\n",
      "\n",
      "# CREATE THE TRAINING SET\n",
      "from sklearn.datasets import load_digits\n",
      "digits = load_digits()\n",
      "n = digits.data.shape[0]\n",
      "\n",
      "positive_digit = 8\n",
      "negative_digit = 9\n",
      "\n",
      "positive_idx = [i for i in range(n) if digits.target[i] == positive_digit]\n",
      "negative_idx = [i for i in range(n) if digits.target[i] == negative_digit]\n",
      "\n",
      "# add some noise to the data to make it a little challenging\n",
      "original_data = digits.data[positive_idx + negative_idx, ...]\n",
      "data = original_data + 5 * numpy.random.randn(original_data.shape[0], original_data.shape[1])\n",
      "labels = [True] * len(positive_idx) + [False] * len(negative_idx)\n",
      "\n",
      "# we will use nested 3-fold cross-validation\n",
      "# in the outer cross-validation procedure\n",
      "# we make the decorator explicitly so we can reuse the same folds\n",
      "# in both tuned and untuned approaches\n",
      "folds = optunity.cross_validation.generate_folds(data.shape[0], num_folds=3)\n",
      "outer_cv = optunity.cross_validated(x=data, y=labels, num_folds=3, folds=[folds],\n",
      "                                    aggregator=optunity.cross_validation.identity)\n",
      "outer_cv = optunity.cross_validated(x=data, y=labels, num_folds=3)\n",
      "\n",
      "# compute area under ROC curve of default parameters\n",
      "def compute_roc_standard(x_train, y_train, x_test, y_test):\n",
      "    model = sklearn.svm.SVC().fit(x_train, y_train)\n",
      "    decision_values = model.decision_function(x_test)\n",
      "    auc = optunity.metrics.roc_auc(y_test, decision_values)\n",
      "    return auc\n",
      "\n",
      "# decorate with cross-validation\n",
      "compute_roc_standard = outer_cv(compute_roc_standard)\n",
      "roc_standard = compute_roc_standard()\n",
      "#print('Nested cv area under ROC curve of non-tuned model: ' + str(roc_standard))\n",
      "\n",
      "# compute area under ROC curve with tuned parameters\n",
      "# we use 2x5 fold cross-validation while tuning\n",
      "def compute_roc_tuned(x_train, y_train, x_test, y_test):\n",
      "\n",
      "    # define objective function\n",
      "    @optunity.cross_validated(x=x_train, y=y_train, num_iter=2, num_folds=5)\n",
      "    def inner_cv(x_train, y_train, x_test, y_test, C, gamma):\n",
      "        model = sklearn.svm.SVC(C=C, gamma=gamma).fit(x_train, y_train)\n",
      "        decision_values = model.decision_function(x_test)\n",
      "        return optunity.metrics.roc_auc(y_test, decision_values)\n",
      "\n",
      "    # optimize parameters\n",
      "    optimal_pars, _, _ = optunity.maximize(inner_cv, 150, C=[0, 10], gamma=[0, 0.1], pmap=optunity.pmap)\n",
      "    # if you are running this in IPython, optunity.pmap will not work\n",
      "    # more info at: https://github.com/claesenm/optunity/issues/8\n",
      "    # comment out the above line and replace by the one below:\n",
      "    # optimal_pars, _, _ = optunity.maximize(inner_cv, 200, C=[0, 10], gamma=[0, 0.1])\n",
      "\n",
      "    tuned_model = sklearn.svm.SVC(**optimal_pars).fit(x_train, y_train)\n",
      "    decision_values = tuned_model.decision_function(x_test)\n",
      "    auc = optunity.metrics.roc_auc(y_test, decision_values)\n",
      "    return auc\n",
      "\n",
      "# decorate with cross-validation\n",
      "compute_roc_tuned = outer_cv(compute_roc_tuned)\n",
      "\n",
      "t = time.time()\n",
      "roc_tuned = compute_roc_tuned()\n",
      "diff = time.time() - t\n",
      "print('Nested cv area under ROC curve of tuned model: ' + str(roc_tuned))\n",
      "print('Tuning time (approx): ' + str(diff/3) + ' seconds') # we tuned 3 times"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}