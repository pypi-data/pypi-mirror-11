/*
I've changed the phasing relative to the spreadsheet a little. The default state beween
pixels now has P3-OR low, which makes a bit more sense before a row transfer to serial.
*/

defaults {
    P1-IA-1 low P2-IA-1 high P3-IA-1 low
    P1-IA-2 low P2-IA-2 high P3-IA-2 low
    P1-IA-3 low P2-IA-3 high P3-IA-3 low
    P1-IA-4 low P2-IA-4 high P3-IA-4 low
    P1-FS-1 low P2-FS-1 high P3-FS-1 low
    P1-FS-2 low P2-FS-2 high P3-FS-2 low
    P1-FS-3 low P2-FS-3 high P3-FS-3 low
    P1-FS-4 low P2-FS-4 high P3-FS-4 low
    P1-OR low P2-OR high P3-OR low
    RG high ID high
    Int low DeInt low Clamp low CNV low
    }

/*
Another change is that I'm setting RG high as soon as Int goes low. There's no race: the
RG circuit is much slower. We might be able to move RG low earlier for more Int/Deint time.
*/

sequence pixcycle {
    step
    P3-OR high step
    CNV high step
    step
    Clamp high step
    P2-OR low RG low step
    step
    step
    DeInt high Clamp low step
    P1-OR high step
    CNV low step
    step
    step
    P3-OR low DeInt low step
    step
    step
    step
    P2-OR high Int high step
    step
    step
    step
    P1-OR low step
    step
    Int low RG high step
    }

/* 
For parallel to serial transfer, the serial clock machinations in the spreadsheet are a
bit strange. From the CCD structure, it appears that having P1-OR and P2-OR high would be good when P3-FS goes low, but more complicated clocking shouldn't be needed.
*/

sequence fr2serial {
    P3-FS-1 high P3-FS-2 high P3-FS-3 high P3-FS-4 high P1-OR high
    step(24)
    P2-FS-1 low P2-FS-2 low P2-FS-3 low P2-FS-4 low
    step(24)
    P1-FS-1 high P1-FS-2 high P1-FS-3 high P1-FS-4 high
    step(24)
    P3-FS-1 low P3-FS-2 low P3-FS-3 low P3-FS-4 low
    step(24)
    P2-FS-1 high P2-FS-2 high P2-FS-3 high P2-FS-4 high
    step(24)
    P1-FS-1 low P1-FS-2 low P1-FS-3 low P1-FS-4 low P1-OR low
    step(24)
}

/* 
Bare bones frame transfer cycles: no serials.
*/

sequence frametransfer1 {
    P3-FS-1 high P3-IA-1 high
    step(24)
    P2-FS-1 low P2-IA-1 low
    step(24)
    P1-FS-1 high P1-IA-1 high
    step(24)
    P3-FS-1 low P3-IA-1 low
    step(24)
    P2-FS-1 high P2-IA-1 high
    step(24)
    P1-FS-1 low P1-IA-1 low
    step(24)
} 

sequence frametransfer2 {
    P3-FS-2 high P3-IA-2 high
    step(24)
    P2-FS-2 low P2-IA-2 low
    step(24)
    P1-FS-2 high P1-IA-2 high
    step(24)
    P3-FS-2 low P3-IA-2 low
    step(24)
    P2-FS-2 high P2-IA-2 high
    step(24)
    P1-FS-2 low P1-IA-2 low
    step(24)
} 

sequence frametransfer3 {
    P3-FS-3 high P3-IA-3 high
    step(24)
    P2-FS-3 low P2-IA-3 low
    step(24)
    P1-FS-3 high P1-IA-3 high
    step(24)
    P3-FS-3 low P3-IA-3 low
    step(24)
    P2-FS-3 high P2-IA-3 high
    step(24)
    P1-FS-3 low P1-IA-3 low
    step(24)
} 

sequence frametransfer4 {
    P3-FS-4 high P3-IA-4 high
    step(24)
    P2-FS-4 low P2-IA-4 low
    step(24)
    P1-FS-4 high P1-IA-4 high
    step(24)
    P3-FS-4 low P3-IA-4 low
    step(24)
    P2-FS-4 high P2-IA-4 high
    step(24)
    P1-FS-4 low P1-IA-4 low
    step(24)
} 

/*
Physical layout of CCID80.
*/

parameter rows = 2048;
parameter buffer_rows = 10;/* top and bottom */
parameter physical_rows = rows + 2 * buffer_rows;
parameter columns = 512;
parameter prescan = 11;
parameter physical_columns = prescan+columns;

/*
Other parameters.
*/

parameter preflush = 2; /* physical rows to flush before first row */
parameter overclock = 11; /* extra rows and columns to clock */

/*
The sequencer program.
*/

no_data ( physical_rows ) frametransfer1;
no_data ( physical_rows ) frametransfer2;
no_data ( physical_rows ) frametransfer3;
no_data ( physical_rows ) frametransfer4;

no_data ( preflush * physical_columns ) pixcycle; /* flush serials */
do (buffer_rows) {
    no_data ( 1 ) fr2serial;
    no_data ( physical_columns + overclock ) pixcycle 
}

/* Now start taking data */

frame {
    do( rows ) {
    no_data ( 1 ) fr2serial;
    pixel_data ( physical_columns + overclock ) pixcycle;
    }
}

/* Clean up */

do (buffer_rows) {
    no_data ( 1 ) fr2serial;
    no_data ( physical_columns + overclock ) pixcycle; 
}

hold pixcycle; /* clock serials between frames */
