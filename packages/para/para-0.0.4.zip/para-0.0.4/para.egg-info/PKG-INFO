Metadata-Version: 1.1
Name: para
Version: 0.0.4
Summary: a set utilities that ake advantage of python's 'multiprocessing' module to distribute CPU-intensive tasks
Home-page: http://pypi.python.org/pypi/para
Author: Aaron Halfaker
Author-email: aaron.halfaker@gmail.com
License: The MIT License (MIT)

Copyright (c) 2015 Aaron Halfaker

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Description: # Para(llel) processing utilities
        This library implements a simple set of parallel processing utilities that
        take advantage of python's `multiprocessing` module to distribute processing
        over multiple CPUs on a single machine.  The most salient feature of this
        library is the **map()** function that can be used to distribute CPU-intensive
        processing of a collection of items over multiple cores.
        
        * **Installation** `pip install para`
        
        ## Basic usage
        
            >>> import para
            >>> import gzip
            >>>
            >>> items = ["examples/big-file1.gz", "examples/big-file2.gz",
            ...          "examples/big-file3.gz"]
            >>> def log_lines(path):
            ...     with gzip.open(path, 'rt') as f:
            ...         for lineno, line in enumerate(f):
            ...             if len(line) > 50:
            ...                 yield path, lineno, line
            ...
            >>> for path, lineno, line in para.map(log_lines, items):
            ...     print(path, lineno, repr(line))
            ...
            examples/big-file1.gz 2 'this line is going to be much longer than 80 chars -- at least I hope it will\n'
            examples/big-file3.gz 0 'again with the long lines -- this is going to show up in the output, I hope\n'
        
        ## Authors
        * Aaron Halfaker -- https://github.com/halfak
        
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Environment :: Other Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Classifier: Topic :: Scientific/Engineering
