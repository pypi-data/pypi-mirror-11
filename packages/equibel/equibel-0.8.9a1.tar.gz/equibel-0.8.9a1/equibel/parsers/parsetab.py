
# equibel/parsers/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '8B716C218B52702C22E4410691987D80'
    
_lr_action_items = {'AND':([1,2,4,5,6,7,9,10,11,12,13,14,15,16,21,22,23,24,25,],[-12,-9,-1,-8,-7,-2,-3,17,-11,-5,-6,-10,-13,17,-4,-14,17,17,17,]),'$end':([1,2,4,5,6,7,9,10,11,12,13,14,15,21,22,23,24,25,],[-12,-9,-1,-8,-7,-2,-3,0,-11,-5,-6,-10,-13,-4,-14,-16,-15,-17,]),'FALSE':([0,3,8,17,18,19,20,],[6,6,6,6,6,6,6,]),'NEG':([0,3,8,17,18,19,20,],[3,3,3,3,3,3,3,]),'LPAREN':([0,3,8,17,18,19,20,],[8,8,8,8,8,8,8,]),'IMPLIES':([1,2,4,5,6,7,9,10,11,12,13,14,15,16,21,22,23,24,25,],[-12,-9,-1,-8,-7,-2,-3,18,-11,-5,-6,-10,-13,18,-4,-14,18,-15,18,]),'RPAREN':([1,2,4,5,6,7,9,11,12,13,14,15,16,21,22,23,24,25,],[-12,-9,-1,-8,-7,-2,-3,-11,-5,-6,-10,-13,21,-4,-14,-16,-15,-17,]),'IDENTIFIER':([0,3,8,17,18,19,20,],[12,12,12,12,12,12,12,]),'TRUE':([0,3,8,17,18,19,20,],[13,13,13,13,13,13,13,]),'OR':([1,2,4,5,6,7,9,10,11,12,13,14,15,16,21,22,23,24,25,],[-12,-9,-1,-8,-7,-2,-3,19,-11,-5,-6,-10,-13,19,-4,-14,19,-15,19,]),'EQUIV':([1,2,4,5,6,7,9,10,11,12,13,14,15,16,21,22,23,24,25,],[-12,-9,-1,-8,-7,-2,-3,20,-11,-5,-6,-10,-13,20,-4,-14,-16,-15,20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'DISJUNCTION':([0,3,8,17,18,19,20,],[14,14,14,14,14,14,14,]),'EQUIVALENCE':([0,3,8,17,18,19,20,],[1,1,1,1,1,1,1,]),'NEGATION':([0,3,8,17,18,19,20,],[5,5,5,5,5,5,5,]),'BOOLEAN':([0,3,8,17,18,19,20,],[7,7,7,7,7,7,7,]),'ATOM':([0,3,8,17,18,19,20,],[4,4,4,4,4,4,4,]),'COMPOUND':([0,3,8,17,18,19,20,],[9,9,9,9,9,9,9,]),'FORMULA':([0,3,8,17,18,19,20,],[10,15,16,22,23,24,25,]),'IMPLICATION':([0,3,8,17,18,19,20,],[11,11,11,11,11,11,11,]),'CONJUNCTION':([0,3,8,17,18,19,20,],[2,2,2,2,2,2,2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> FORMULA","S'",1,None,None,None),
  ('FORMULA -> ATOM','FORMULA',1,'p_FORMULA','formula_parser_infix.py',59),
  ('FORMULA -> BOOLEAN','FORMULA',1,'p_FORMULA','formula_parser_infix.py',60),
  ('FORMULA -> COMPOUND','FORMULA',1,'p_FORMULA','formula_parser_infix.py',61),
  ('FORMULA -> LPAREN FORMULA RPAREN','FORMULA',3,'p_FORMULA','formula_parser_infix.py',62),
  ('ATOM -> IDENTIFIER','ATOM',1,'p_ATOM','formula_parser_infix.py',66),
  ('BOOLEAN -> TRUE','BOOLEAN',1,'p_BOOLEAN_TRUE','formula_parser_infix.py',70),
  ('BOOLEAN -> FALSE','BOOLEAN',1,'p_BOOLEAN_FALSE','formula_parser_infix.py',74),
  ('COMPOUND -> NEGATION','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',78),
  ('COMPOUND -> CONJUNCTION','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',79),
  ('COMPOUND -> DISJUNCTION','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',80),
  ('COMPOUND -> IMPLICATION','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',81),
  ('COMPOUND -> EQUIVALENCE','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',82),
  ('NEGATION -> NEG FORMULA','NEGATION',2,'p_NEGATION','formula_parser_infix.py',86),
  ('CONJUNCTION -> FORMULA AND FORMULA','CONJUNCTION',3,'p_CONJUNCTION','formula_parser_infix.py',90),
  ('DISJUNCTION -> FORMULA OR FORMULA','DISJUNCTION',3,'p_DISJUNCTION','formula_parser_infix.py',94),
  ('IMPLICATION -> FORMULA IMPLIES FORMULA','IMPLICATION',3,'p_IMPLICATION','formula_parser_infix.py',98),
  ('EQUIVALENCE -> FORMULA EQUIV FORMULA','EQUIVALENCE',3,'p_EQUIVALENCE','formula_parser_infix.py',103),
]
