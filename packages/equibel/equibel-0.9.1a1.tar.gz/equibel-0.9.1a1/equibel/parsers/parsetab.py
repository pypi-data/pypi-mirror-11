
# /Users/paulvicol/Code/Python/equibel_install/equibel/parsers/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '8B0816C135B7A579392B89B8DDE2314B'
    
_lr_action_items = {'AND':([1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,22,23,24,25,26,],[-13,-10,-6,-1,-9,-8,-2,-3,18,-12,-5,-7,-11,-14,18,-4,-15,18,18,18,]),'$end':([1,2,3,4,6,7,8,10,11,12,13,14,15,16,22,23,24,25,26,],[-13,-10,-6,-1,-9,-8,-2,-3,0,-12,-5,-7,-11,-14,-4,-15,-17,-16,-18,]),'FALSE':([0,5,9,18,19,20,21,],[7,7,7,7,7,7,7,]),'NEG':([0,5,9,18,19,20,21,],[5,5,5,5,5,5,5,]),'LPAREN':([0,5,9,18,19,20,21,],[9,9,9,9,9,9,9,]),'EQUIV':([1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,22,23,24,25,26,],[-13,-10,-6,-1,-9,-8,-2,-3,21,-12,-5,-7,-11,-14,21,-4,-15,-17,-16,21,]),'IMPLIES':([1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,22,23,24,25,26,],[-13,-10,-6,-1,-9,-8,-2,-3,19,-12,-5,-7,-11,-14,19,-4,-15,19,-16,19,]),'INTEGER':([0,5,9,18,19,20,21,],[3,3,3,3,3,3,3,]),'IDENTIFIER':([0,5,9,18,19,20,21,],[13,13,13,13,13,13,13,]),'TRUE':([0,5,9,18,19,20,21,],[14,14,14,14,14,14,14,]),'OR':([1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,22,23,24,25,26,],[-13,-10,-6,-1,-9,-8,-2,-3,20,-12,-5,-7,-11,-14,20,-4,-15,20,-16,20,]),'RPAREN':([1,2,3,4,6,7,8,10,12,13,14,15,16,17,22,23,24,25,26,],[-13,-10,-6,-1,-9,-8,-2,-3,-12,-5,-7,-11,-14,22,-4,-15,-17,-16,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'DISJUNCTION':([0,5,9,18,19,20,21,],[15,15,15,15,15,15,15,]),'EQUIVALENCE':([0,5,9,18,19,20,21,],[1,1,1,1,1,1,1,]),'NEGATION':([0,5,9,18,19,20,21,],[6,6,6,6,6,6,6,]),'BOOLEAN':([0,5,9,18,19,20,21,],[8,8,8,8,8,8,8,]),'ATOM':([0,5,9,18,19,20,21,],[4,4,4,4,4,4,4,]),'COMPOUND':([0,5,9,18,19,20,21,],[10,10,10,10,10,10,10,]),'FORMULA':([0,5,9,18,19,20,21,],[11,16,17,23,24,25,26,]),'IMPLICATION':([0,5,9,18,19,20,21,],[12,12,12,12,12,12,12,]),'CONJUNCTION':([0,5,9,18,19,20,21,],[2,2,2,2,2,2,2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> FORMULA","S'",1,None,None,None),
  ('FORMULA -> ATOM','FORMULA',1,'p_FORMULA','formula_parser_infix.py',103),
  ('FORMULA -> BOOLEAN','FORMULA',1,'p_FORMULA','formula_parser_infix.py',104),
  ('FORMULA -> COMPOUND','FORMULA',1,'p_FORMULA','formula_parser_infix.py',105),
  ('FORMULA -> LPAREN FORMULA RPAREN','FORMULA',3,'p_FORMULA','formula_parser_infix.py',106),
  ('ATOM -> IDENTIFIER','ATOM',1,'p_ATOM','formula_parser_infix.py',111),
  ('ATOM -> INTEGER','ATOM',1,'p_ATOM','formula_parser_infix.py',112),
  ('BOOLEAN -> TRUE','BOOLEAN',1,'p_BOOLEAN_TRUE','formula_parser_infix.py',117),
  ('BOOLEAN -> FALSE','BOOLEAN',1,'p_BOOLEAN_FALSE','formula_parser_infix.py',122),
  ('COMPOUND -> NEGATION','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',127),
  ('COMPOUND -> CONJUNCTION','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',128),
  ('COMPOUND -> DISJUNCTION','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',129),
  ('COMPOUND -> IMPLICATION','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',130),
  ('COMPOUND -> EQUIVALENCE','COMPOUND',1,'p_COMPOUND','formula_parser_infix.py',131),
  ('NEGATION -> NEG FORMULA','NEGATION',2,'p_NEGATION','formula_parser_infix.py',136),
  ('CONJUNCTION -> FORMULA AND FORMULA','CONJUNCTION',3,'p_CONJUNCTION','formula_parser_infix.py',141),
  ('DISJUNCTION -> FORMULA OR FORMULA','DISJUNCTION',3,'p_DISJUNCTION','formula_parser_infix.py',146),
  ('IMPLICATION -> FORMULA IMPLIES FORMULA','IMPLICATION',3,'p_IMPLICATION','formula_parser_infix.py',151),
  ('EQUIVALENCE -> FORMULA EQUIV FORMULA','EQUIVALENCE',3,'p_EQUIVALENCE','formula_parser_infix.py',157),
]
