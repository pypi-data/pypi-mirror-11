# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SillyCrossbow', [dirname(__file__)])
        except ImportError:
            import _SillyCrossbow
            return _SillyCrossbow
        if fp is not None:
            try:
                _mod = imp.load_module('_SillyCrossbow', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SillyCrossbow = swig_import_helper()
    del swig_import_helper
else:
    import _SillyCrossbow
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SillyCrossbow.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _SillyCrossbow.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SillyCrossbow.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SillyCrossbow.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SillyCrossbow.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SillyCrossbow.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SillyCrossbow.SwigPyIterator_copy(self)

    def next(self):
        return _SillyCrossbow.SwigPyIterator_next(self)

    def __next__(self):
        return _SillyCrossbow.SwigPyIterator___next__(self)

    def previous(self):
        return _SillyCrossbow.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SillyCrossbow.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SillyCrossbow.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SillyCrossbow.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SillyCrossbow.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SillyCrossbow.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SillyCrossbow.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SillyCrossbow.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SillyCrossbow.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def SillyCrossbow():
    return _SillyCrossbow.SillyCrossbow()
SillyCrossbow = _SillyCrossbow.SillyCrossbow
class RGBA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RGBA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RGBA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _SillyCrossbow.RGBA_r_set
    __swig_getmethods__["r"] = _SillyCrossbow.RGBA_r_get
    if _newclass:
        r = _swig_property(_SillyCrossbow.RGBA_r_get, _SillyCrossbow.RGBA_r_set)
    __swig_setmethods__["g"] = _SillyCrossbow.RGBA_g_set
    __swig_getmethods__["g"] = _SillyCrossbow.RGBA_g_get
    if _newclass:
        g = _swig_property(_SillyCrossbow.RGBA_g_get, _SillyCrossbow.RGBA_g_set)
    __swig_setmethods__["b"] = _SillyCrossbow.RGBA_b_set
    __swig_getmethods__["b"] = _SillyCrossbow.RGBA_b_get
    if _newclass:
        b = _swig_property(_SillyCrossbow.RGBA_b_get, _SillyCrossbow.RGBA_b_set)
    __swig_setmethods__["a"] = _SillyCrossbow.RGBA_a_set
    __swig_getmethods__["a"] = _SillyCrossbow.RGBA_a_get
    if _newclass:
        a = _swig_property(_SillyCrossbow.RGBA_a_get, _SillyCrossbow.RGBA_a_set)

    def __init__(self):
        this = _SillyCrossbow.new_RGBA()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SillyCrossbow.delete_RGBA
    __del__ = lambda self: None
RGBA_swigregister = _SillyCrossbow.RGBA_swigregister
RGBA_swigregister(RGBA)

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr

    def __init__(self, width=0, height=0):
        this = _SillyCrossbow.new_Image(width, height)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SillyCrossbow.delete_Image
    __del__ = lambda self: None

    def getWidth(self):
        return _SillyCrossbow.Image_getWidth(self)

    def getHeight(self):
        return _SillyCrossbow.Image_getHeight(self)

    def getData(self):
        return _SillyCrossbow.Image_getData(self)

    def getDataVoid(self):
        return _SillyCrossbow.Image_getDataVoid(self)
Image_swigregister = _SillyCrossbow.Image_swigregister
Image_swigregister(Image)

class CropRect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CropRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CropRect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _SillyCrossbow.CropRect_x_set
    __swig_getmethods__["x"] = _SillyCrossbow.CropRect_x_get
    if _newclass:
        x = _swig_property(_SillyCrossbow.CropRect_x_get, _SillyCrossbow.CropRect_x_set)
    __swig_setmethods__["y"] = _SillyCrossbow.CropRect_y_set
    __swig_getmethods__["y"] = _SillyCrossbow.CropRect_y_get
    if _newclass:
        y = _swig_property(_SillyCrossbow.CropRect_y_get, _SillyCrossbow.CropRect_y_set)
    __swig_setmethods__["width"] = _SillyCrossbow.CropRect_width_set
    __swig_getmethods__["width"] = _SillyCrossbow.CropRect_width_get
    if _newclass:
        width = _swig_property(_SillyCrossbow.CropRect_width_get, _SillyCrossbow.CropRect_width_set)
    __swig_setmethods__["height"] = _SillyCrossbow.CropRect_height_set
    __swig_getmethods__["height"] = _SillyCrossbow.CropRect_height_get
    if _newclass:
        height = _swig_property(_SillyCrossbow.CropRect_height_get, _SillyCrossbow.CropRect_height_set)

    def __init__(self):
        this = _SillyCrossbow.new_CropRect()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SillyCrossbow.delete_CropRect
    __del__ = lambda self: None
CropRect_swigregister = _SillyCrossbow.CropRect_swigregister
CropRect_swigregister(CropRect)

class CropTransparent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CropTransparent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CropTransparent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SillyCrossbow.new_CropTransparent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SillyCrossbow.delete_CropTransparent
    __del__ = lambda self: None

    def getCroppedHeight(self):
        return _SillyCrossbow.CropTransparent_getCroppedHeight(self)

    def getCroppedWidth(self):
        return _SillyCrossbow.CropTransparent_getCroppedWidth(self)

    def getCroppedOffsetX(self):
        return _SillyCrossbow.CropTransparent_getCroppedOffsetX(self)

    def getCroppedOffsetY(self):
        return _SillyCrossbow.CropTransparent_getCroppedOffsetY(self)

    def getRect(self):
        return _SillyCrossbow.CropTransparent_getRect(self)

    def getCroppedImage(self):
        return _SillyCrossbow.CropTransparent_getCroppedImage(self)

    def fillWithImage(self, arg2):
        return _SillyCrossbow.CropTransparent_fillWithImage(self, arg2)
CropTransparent_swigregister = _SillyCrossbow.CropTransparent_swigregister
CropTransparent_swigregister(CropTransparent)

# This file is compatible with both classic and new-style classes.


