#
# PySNMP MIB module NET-SNMP-EXTEND-MIB (http://pysnmp.sf.net)
# ASN.1 source file:///usr/share/snmp/mibs/NET-SNMP-EXTEND-MIB.txt
# Produced by pysmi-0.0.3 at Wed Jul  1 22:30:32 2015
# On host cray platform Linux version 2.6.37.6-smp by user ilya
# Using Python version 2.7.2 (default, Apr  2 2012, 20:32:47) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( nsExtensions, ) = mibBuilder.importSymbols("NET-SNMP-AGENT-MIB", "nsExtensions")
( NotificationGroup, ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, Bits, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter32")
( DisplayString, StorageType, RowStatus, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "StorageType", "RowStatus", "TextualConvention")
netSnmpExtendMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8072, 1, 3, 1)).setRevisions(("2010-03-17 00:00", "2004-05-08 00:00",))
if mibBuilder.loadTexts: netSnmpExtendMIB.setOrganization('www.net-snmp.org')
if mibBuilder.loadTexts: netSnmpExtendMIB.setContactInfo('postal:   Wes Hardaker\n                    P.O. Box 382\n                    Davis CA  95617\n\n          email:    net-snmp-coders@lists.sourceforge.net')
if mibBuilder.loadTexts: netSnmpExtendMIB.setDescription('Defines a framework for scripted extensions for the Net-SNMP agent.')
nsExtendObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2))
nsExtendGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 3, 3))
nsExtendNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendNumEntries.setDescription('The number of rows in the nsExtendConfigTable')
nsExtendConfigTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2), )
if mibBuilder.loadTexts: nsExtendConfigTable.setDescription('A table of scripted extensions - configuration and (basic) output.')
nsExtendConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1), ).setIndexNames((0, "NET-SNMP-EXTEND-MIB", "nsExtendToken"))
if mibBuilder.loadTexts: nsExtendConfigEntry.setDescription('A conceptual row within the extension table.')
nsExtendToken = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: nsExtendToken.setDescription('An arbitrary token to identify this extension entry')
nsExtendCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendCommand.setDescription('The full path of the command binary (or script) to run')
nsExtendArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 3), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendArgs.setDescription('Any command-line arguments for the command')
nsExtendInput = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 4), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendInput.setDescription('The standard input for the command')
nsExtendCacheTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 5), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendCacheTime.setDescription('The length of time for which the output of\n       this command will be cached.  During this time,\n       retrieving the output-related values will not\n       reinvoke the command.\n       A value of -1 indicates that the output results\n       should not be cached at all, and retrieving each\n       individual output-related value will invoke the\n       command afresh.')
nsExtendExecType = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("exec", 1), ("shell", 2),)).clone('exec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendExecType.setDescription('The mechanism used to invoke the command.')
nsExtendRunType = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("run-on-read", 1), ("run-on-set", 2), ("run-command", 3),)).clone('run-on-read')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendRunType.setDescription("Used to implement 'push-button' command invocation.\n       The command for a 'run-on-read' entry will be invoked\n       whenever one of the corresponding output-related\n       instances is requested (and assuming the cached value\n       is not still current).\n       The command for a 'run-on-set' entry will only be invoked\n       on receipt of a SET assignment for this object with the\n       value 'run-command'.\n       Reading an instance of this object will always return either\n       'run-on-read' or 'run-on-set'.\n      ")
nsExtendStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 20), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendStorage.setDescription('The storage type for this conceptual row.')
nsExtendStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendStatus.setDescription("Used to create new rows in the table, in the standard manner.\n       Note that is valid for an instance to be left with the value\n       notInService(2) indefinitely - i.e. the meaning of 'abnormally\n       long' (see RFC 2579, RowStatus) for this table is infinite.")
nsExtendOutput1Table = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3), )
if mibBuilder.loadTexts: nsExtendOutput1Table.setDescription('A table of scripted extensions - configuration and (basic) output.')
nsExtendOutput1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1), )
nsExtendConfigEntry.registerAugmentions(("NET-SNMP-EXTEND-MIB", "nsExtendOutput1Entry"))
nsExtendOutput1Entry.setIndexNames(*nsExtendConfigEntry.getIndexNames())
if mibBuilder.loadTexts: nsExtendOutput1Entry.setDescription('A conceptual row within the extension table.')
nsExtendOutput1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendOutput1Line.setDescription('The first line of output from the command')
nsExtendOutputFull = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendOutputFull.setDescription('The full output from the command, as a single string')
nsExtendOutNumLines = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendOutNumLines.setDescription('The number of lines of output (and hence\n       the number of rows in nsExtendOutputTable\n       relating to this particular entry).')
nsExtendResult = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendResult.setDescription('The return value of the command.')
nsExtendOutput2Table = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 4), )
if mibBuilder.loadTexts: nsExtendOutput2Table.setDescription('A table of (line-based) output from scripted extensions.')
nsExtendOutput2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 4, 1), ).setIndexNames((0, "NET-SNMP-EXTEND-MIB", "nsExtendToken"), (0, "NET-SNMP-EXTEND-MIB", "nsExtendLineIndex"))
if mibBuilder.loadTexts: nsExtendOutput2Entry.setDescription('A conceptual row within the line-based output table.')
nsExtendLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,1024)))
if mibBuilder.loadTexts: nsExtendLineIndex.setDescription('The index of this line of output.\n       For a given nsExtendToken, this will run from\n       1 to the corresponding value of nsExtendNumLines.')
nsExtendOutLine = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendOutLine.setDescription('A single line of output from the extension command.')
nsExtendConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 1, 3, 3, 1)).setObjects(*(("NET-SNMP-EXTEND-MIB", "nsExtendCommand"), ("NET-SNMP-EXTEND-MIB", "nsExtendArgs"), ("NET-SNMP-EXTEND-MIB", "nsExtendInput"), ("NET-SNMP-EXTEND-MIB", "nsExtendCacheTime"), ("NET-SNMP-EXTEND-MIB", "nsExtendExecType"), ("NET-SNMP-EXTEND-MIB", "nsExtendRunType"), ("NET-SNMP-EXTEND-MIB", "nsExtendStorage"), ("NET-SNMP-EXTEND-MIB", "nsExtendStatus"), ("NET-SNMP-EXTEND-MIB", "nsExtendNumEntries"),))
if mibBuilder.loadTexts: nsExtendConfigGroup.setDescription('Objects relating to the configuration of extension commands.')
nsExtendOutputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 1, 3, 3, 2)).setObjects(*(("NET-SNMP-EXTEND-MIB", "nsExtendOutNumLines"), ("NET-SNMP-EXTEND-MIB", "nsExtendResult"), ("NET-SNMP-EXTEND-MIB", "nsExtendOutLine"), ("NET-SNMP-EXTEND-MIB", "nsExtendOutput1Line"), ("NET-SNMP-EXTEND-MIB", "nsExtendOutputFull"),))
if mibBuilder.loadTexts: nsExtendOutputGroup.setDescription('Objects relating to the output of extension commands.')
mibBuilder.exportSymbols("NET-SNMP-EXTEND-MIB", nsExtendOutLine=nsExtendOutLine, nsExtendStatus=nsExtendStatus, nsExtendLineIndex=nsExtendLineIndex, nsExtendInput=nsExtendInput, nsExtendNumEntries=nsExtendNumEntries, nsExtendOutputGroup=nsExtendOutputGroup, nsExtendResult=nsExtendResult, netSnmpExtendMIB=netSnmpExtendMIB, nsExtendCommand=nsExtendCommand, nsExtendConfigGroup=nsExtendConfigGroup, nsExtendArgs=nsExtendArgs, nsExtendConfigTable=nsExtendConfigTable, nsExtendCacheTime=nsExtendCacheTime, nsExtendExecType=nsExtendExecType, nsExtendRunType=nsExtendRunType, nsExtendOutput2Entry=nsExtendOutput2Entry, nsExtendOutput1Entry=nsExtendOutput1Entry, nsExtendObjects=nsExtendObjects, nsExtendStorage=nsExtendStorage, nsExtendOutput1Line=nsExtendOutput1Line, nsExtendOutputFull=nsExtendOutputFull, nsExtendOutput2Table=nsExtendOutput2Table, nsExtendToken=nsExtendToken, nsExtendGroups=nsExtendGroups, nsExtendOutput1Table=nsExtendOutput1Table, nsExtendConfigEntry=nsExtendConfigEntry, PYSNMP_MODULE_ID=netSnmpExtendMIB, nsExtendOutNumLines=nsExtendOutNumLines)
