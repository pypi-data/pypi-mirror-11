#
# PySNMP MIB module IANA-IPPM-METRICS-REGISTRY-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/IANA-IPPM-METRICS-REGISTRY-MIB
# Produced by pysmi-0.0.3 at Wed Jul  1 22:28:49 2015
# On host cray platform Linux version 2.6.37.6-smp by user ilya
# Using Python version 2.7.2 (default, Apr  2 2012, 20:32:47) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, mib_2, IpAddress, TimeTicks, Counter64, Unsigned32, iso, Gauge32, ModuleIdentity, ObjectIdentity, Bits, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "mib-2", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "iso", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ianaIppmMetricsRegistry = ModuleIdentity((1, 3, 6, 1, 2, 1, 128)).setRevisions(("2010-09-07 00:00", "2009-09-02 00:00", "2009-04-20 00:00", "2006-12-04 00:00", "2005-04-12 00:00",))
if mibBuilder.loadTexts: ianaIppmMetricsRegistry.setOrganization('IANA')
if mibBuilder.loadTexts: ianaIppmMetricsRegistry.setContactInfo('Internet Assigned Numbers Authority\n\n            Postal: ICANN\n                4676 Admiralty Way, Suite 330\n                Marina del Rey, CA 90292\n\n            Tel:    +1 310 823 9358\n            E-Mail: iana&iana.org')
if mibBuilder.loadTexts: ianaIppmMetricsRegistry.setDescription("With the approval and publication of RFC6248, this module is\n      designated Obsolete.\n\n      The registry will no longer be updated, and the current contents will\n      be maintained as-is on the day that RFC6248 was published.\n\n      The original Description text follows below:\n\n      This module defines a registry for IP Performance Metrics.\n\n      Registrations are done sequentially by IANA in the ianaIppmMetrics\n      subtree on the bases of 'Specification Required' as defined in\n      [RFC2434].\n\n      The reference of the specification must point to a stable document\n      including a title, a revision and a date.\n\n      The name always starts with the name of the organization and must\n      respect the SMIv2 rules for descriptors defined in the section 3.1\n      of [RFC2578];\n\n      A document that creates new metrics would have an IANA\n      considerations section in which it would describe new metrics to\n      register.\n\n      An OBJECT IDENTITY assigned to a metric is definitive and cannot\n      be reused.  If a new version of a metric is produced then it is\n      assigned with a new name and a new identifier.\n\n      Copyright (C) The Internet Society (2005).  The initial version of\n      this MIB module was published in RFC 4148; for full legal notices\n      see the RFC itself or see:\n      http://www.ietf.org/copyrights/ianamib.html.  ")
ianaIppmMetrics = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1))
if mibBuilder.loadTexts: ianaIppmMetrics.setDescription('Registration point for IP Performance Metrics.')
ietfInstantUnidirConnectivity = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 1))
if mibBuilder.loadTexts: ietfInstantUnidirConnectivity.setDescription('Type-P-Instantaneous-Unidirectional-Connectivity')
ietfInstantBidirConnectivity = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 2))
if mibBuilder.loadTexts: ietfInstantBidirConnectivity.setDescription('Type-P-Instantaneous-Bidirectional-Connectivity')
ietfIntervalUnidirConnectivity = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 3))
if mibBuilder.loadTexts: ietfIntervalUnidirConnectivity.setDescription('Type-P-Interval-Unidirectional-Connectivity')
ietfIntervalBidirConnectivity = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 4))
if mibBuilder.loadTexts: ietfIntervalBidirConnectivity.setDescription('Type-P-Interval-Bidirectional-Connectivity')
ietfIntervalTemporalConnectivity = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 5))
if mibBuilder.loadTexts: ietfIntervalTemporalConnectivity.setDescription('Type-P1-P2-Interval-Temporal-Connectivity')
ietfOneWayDelay = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 6))
if mibBuilder.loadTexts: ietfOneWayDelay.setDescription('Type-P-One-way-Delay')
ietfOneWayDelayPoissonStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 7))
if mibBuilder.loadTexts: ietfOneWayDelayPoissonStream.setDescription('Type-P-One-way-Delay-Poisson-Stream')
ietfOneWayDelayPercentile = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 8))
if mibBuilder.loadTexts: ietfOneWayDelayPercentile.setDescription('Type-P-One-way-Delay-Percentile')
ietfOneWayDelayMedian = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 9))
if mibBuilder.loadTexts: ietfOneWayDelayMedian.setDescription('Type-P-One-way-Delay-Median')
ietfOneWayDelayMinimum = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 10))
if mibBuilder.loadTexts: ietfOneWayDelayMinimum.setDescription('Type-P-One-way-Delay-Minimum')
ietfOneWayDelayInversePercentile = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 11))
if mibBuilder.loadTexts: ietfOneWayDelayInversePercentile.setDescription('Type-P-One-way-Delay-Inverse-Percentile')
ietfOneWayPktLoss = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 12))
if mibBuilder.loadTexts: ietfOneWayPktLoss.setDescription('Type-P-One-way-Packet-Loss')
ietfOneWayPktLossPoissonStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 13))
if mibBuilder.loadTexts: ietfOneWayPktLossPoissonStream.setDescription('Type-P-One-way-Packet-Loss-Poisson-Stream')
ietfOneWayPktLossAverage = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 14))
if mibBuilder.loadTexts: ietfOneWayPktLossAverage.setDescription('Type-P-One-way-Packet-Loss-Average')
ietfRoundTripDelay = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 15))
if mibBuilder.loadTexts: ietfRoundTripDelay.setDescription('Type-P-Round-trip-Delay')
ietfRoundTripDelayPoissonStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 16))
if mibBuilder.loadTexts: ietfRoundTripDelayPoissonStream.setDescription('Type-P-Round-trip-Delay-Poisson-Stream')
ietfRoundTripDelayPercentile = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 17))
if mibBuilder.loadTexts: ietfRoundTripDelayPercentile.setDescription('Type-P-Round-trip-Delay-Percentile')
ietfRoundTripDelayMedian = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 18))
if mibBuilder.loadTexts: ietfRoundTripDelayMedian.setDescription('Type-P-Round-trip-Delay-Median')
ietfRoundTripDelayMinimum = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 19))
if mibBuilder.loadTexts: ietfRoundTripDelayMinimum.setDescription('Type-P-Round-trip-Delay-Minimum')
ietfRoundTripDelayInvPercentile = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 20))
if mibBuilder.loadTexts: ietfRoundTripDelayInvPercentile.setDescription('Type-P-Round-trip-Inverse-Percentile')
ietfOneWayLossDistanceStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 21))
if mibBuilder.loadTexts: ietfOneWayLossDistanceStream.setDescription('Type-P-One-Way-Loss-Distance-Stream')
ietfOneWayLossPeriodStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 22))
if mibBuilder.loadTexts: ietfOneWayLossPeriodStream.setDescription('Type-P-One-Way-Loss-Period-Stream')
ietfOneWayLossNoticeableRate = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 23))
if mibBuilder.loadTexts: ietfOneWayLossNoticeableRate.setDescription('Type-P-One-Way-Loss-Noticeable-Rate')
ietfOneWayLossPeriodTotal = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 24))
if mibBuilder.loadTexts: ietfOneWayLossPeriodTotal.setDescription('Type-P-One-Way-Loss-Period-Total')
ietfOneWayLossPeriodLengths = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 25))
if mibBuilder.loadTexts: ietfOneWayLossPeriodLengths.setDescription('Type-P-One-Way-Loss-Period-Lengths')
ietfOneWayInterLossPeriodLengths = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 26))
if mibBuilder.loadTexts: ietfOneWayInterLossPeriodLengths.setDescription('Type-P-One-Way-Inter-Loss-Period-Lengths')
ietfOneWayIpdv = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 27))
if mibBuilder.loadTexts: ietfOneWayIpdv.setDescription('Type-P-One-way-ipdv')
ietfOneWayIpdvPoissonStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 28))
if mibBuilder.loadTexts: ietfOneWayIpdvPoissonStream.setDescription('Type-P-One-way-ipdv-Poisson-stream')
ietfOneWayIpdvPercentile = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 29))
if mibBuilder.loadTexts: ietfOneWayIpdvPercentile.setDescription('Type-P-One-way-ipdv-percentile')
ietfOneWayIpdvInversePercentile = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 30))
if mibBuilder.loadTexts: ietfOneWayIpdvInversePercentile.setDescription('Type-P-One-way-ipdv-inverse-percentile')
ietfOneWayIpdvJitter = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 31))
if mibBuilder.loadTexts: ietfOneWayIpdvJitter.setDescription('Type-P-One-way-ipdv-jitter')
ietfOneWayPeakToPeakIpdv = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 32))
if mibBuilder.loadTexts: ietfOneWayPeakToPeakIpdv.setDescription('Type-P-One-way-peak-to-peak-ipdv')
ietfOneWayDelayPeriodicStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 33))
if mibBuilder.loadTexts: ietfOneWayDelayPeriodicStream.setDescription('Type-P-One-way-Delay-Periodic-Stream')
ietfReorderedSingleton = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 34))
if mibBuilder.loadTexts: ietfReorderedSingleton.setDescription('Type-P-Reordered')
ietfReorderedPacketRatio = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 35))
if mibBuilder.loadTexts: ietfReorderedPacketRatio.setDescription('Type-P-Reordered-Ratio-Stream')
ietfReorderingExtent = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 36))
if mibBuilder.loadTexts: ietfReorderingExtent.setDescription('Type-P-Packet-Reordering-Extent-Stream')
ietfReorderingLateTimeOffset = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 37))
if mibBuilder.loadTexts: ietfReorderingLateTimeOffset.setDescription('Type-P-Packet-Late-Time-Stream')
ietfReorderingByteOffset = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 38))
if mibBuilder.loadTexts: ietfReorderingByteOffset.setDescription('Type-P-Packet-Byte-Offset-Stream')
ietfReorderingGap = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 39))
if mibBuilder.loadTexts: ietfReorderingGap.setDescription('Type-P-Packet-Reordering-Gap-Stream')
ietfReorderingGapTime = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 40))
if mibBuilder.loadTexts: ietfReorderingGapTime.setDescription('Type-P-Packet-Reordering-GapTime-Stream')
ietfReorderingFreeRunx = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 41))
if mibBuilder.loadTexts: ietfReorderingFreeRunx.setDescription('Type-P-Packet-Reordering-Free-Run-x-numruns-Stream')
ietfReorderingFreeRunq = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 42))
if mibBuilder.loadTexts: ietfReorderingFreeRunq.setDescription('Type-P-Packet-Reordering-Free-Run-q-squruns-Stream')
ietfReorderingFreeRunp = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 43))
if mibBuilder.loadTexts: ietfReorderingFreeRunp.setDescription('Type-P-Packet-Reordering-Free-Run-p-numpkts-Stream')
ietfReorderingFreeRuna = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 44))
if mibBuilder.loadTexts: ietfReorderingFreeRuna.setDescription('Type-P-Packet-Reordering-Free-Run-a-accpkts-Stream')
ietfnReordering = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 45))
if mibBuilder.loadTexts: ietfnReordering.setDescription('Type-P-Packet-n-Reordering-Stream')
ietfOneWayPacketArrivalCount = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 46))
if mibBuilder.loadTexts: ietfOneWayPacketArrivalCount.setDescription('Type-P-one-way-packet-arrival-count')
ietfOneWayPacketDuplication = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 47))
if mibBuilder.loadTexts: ietfOneWayPacketDuplication.setDescription('Type-P-one-way-packet-duplication')
ietfOneWayPacketDuplicationPoissonStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 48))
if mibBuilder.loadTexts: ietfOneWayPacketDuplicationPoissonStream.setDescription('Type-P-one-way-Packet-Duplication-Poisson-Stream')
ietfOneWayPacketDuplicationPeriodicStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 49))
if mibBuilder.loadTexts: ietfOneWayPacketDuplicationPeriodicStream.setDescription('Type-P-one-way-Duplication-Periodic-Stream')
ietfOneWayPacketDuplicationFraction = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 50))
if mibBuilder.loadTexts: ietfOneWayPacketDuplicationFraction.setDescription('Type-P-one-way-packet-duplication-fraction')
ietfOneWayReplicatedPacketRate = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 51))
if mibBuilder.loadTexts: ietfOneWayReplicatedPacketRate.setDescription('Type-P-one-way-replicated-packet-rate')
ietfSpatialOneWayDelayVector = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 52))
if mibBuilder.loadTexts: ietfSpatialOneWayDelayVector.setDescription('Type-P-Spatial-One-way-Delay-Vector')
ietfSpatialPacketLossVector = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 53))
if mibBuilder.loadTexts: ietfSpatialPacketLossVector.setDescription('Type-P-Spatial-Packet-Loss-Vector')
ietfSpatialOneWayIpdvVector = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 54))
if mibBuilder.loadTexts: ietfSpatialOneWayIpdvVector.setDescription('Type-P-Spatial-One-way-ipdv-Vector')
ietfSegmentOneWayDelayStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 55))
if mibBuilder.loadTexts: ietfSegmentOneWayDelayStream.setDescription('Type-P-Segment-One-way-Delay-Stream')
ietfSegmentPacketLossStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 56))
if mibBuilder.loadTexts: ietfSegmentPacketLossStream.setDescription('Type-P-Segment-Packet-Loss-Stream')
ietfSegmentIpdvPrevStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 57))
if mibBuilder.loadTexts: ietfSegmentIpdvPrevStream.setDescription('Type-P-Segment-ipdv-prev-Stream')
ietfSegmentIpdvMinStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 58))
if mibBuilder.loadTexts: ietfSegmentIpdvMinStream.setDescription('Type-P-Segment-ipdv-min-Stream')
ietfOneToGroupDelayVector = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 59))
if mibBuilder.loadTexts: ietfOneToGroupDelayVector.setDescription('Type-P-One-to-group-Delay-Vector')
ietfOneToGroupPacketLossVector = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 60))
if mibBuilder.loadTexts: ietfOneToGroupPacketLossVector.setDescription('Type-P-One-to-group-Packet-Loss-Vector')
ietfOneToGroupIpdvVector = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 61))
if mibBuilder.loadTexts: ietfOneToGroupIpdvVector.setDescription('Type-P-One-to-group-ipdv-Vector')
ietfOnetoGroupReceiverNMeanDelay = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 62))
if mibBuilder.loadTexts: ietfOnetoGroupReceiverNMeanDelay.setDescription('Type-P-One-to-group-Receiver-n-Mean-Delay')
ietfOneToGroupMeanDelay = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 63))
if mibBuilder.loadTexts: ietfOneToGroupMeanDelay.setDescription('Type-P-One-to-group-Mean-Delay')
ietfOneToGroupRangeMeanDelay = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 64))
if mibBuilder.loadTexts: ietfOneToGroupRangeMeanDelay.setDescription('Type-P-One-to-group-Range-Mean-Delay')
ietfOneToGroupMaxMeanDelay = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 65))
if mibBuilder.loadTexts: ietfOneToGroupMaxMeanDelay.setDescription('Type-P-One-to-group-Max-Mean-Delay')
ietfOneToGroupReceiverNLossRatio = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 66))
if mibBuilder.loadTexts: ietfOneToGroupReceiverNLossRatio.setDescription('Type-P-One-to-group-Receiver-n-Loss-Ratio')
ietfOneToGroupReceiverNCompLossRatio = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 67))
if mibBuilder.loadTexts: ietfOneToGroupReceiverNCompLossRatio.setDescription('Type-P-One-to-group-Receiver-n-Comp-Loss-Ratio')
ietfOneToGroupLossRatio = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 68))
if mibBuilder.loadTexts: ietfOneToGroupLossRatio.setDescription('Type-P-One-to-group-Loss-Ratio')
ietfOneToGroupRangeLossRatio = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 69))
if mibBuilder.loadTexts: ietfOneToGroupRangeLossRatio.setDescription('Type-P-One-to-group-Range-Loss-Ratio')
ietfOneToGroupRangeDelayVariation = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 70))
if mibBuilder.loadTexts: ietfOneToGroupRangeDelayVariation.setDescription('Type-P-One-to-group-Range-Delay-Variation')
ietfFiniteOneWayDelayStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 71))
if mibBuilder.loadTexts: ietfFiniteOneWayDelayStream.setDescription('Type-P-Finite-One-way-Delay-Stream')
ietfFiniteOneWayDelayMean = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 72))
if mibBuilder.loadTexts: ietfFiniteOneWayDelayMean.setDescription('Type-P-Finite-One-way-Delay-Mean')
ietfCompositeOneWayDelayMean = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 73))
if mibBuilder.loadTexts: ietfCompositeOneWayDelayMean.setDescription('Type-P-Finite-Composite-One-way-Delay-Mean')
ietfFiniteOneWayDelayMinimum = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 74))
if mibBuilder.loadTexts: ietfFiniteOneWayDelayMinimum.setDescription('Type-P-Finite-One-way-Delay-Minimum')
ietfCompositeOneWayDelayMinimum = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 75))
if mibBuilder.loadTexts: ietfCompositeOneWayDelayMinimum.setDescription('Type-P-Finite-Composite-One-way-Delay-Minimum')
ietfOneWayPktLossEmpiricProb = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 76))
if mibBuilder.loadTexts: ietfOneWayPktLossEmpiricProb.setDescription('Type-P-One-way-Packet-Loss-Empirical-Probability')
ietfCompositeOneWayPktLossEmpiricProb = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 77))
if mibBuilder.loadTexts: ietfCompositeOneWayPktLossEmpiricProb.setDescription('Type-P-Composite-One-way-Packet-Loss-Empirical-Probability')
ietfOneWayPdvRefminStream = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 78))
if mibBuilder.loadTexts: ietfOneWayPdvRefminStream.setDescription('Type-P-One-way-pdv-refmin-Stream')
ietfOneWayPdvRefminMean = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 79))
if mibBuilder.loadTexts: ietfOneWayPdvRefminMean.setDescription('Type-P-One-way-pdv-refmin-Mean')
ietfOneWayPdvRefminVariance = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 80))
if mibBuilder.loadTexts: ietfOneWayPdvRefminVariance.setDescription('Type-P-One-way-pdv-refmin-Variance')
ietfOneWayPdvRefminSkewness = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 81))
if mibBuilder.loadTexts: ietfOneWayPdvRefminSkewness.setDescription('Type-P-One-way-pdv-refmin-Skewness')
ietfCompositeOneWayPdvRefminQtil = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 82))
if mibBuilder.loadTexts: ietfCompositeOneWayPdvRefminQtil.setDescription('Type-P-Composite-One-way-pdv-refmin-quantile-a')
ietfCompositeOneWayPdvRefminNPA = ObjectIdentity((1, 3, 6, 1, 2, 1, 128, 1, 83))
if mibBuilder.loadTexts: ietfCompositeOneWayPdvRefminNPA.setDescription('Type-P-One-way-Composite-pdv-refmin-NPA')
mibBuilder.exportSymbols("IANA-IPPM-METRICS-REGISTRY-MIB", ietfOneWayPacketDuplicationPeriodicStream=ietfOneWayPacketDuplicationPeriodicStream, ietfOnetoGroupReceiverNMeanDelay=ietfOnetoGroupReceiverNMeanDelay, ietfOneToGroupMeanDelay=ietfOneToGroupMeanDelay, ietfReorderingExtent=ietfReorderingExtent, ietfIntervalBidirConnectivity=ietfIntervalBidirConnectivity, ietfOneToGroupLossRatio=ietfOneToGroupLossRatio, ietfOneWayPktLossPoissonStream=ietfOneWayPktLossPoissonStream, ietfReorderedPacketRatio=ietfReorderedPacketRatio, ietfReorderingGap=ietfReorderingGap, ietfOneWayInterLossPeriodLengths=ietfOneWayInterLossPeriodLengths, ietfRoundTripDelayPoissonStream=ietfRoundTripDelayPoissonStream, ietfSegmentPacketLossStream=ietfSegmentPacketLossStream, ietfOneWayDelayPeriodicStream=ietfOneWayDelayPeriodicStream, ietfCompositeOneWayPdvRefminNPA=ietfCompositeOneWayPdvRefminNPA, ietfIntervalTemporalConnectivity=ietfIntervalTemporalConnectivity, ietfReorderingFreeRunp=ietfReorderingFreeRunp, ietfOneWayIpdvPoissonStream=ietfOneWayIpdvPoissonStream, ietfOneToGroupMaxMeanDelay=ietfOneToGroupMaxMeanDelay, ietfOneWayDelayMinimum=ietfOneWayDelayMinimum, ietfReorderedSingleton=ietfReorderedSingleton, ietfFiniteOneWayDelayMean=ietfFiniteOneWayDelayMean, ietfRoundTripDelayPercentile=ietfRoundTripDelayPercentile, ietfReorderingLateTimeOffset=ietfReorderingLateTimeOffset, ietfCompositeOneWayPktLossEmpiricProb=ietfCompositeOneWayPktLossEmpiricProb, ietfCompositeOneWayDelayMinimum=ietfCompositeOneWayDelayMinimum, ietfOneWayPktLossEmpiricProb=ietfOneWayPktLossEmpiricProb, ietfRoundTripDelay=ietfRoundTripDelay, ietfSpatialPacketLossVector=ietfSpatialPacketLossVector, ietfOneWayPdvRefminVariance=ietfOneWayPdvRefminVariance, ietfOneWayLossDistanceStream=ietfOneWayLossDistanceStream, ietfOneWayPeakToPeakIpdv=ietfOneWayPeakToPeakIpdv, ietfOneToGroupRangeDelayVariation=ietfOneToGroupRangeDelayVariation, ietfReorderingFreeRunx=ietfReorderingFreeRunx, ietfOneWayReplicatedPacketRate=ietfOneWayReplicatedPacketRate, ietfOneToGroupIpdvVector=ietfOneToGroupIpdvVector, ietfOneToGroupRangeLossRatio=ietfOneToGroupRangeLossRatio, ietfFiniteOneWayDelayStream=ietfFiniteOneWayDelayStream, ietfOneWayPacketDuplicationPoissonStream=ietfOneWayPacketDuplicationPoissonStream, ianaIppmMetricsRegistry=ianaIppmMetricsRegistry, ietfOneToGroupPacketLossVector=ietfOneToGroupPacketLossVector, ietfOneWayPdvRefminSkewness=ietfOneWayPdvRefminSkewness, ietfOneWayIpdvInversePercentile=ietfOneWayIpdvInversePercentile, ietfReorderingFreeRuna=ietfReorderingFreeRuna, ietfOneToGroupReceiverNLossRatio=ietfOneToGroupReceiverNLossRatio, ietfOneWayIpdvJitter=ietfOneWayIpdvJitter, ietfOneWayPacketArrivalCount=ietfOneWayPacketArrivalCount, ietfReorderingFreeRunq=ietfReorderingFreeRunq, ietfOneWayLossPeriodStream=ietfOneWayLossPeriodStream, ietfnReordering=ietfnReordering, ietfOneWayDelayPoissonStream=ietfOneWayDelayPoissonStream, ianaIppmMetrics=ianaIppmMetrics, ietfRoundTripDelayMedian=ietfRoundTripDelayMedian, ietfCompositeOneWayDelayMean=ietfCompositeOneWayDelayMean, ietfOneWayDelayMedian=ietfOneWayDelayMedian, ietfOneWayPacketDuplicationFraction=ietfOneWayPacketDuplicationFraction, ietfOneToGroupDelayVector=ietfOneToGroupDelayVector, ietfSegmentIpdvPrevStream=ietfSegmentIpdvPrevStream, ietfReorderingByteOffset=ietfReorderingByteOffset, ietfOneToGroupRangeMeanDelay=ietfOneToGroupRangeMeanDelay, ietfOneWayIpdvPercentile=ietfOneWayIpdvPercentile, ietfOneWayPdvRefminMean=ietfOneWayPdvRefminMean, ietfInstantUnidirConnectivity=ietfInstantUnidirConnectivity, ietfIntervalUnidirConnectivity=ietfIntervalUnidirConnectivity, ietfOneWayDelayPercentile=ietfOneWayDelayPercentile, ietfReorderingGapTime=ietfReorderingGapTime, ietfOneWayPktLoss=ietfOneWayPktLoss, ietfOneWayIpdv=ietfOneWayIpdv, ietfOneWayDelayInversePercentile=ietfOneWayDelayInversePercentile, ietfOneWayPktLossAverage=ietfOneWayPktLossAverage, ietfSegmentIpdvMinStream=ietfSegmentIpdvMinStream, ietfOneWayLossNoticeableRate=ietfOneWayLossNoticeableRate, ietfSpatialOneWayIpdvVector=ietfSpatialOneWayIpdvVector, ietfOneWayLossPeriodLengths=ietfOneWayLossPeriodLengths, ietfOneWayPacketDuplication=ietfOneWayPacketDuplication, ietfFiniteOneWayDelayMinimum=ietfFiniteOneWayDelayMinimum, ietfOneWayLossPeriodTotal=ietfOneWayLossPeriodTotal, ietfSegmentOneWayDelayStream=ietfSegmentOneWayDelayStream, ietfOneWayPdvRefminStream=ietfOneWayPdvRefminStream, ietfRoundTripDelayMinimum=ietfRoundTripDelayMinimum, ietfInstantBidirConnectivity=ietfInstantBidirConnectivity, ietfSpatialOneWayDelayVector=ietfSpatialOneWayDelayVector, PYSNMP_MODULE_ID=ianaIppmMetricsRegistry, ietfRoundTripDelayInvPercentile=ietfRoundTripDelayInvPercentile, ietfOneWayDelay=ietfOneWayDelay, ietfOneToGroupReceiverNCompLossRatio=ietfOneToGroupReceiverNCompLossRatio, ietfCompositeOneWayPdvRefminQtil=ietfCompositeOneWayPdvRefminQtil)
