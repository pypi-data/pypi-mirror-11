#
# PySNMP MIB module IF-INVERTED-STACK-MIB (http://pysnmp.sf.net)
# ASN.1 source file:///usr/share/snmp/mibs/IF-INVERTED-STACK-MIB.txt
# Produced by pysmi-0.0.3 at Wed Jul  1 22:28:57 2015
# On host cray platform Linux version 2.6.37.6-smp by user ilya
# Using Python version 2.7.2 (default, Apr  2 2012, 20:32:47) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( ifStackLowerLayer, ifStackHigherLayer, ifStackGroup2, ) = mibBuilder.importSymbols("IF-MIB", "ifStackLowerLayer", "ifStackHigherLayer", "ifStackGroup2")
( NotificationGroup, ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, mib_2, IpAddress, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, Bits, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "mib-2", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter32")
( DisplayString, RowStatus, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
ifInvertedStackMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 77)).setRevisions(("2000-06-14 00:00",))
if mibBuilder.loadTexts: ifInvertedStackMIB.setOrganization('IETF Interfaces MIB Working Group')
if mibBuilder.loadTexts: ifInvertedStackMIB.setContactInfo('   Keith McCloghrie\n              Cisco Systems, Inc.\n              170 West Tasman Drive\n              San Jose, CA  95134-1706\n              US\n\n              408-526-5260\n              kzm@cisco.com')
if mibBuilder.loadTexts: ifInvertedStackMIB.setDescription('The MIB module which provides the Inverted Stack Table for\n          interface sub-layers.')
ifInvMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 77, 1))
ifInvStackTable = MibTable((1, 3, 6, 1, 2, 1, 77, 1, 1), )
if mibBuilder.loadTexts: ifInvStackTable.setDescription("A table containing information on the relationships between\n\n          the multiple sub-layers of network interfaces.  In\n          particular, it contains information on which sub-layers run\n          'underneath' which other sub-layers, where each sub-layer\n          corresponds to a conceptual row in the ifTable.  For\n          example, when the sub-layer with ifIndex value x runs\n          underneath the sub-layer with ifIndex value y, then this\n          table contains:\n\n            ifInvStackStatus.x.y=active\n\n          For each ifIndex value, z, which identifies an active\n          interface, there are always at least two instantiated rows\n          in this table associated with z.  For one of these rows, z\n          is the value of ifStackHigherLayer; for the other, z is the\n          value of ifStackLowerLayer.  (If z is not involved in\n          multiplexing, then these are the only two rows associated\n          with z.)\n\n          For example, two rows exist even for an interface which has\n          no others stacked on top or below it:\n\n            ifInvStackStatus.z.0=active\n            ifInvStackStatus.0.z=active\n\n          This table contains exactly the same number of rows as the\n          ifStackTable, but the rows appear in a different order.")
ifInvStackEntry = MibTableRow((1, 3, 6, 1, 2, 1, 77, 1, 1, 1), ).setIndexNames((0, "IF-INVERTED-STACK-MIB", "ifStackLowerLayer"), (0, "IF-INVERTED-STACK-MIB", "ifStackHigherLayer"))
if mibBuilder.loadTexts: ifInvStackEntry.setDescription('Information on a particular relationship between two sub-\n          layers, specifying that one sub-layer runs underneath the\n          other sub-layer.  Each sub-layer corresponds to a conceptual\n          row in the ifTable.')
ifInvStackStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 77, 1, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInvStackStatus.setDescription('The status of the relationship between two sub-layers.\n\n          An instance of this object exists for each instance of the\n          ifStackStatus object, and vice versa.  For example, if the\n          variable ifStackStatus.H.L exists, then the variable\n          ifInvStackStatus.L.H must also exist, and vice versa.  In\n          addition, the two variables always have the same value.\n\n          However, unlike ifStackStatus, the ifInvStackStatus object\n          is NOT write-able.  A network management application wishing\n          to change a relationship between sub-layers H and L cannot\n          do so by modifying the value of ifInvStackStatus.L.H, but\n          must instead modify the value of ifStackStatus.H.L.  After\n          the ifStackTable is modified, the change will be reflected\n          in this table.')
ifInvConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 77, 1, 2))
ifInvGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 77, 1, 2, 1))
ifInvCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 77, 1, 2, 2))
ifInvCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 77, 1, 2, 2, 1)).setObjects(*(("IF-INVERTED-STACK-MIB", "ifInvStackGroup"), ("IF-MIB", "ifStackGroup2"),))
if mibBuilder.loadTexts: ifInvCompliance.setDescription('The compliance statement for SNMP entities which provide\n          inverted information on the layering of network interfaces.')
ifInvStackGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 77, 1, 2, 1, 1)).setObjects(*(("IF-INVERTED-STACK-MIB", "ifInvStackStatus"),))
if mibBuilder.loadTexts: ifInvStackGroup.setDescription('A collection of objects providing inverted information on\n          the layering of MIB-II interfaces.')
mibBuilder.exportSymbols("IF-INVERTED-STACK-MIB", PYSNMP_MODULE_ID=ifInvertedStackMIB, ifInvCompliance=ifInvCompliance, ifInvMIBObjects=ifInvMIBObjects, ifInvStackGroup=ifInvStackGroup, ifInvCompliances=ifInvCompliances, ifInvConformance=ifInvConformance, ifInvStackEntry=ifInvStackEntry, ifInvStackTable=ifInvStackTable, ifInvStackStatus=ifInvStackStatus, ifInvGroups=ifInvGroups, ifInvertedStackMIB=ifInvertedStackMIB)
