Metadata-Version: 1.1
Name: pyax12
Version: 0.3.dev0
Summary: A library to control dynamixel AX-12+ servos with python
Home-page: http://www.jdhp.org/
Author: Jeremie DECOCK
Author-email: jd.jdhp@gmail.com
License: UNKNOWN
Download-URL: http://www.jdhp.org/
Description: .. image:: https://readthedocs.org/projects/pyax-12/badge/?version=latest
            :target: https://readthedocs.org/projects/pyax-12/?badge=latest
            :alt: Documentation Status
        
        =========================================================
        `PyAX-12 <http://www.jdhp.org/projects_en.html#pyax12>`__
        =========================================================
        
        Copyright (c) 2010,2015 Jeremie DECOCK (http://www.jdhp.org)
        
        Description
        -----------
        
        PyAX-12 is an open source lightweight Python library to control
        `Dynamixel AX-12+ <http://www.robotis.com/xe/dynamixel_en>`__ actuators.
        
        |Watch a demo on youtube|_
        
        Dependencies
        ------------
        
        -  Python >= 3.0
        -  `Python-serial <http://pyserial.sourceforge.net>`__
        
        Install
        -------
        
        PyAX-12 can be installed with Python Distutils by entering the following
        command in a terminal::
        
            python3 setup.py install
        
        
        Documentation
        -------------
        
        PyAX-12 documentation is available on the following page:
        
            http://pyax-12.rtfd.org/
        
        
        Example usage
        -------------
        
        Many examples are available in the examples_ directory.
        
        The `port` and `baudrate` values should be adapted depending on your
        configuration.
        
        For Linux users the `port` value should be something like "/dev/ttyS0" or
        "/dev/ttyUSB0".
        
        For Windows users the `port` value should be something like "COM1", "COM2", ...
        
        Ping a Dynamixel
        ~~~~~~~~~~~~~~~~
        
        ::
        
            from pyax12.connection import Connection
        
            # Connect to the serial port
            serial_connection = Connection(port="/dev/ttyUSB0", baudrate=57600)
        
            # Ping the third dynamixel unit
            is_available = serial_connection.ping(3)
        
            print(is_available)
        
            # Close the serial connection
            serial_connection.close()
        
        
        Scan (search available Dynamixel units)
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        ::
        
            from pyax12.connection import Connection
        
            # Connect to the serial port
            serial_connection = Connection(port="/dev/ttyUSB0", baudrate=57600)
        
            # Ping the dynamixel unit(s)
            ids_available = serial_connection.scan()
        
            for dynamixel_id in ids_available:
                print(dynamixel_id)
        
            # Close the serial connection
            serial_connection.close()
        
        
        Print the control table of the third Dynamixel unit
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        ::
        
            from pyax12.connection import Connection
        
            # Connect to the serial port
            serial_connection = Connection(port="/dev/ttyUSB0", baudrate=57600)
        
            # Print the control table of the specified Dynamixel unit
            serial_connection.pretty_print_control_table(3)
        
            # Close the serial connection
            serial_connection.close()
        
        
        Move the first Dynamixel unit to 0° then go to 300° and finally go back to 150°
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        ::
        
            from pyax12.connection import Connection
        
            # Connect to the serial port
            serial_connection = Connection(port="/dev/ttyUSB0", baudrate=57600)
        
            # Goto to 0°
            serial_connection.goto(1, 0, degrees=True)
        
            # Wait 2 seconds
            time.sleep(2)
        
            # Go back to 300°
            serial_connection.goto(1, 300, degrees=True)
        
            # Wait 2 seconds
            time.sleep(2)
        
            # Go back to 150°
            serial_connection.goto(1, 150, degrees=True)
        
            # Close the serial connection
            serial_connection.close()
        
        
        Warning
        -------
        
        If you use the USB2Dynamixel device, make sure its switch is set on
        "TTL" (otherwise status packets won't be readable).
        
        Also, please check whether the serial port, the baudrate and the
        Dynamixel IDs defined in PyAX-12 fits with your hardware.
        
        
        Bug reports
        -----------
        
        To search for bugs or report them, please use the PyAX-12 Bug Tracker at:
        
            https://github.com/jeremiedecock/pyax12/issues
        
        
        .. _related-libraries:
        
        Related libraries
        -----------------
        
        Other libraries to control
        `Dynamixel AX-12+ <http://www.robotis.com/xe/dynamixel_en>`__
        actuators are referenced in the following (non comprehensive) list:
        
        - PyPot_ by Inria (FLOWERS team)
        - PyDynamixel_ by Richard Clark
        - Pydyn_ by Fabien Benureau and Olivier Mangin (Inria FLOWER team)
        - Dynamixel_ by Ian Danforth
        - dynamixel_hr_ by Romain Reignier
        - python_dynamixels_ by Jesse Merritt
        - ax12_ by Thiago Hersan
        
        
        License
        -------
        
        The ``PyAX-12`` library is provided under the terms and conditions of the
        `MIT License <http://opensource.org/licenses/MIT>`__.
        
        
        .. _Dynamixel AX-12+ actuators: http://www.robotis.com/xe/dynamixel_en
        .. _examples: https://github.com/jeremiedecock/pyax12/tree/master/examples
        
        .. _PyPot: https://github.com/poppy-project/pypot
        .. _Pydyn: https://github.com/humm/pydyn
        .. _PyDynamixel: https://github.com/richard-clark/PyDynamixel
        .. _Python-serial: http://pyserial.sourceforge.net
        .. _Dynamixel : https://pypi.python.org/pypi/dynamixel/1.0.1
        .. _dynamixel_hr : https://github.com/HumaRobotics/dynamixel_hr
        .. _python_dynamixels : https://github.com/jes1510/python_dynamixels
        .. _ax12 : https://github.com/thiagohersan/memememe/tree/master/Python/ax12
        
        .. |Watch a demo on youtube| image:: http://download.tuxfamily.org/jdhp/image/pyax12_demo_youtube.jpeg
        .. _Watch a demo on youtube: https://youtu.be/sXrEGmjz-S4
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
