# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: zsearch_definitions/search.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from zsearch_definitions import anonstore_pb2 as zsearch__definitions_dot_anonstore__pb2
from zsearch_definitions import hoststore_pb2 as zsearch__definitions_dot_hoststore__pb2
from zsearch_definitions import rpc_pb2 as zsearch__definitions_dot_rpc__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='zsearch_definitions/search.proto',
  package='zsearch',
  syntax='proto3',
  serialized_pb=_b('\n zsearch_definitions/search.proto\x12\x07zsearch\x1a#zsearch_definitions/anonstore.proto\x1a#zsearch_definitions/hoststore.proto\x1a\x1dzsearch_definitions/rpc.proto2\x9f\x05\n\x0c\x41\x64minService\x12\x35\n\x08Shutdown\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x33\n\x06Status\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x37\n\nStatistics\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x36\n\tPruneIPv4\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x38\n\x0bPruneDomain\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x39\n\x0cUpdateASData\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12?\n\x12UpdateLocationData\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12;\n\x0e\x44umpIPv4ToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12=\n\x10\x44umpDomainToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x43\n\x16\x44umpCertificatesToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12;\n\x0e\x44umpKeysToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x32\xc8\t\n\x0cQueryService\x12\x45\n\x11GetHostIPv4Record\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12\x36\n\x11PutHostIPv4Record\x12\x0f.zsearch.Record\x1a\x0e.zsearch.Delta\"\x00\x12\x39\n\x11\x44\x65lHostIPv4Record\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12\x45\n\x11GetAllIPv4Records\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12G\n\x13GetHostDomainRecord\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12\x38\n\x13PutHostDomainRecord\x12\x0f.zsearch.Record\x1a\x0e.zsearch.Delta\"\x00\x12;\n\x13\x44\x65lHostDomainRecord\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12G\n\x13GetAllDomainRecords\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12L\n\x0eGetCertificate\x12\x17.zsearch.AnonymousQuery\x1a\x1f.zsearch.AnonymousQueryResponse\"\x00\x12H\n\x11UpsertCertificate\x12\x18.zsearch.AnonymousRecord\x1a\x17.zsearch.AnonymousDelta\"\x00\x12Q\n\x13GetCryptographicKey\x12\x17.zsearch.AnonymousQuery\x1a\x1f.zsearch.AnonymousQueryResponse\"\x00\x12M\n\x16UpsertCryptographicKey\x12\x18.zsearch.AnonymousRecord\x1a\x17.zsearch.AnonymousDelta\"\x00\x12@\n\x11GetPublicLocation\x12\x12.zsearch.HostQuery\x1a\x15.zsearch.LocationAtom\"\x00\x12\x44\n\x15GetRestrictedLocation\x12\x12.zsearch.HostQuery\x1a\x15.zsearch.LocationAtom\"\x00\x12\x31\n\x08GetWHOIS\x12\x12.zsearch.HostQuery\x1a\x0f.zsearch.Record\"\x00\x12\x38\n\x0fGetUserMetadata\x12\x12.zsearch.HostQuery\x1a\x0f.zsearch.Record\"\x00\x12;\n\x0fPutUserMetadata\x12\x0f.zsearch.Record\x1a\x15.zsearch.CommandReply\"\x00\x12\x42\n\x0cGetRootStore\x12\x17.zsearch.RootStoreQuery\x1a\x17.zsearch.RootStoreReply\"\x00\x62\x06proto3')
  ,
  dependencies=[zsearch__definitions_dot_anonstore__pb2.DESCRIPTOR,zsearch__definitions_dot_hoststore__pb2.DESCRIPTOR,zsearch__definitions_dot_rpc__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





import abc
from grpc.early_adopter import implementations
from grpc.framework.alpha import utilities
class EarlyAdopterAdminServiceServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Shutdown(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Status(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Statistics(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PruneIPv4(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PruneDomain(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpdateASData(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpdateLocationData(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpIPv4ToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpDomainToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpCertificatesToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpKeysToJSON(self, request, context):
    raise NotImplementedError()
class EarlyAdopterAdminServiceServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterAdminServiceStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Shutdown(self, request):
    raise NotImplementedError()
  Shutdown.async = None
  @abc.abstractmethod
  def Status(self, request):
    raise NotImplementedError()
  Status.async = None
  @abc.abstractmethod
  def Statistics(self, request):
    raise NotImplementedError()
  Statistics.async = None
  @abc.abstractmethod
  def PruneIPv4(self, request):
    raise NotImplementedError()
  PruneIPv4.async = None
  @abc.abstractmethod
  def PruneDomain(self, request):
    raise NotImplementedError()
  PruneDomain.async = None
  @abc.abstractmethod
  def UpdateASData(self, request):
    raise NotImplementedError()
  UpdateASData.async = None
  @abc.abstractmethod
  def UpdateLocationData(self, request):
    raise NotImplementedError()
  UpdateLocationData.async = None
  @abc.abstractmethod
  def DumpIPv4ToJSON(self, request):
    raise NotImplementedError()
  DumpIPv4ToJSON.async = None
  @abc.abstractmethod
  def DumpDomainToJSON(self, request):
    raise NotImplementedError()
  DumpDomainToJSON.async = None
  @abc.abstractmethod
  def DumpCertificatesToJSON(self, request):
    raise NotImplementedError()
  DumpCertificatesToJSON.async = None
  @abc.abstractmethod
  def DumpKeysToJSON(self, request):
    raise NotImplementedError()
  DumpKeysToJSON.async = None
def early_adopter_create_AdminService_server(servicer, port, private_key=None, certificate_chain=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  method_service_descriptions = {
    "DumpCertificatesToJSON": utilities.unary_unary_service_description(
      servicer.DumpCertificatesToJSON,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "DumpDomainToJSON": utilities.unary_unary_service_description(
      servicer.DumpDomainToJSON,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "DumpIPv4ToJSON": utilities.unary_unary_service_description(
      servicer.DumpIPv4ToJSON,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "DumpKeysToJSON": utilities.unary_unary_service_description(
      servicer.DumpKeysToJSON,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "PruneDomain": utilities.unary_unary_service_description(
      servicer.PruneDomain,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "PruneIPv4": utilities.unary_unary_service_description(
      servicer.PruneIPv4,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "Shutdown": utilities.unary_unary_service_description(
      servicer.Shutdown,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "Statistics": utilities.unary_unary_service_description(
      servicer.Statistics,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "Status": utilities.unary_unary_service_description(
      servicer.Status,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "UpdateASData": utilities.unary_unary_service_description(
      servicer.UpdateASData,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "UpdateLocationData": utilities.unary_unary_service_description(
      servicer.UpdateLocationData,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
  }
  return implementations.server("zsearch.AdminService", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_AdminService_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  method_invocation_descriptions = {
    "DumpCertificatesToJSON": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "DumpDomainToJSON": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "DumpIPv4ToJSON": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "DumpKeysToJSON": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "PruneDomain": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "PruneIPv4": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "Shutdown": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "Statistics": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "Status": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "UpdateASData": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "UpdateLocationData": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
  }
  return implementations.stub("zsearch.AdminService", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)
class EarlyAdopterQueryServiceServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DelHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetAllIPv4Records(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DelHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetAllDomainRecords(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetCertificate(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpsertCertificate(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetCryptographicKey(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpsertCryptographicKey(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetPublicLocation(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetRestrictedLocation(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetWHOIS(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetUserMetadata(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutUserMetadata(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetRootStore(self, request, context):
    raise NotImplementedError()
class EarlyAdopterQueryServiceServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterQueryServiceStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetHostIPv4Record(self, request):
    raise NotImplementedError()
  GetHostIPv4Record.async = None
  @abc.abstractmethod
  def PutHostIPv4Record(self, request):
    raise NotImplementedError()
  PutHostIPv4Record.async = None
  @abc.abstractmethod
  def DelHostIPv4Record(self, request):
    raise NotImplementedError()
  DelHostIPv4Record.async = None
  @abc.abstractmethod
  def GetAllIPv4Records(self, request):
    raise NotImplementedError()
  GetAllIPv4Records.async = None
  @abc.abstractmethod
  def GetHostDomainRecord(self, request):
    raise NotImplementedError()
  GetHostDomainRecord.async = None
  @abc.abstractmethod
  def PutHostDomainRecord(self, request):
    raise NotImplementedError()
  PutHostDomainRecord.async = None
  @abc.abstractmethod
  def DelHostDomainRecord(self, request):
    raise NotImplementedError()
  DelHostDomainRecord.async = None
  @abc.abstractmethod
  def GetAllDomainRecords(self, request):
    raise NotImplementedError()
  GetAllDomainRecords.async = None
  @abc.abstractmethod
  def GetCertificate(self, request):
    raise NotImplementedError()
  GetCertificate.async = None
  @abc.abstractmethod
  def UpsertCertificate(self, request):
    raise NotImplementedError()
  UpsertCertificate.async = None
  @abc.abstractmethod
  def GetCryptographicKey(self, request):
    raise NotImplementedError()
  GetCryptographicKey.async = None
  @abc.abstractmethod
  def UpsertCryptographicKey(self, request):
    raise NotImplementedError()
  UpsertCryptographicKey.async = None
  @abc.abstractmethod
  def GetPublicLocation(self, request):
    raise NotImplementedError()
  GetPublicLocation.async = None
  @abc.abstractmethod
  def GetRestrictedLocation(self, request):
    raise NotImplementedError()
  GetRestrictedLocation.async = None
  @abc.abstractmethod
  def GetWHOIS(self, request):
    raise NotImplementedError()
  GetWHOIS.async = None
  @abc.abstractmethod
  def GetUserMetadata(self, request):
    raise NotImplementedError()
  GetUserMetadata.async = None
  @abc.abstractmethod
  def PutUserMetadata(self, request):
    raise NotImplementedError()
  PutUserMetadata.async = None
  @abc.abstractmethod
  def GetRootStore(self, request):
    raise NotImplementedError()
  GetRootStore.async = None
def early_adopter_create_QueryService_server(servicer, port, private_key=None, certificate_chain=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  method_service_descriptions = {
    "DelHostDomainRecord": utilities.unary_unary_service_description(
      servicer.DelHostDomainRecord,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "DelHostIPv4Record": utilities.unary_unary_service_description(
      servicer.DelHostIPv4Record,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "GetAllDomainRecords": utilities.unary_unary_service_description(
      servicer.GetAllDomainRecords,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ),
    "GetAllIPv4Records": utilities.unary_unary_service_description(
      servicer.GetAllIPv4Records,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ),
    "GetCertificate": utilities.unary_unary_service_description(
      servicer.GetCertificate,
      zsearch_definitions.rpc_pb2.AnonymousQuery.FromString,
      zsearch_definitions.rpc_pb2.AnonymousQueryResponse.SerializeToString,
    ),
    "GetCryptographicKey": utilities.unary_unary_service_description(
      servicer.GetCryptographicKey,
      zsearch_definitions.rpc_pb2.AnonymousQuery.FromString,
      zsearch_definitions.rpc_pb2.AnonymousQueryResponse.SerializeToString,
    ),
    "GetHostDomainRecord": utilities.unary_unary_service_description(
      servicer.GetHostDomainRecord,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ),
    "GetHostIPv4Record": utilities.unary_unary_service_description(
      servicer.GetHostIPv4Record,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ),
    "GetPublicLocation": utilities.unary_unary_service_description(
      servicer.GetPublicLocation,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.LocationAtom.SerializeToString,
    ),
    "GetRestrictedLocation": utilities.unary_unary_service_description(
      servicer.GetRestrictedLocation,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.LocationAtom.SerializeToString,
    ),
    "GetRootStore": utilities.unary_unary_service_description(
      servicer.GetRootStore,
      zsearch_definitions.rpc_pb2.RootStoreQuery.FromString,
      zsearch_definitions.rpc_pb2.RootStoreReply.SerializeToString,
    ),
    "GetUserMetadata": utilities.unary_unary_service_description(
      servicer.GetUserMetadata,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ),
    "GetWHOIS": utilities.unary_unary_service_description(
      servicer.GetWHOIS,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ),
    "PutHostDomainRecord": utilities.unary_unary_service_description(
      servicer.PutHostDomainRecord,
      zsearch_definitions.hoststore_pb2.Record.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "PutHostIPv4Record": utilities.unary_unary_service_description(
      servicer.PutHostIPv4Record,
      zsearch_definitions.hoststore_pb2.Record.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "PutUserMetadata": utilities.unary_unary_service_description(
      servicer.PutUserMetadata,
      zsearch_definitions.hoststore_pb2.Record.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "UpsertCertificate": utilities.unary_unary_service_description(
      servicer.UpsertCertificate,
      zsearch_definitions.anonstore_pb2.AnonymousRecord.FromString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.SerializeToString,
    ),
    "UpsertCryptographicKey": utilities.unary_unary_service_description(
      servicer.UpsertCryptographicKey,
      zsearch_definitions.anonstore_pb2.AnonymousRecord.FromString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.SerializeToString,
    ),
  }
  return implementations.server("zsearch.QueryService", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_QueryService_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  method_invocation_descriptions = {
    "DelHostDomainRecord": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "DelHostIPv4Record": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "GetAllDomainRecords": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ),
    "GetAllIPv4Records": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ),
    "GetCertificate": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.AnonymousQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.AnonymousQueryResponse.FromString,
    ),
    "GetCryptographicKey": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.AnonymousQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.AnonymousQueryResponse.FromString,
    ),
    "GetHostDomainRecord": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ),
    "GetHostIPv4Record": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ),
    "GetPublicLocation": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.LocationAtom.FromString,
    ),
    "GetRestrictedLocation": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.LocationAtom.FromString,
    ),
    "GetRootStore": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.RootStoreQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.RootStoreReply.FromString,
    ),
    "GetUserMetadata": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Record.FromString,
    ),
    "GetWHOIS": utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Record.FromString,
    ),
    "PutHostDomainRecord": utilities.unary_unary_invocation_description(
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "PutHostIPv4Record": utilities.unary_unary_invocation_description(
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "PutUserMetadata": utilities.unary_unary_invocation_description(
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "UpsertCertificate": utilities.unary_unary_invocation_description(
      zsearch_definitions.anonstore_pb2.AnonymousRecord.SerializeToString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.FromString,
    ),
    "UpsertCryptographicKey": utilities.unary_unary_invocation_description(
      zsearch_definitions.anonstore_pb2.AnonymousRecord.SerializeToString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.FromString,
    ),
  }
  return implementations.stub("zsearch.QueryService", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)
# @@protoc_insertion_point(module_scope)
