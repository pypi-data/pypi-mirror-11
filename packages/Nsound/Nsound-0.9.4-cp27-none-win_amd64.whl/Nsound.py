# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Nsound', [dirname(__file__)])
        except ImportError:
            import _Nsound
            return _Nsound
        if fp is not None:
            try:
                _mod = imp.load_module('_Nsound', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Nsound = swig_import_helper()
    del swig_import_helper
else:
    import _Nsound
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _Nsound.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _Nsound.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _Nsound.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _Nsound.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _Nsound.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _Nsound.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _Nsound.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _Nsound.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _Nsound.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _Nsound.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _Nsound.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _Nsound.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

PACKAGE_NAME = _Nsound.PACKAGE_NAME
NSOUND_AUTHORS = _Nsound.NSOUND_AUTHORS
NSOUND_COPYRIGHT = _Nsound.NSOUND_COPYRIGHT
NSOUND_VERSION_A = _Nsound.NSOUND_VERSION_A
NSOUND_VERSION_B = _Nsound.NSOUND_VERSION_B
NSOUND_VERSION_C = _Nsound.NSOUND_VERSION_C
PACKAGE_VERSION = _Nsound.PACKAGE_VERSION
PACKAGE_RELEASE = _Nsound.PACKAGE_RELEASE
NSOUND_IN_PYTHON_MODULE = _Nsound.NSOUND_IN_PYTHON_MODULE
NSOUND_64_BIT = _Nsound.NSOUND_64_BIT
M_PI = _Nsound.M_PI
NSOUND_LIBPORTAUDIO = _Nsound.NSOUND_LIBPORTAUDIO
NSOUND_C_PYLAB = _Nsound.NSOUND_C_PYLAB
NSOUND_CPP11 = _Nsound.NSOUND_CPP11
class Exception(_object):
    """Proxy of C++ Nsound::Exception class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::Exception self, std::string const & message) -> Exception"""
        this = _Nsound.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Exception
    __del__ = lambda self : None;
    def what(self):
        """what(Exception self) -> char const *"""
        return _Nsound.Exception_what(self)

Exception_swigregister = _Nsound.Exception_swigregister
Exception_swigregister(Exception)

LINE_PREFIX = _Nsound.LINE_PREFIX
ERROR_HEADER = _Nsound.ERROR_HEADER
WARNING_HEADER = _Nsound.WARNING_HEADER
class FloatVector(_object):
    """Proxy of C++ std::vector<(Nsound::float64)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(FloatVector self) -> SwigPyIterator"""
        return _Nsound.FloatVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(FloatVector self) -> bool"""
        return _Nsound.FloatVector___nonzero__(self)

    def __bool__(self):
        """__bool__(FloatVector self) -> bool"""
        return _Nsound.FloatVector___bool__(self)

    def __len__(self):
        """__len__(FloatVector self) -> std::vector< double >::size_type"""
        return _Nsound.FloatVector___len__(self)

    def pop(self):
        """pop(FloatVector self) -> std::vector< double >::value_type"""
        return _Nsound.FloatVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> FloatVector"""
        return _Nsound.FloatVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            FloatVector v=std::vector< double,std::allocator< double > >())
        __setslice__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _Nsound.FloatVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _Nsound.FloatVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(FloatVector self, std::vector< double >::difference_type i)
        __delitem__(FloatVector self, PySliceObject * slice)
        """
        return _Nsound.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(FloatVector self, PySliceObject * slice) -> FloatVector
        __getitem__(FloatVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _Nsound.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(FloatVector self, PySliceObject * slice, FloatVector v)
        __setitem__(FloatVector self, PySliceObject * slice)
        __setitem__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _Nsound.FloatVector___setitem__(self, *args)

    def append(self, *args):
        """append(FloatVector self, std::vector< double >::value_type const & x)"""
        return _Nsound.FloatVector_append(self, *args)

    def empty(self):
        """empty(FloatVector self) -> bool"""
        return _Nsound.FloatVector_empty(self)

    def size(self):
        """size(FloatVector self) -> std::vector< double >::size_type"""
        return _Nsound.FloatVector_size(self)

    def clear(self):
        """clear(FloatVector self)"""
        return _Nsound.FloatVector_clear(self)

    def swap(self, *args):
        """swap(FloatVector self, FloatVector v)"""
        return _Nsound.FloatVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(FloatVector self) -> std::vector< double >::allocator_type"""
        return _Nsound.FloatVector_get_allocator(self)

    def begin(self):
        """begin(FloatVector self) -> std::vector< double >::iterator"""
        return _Nsound.FloatVector_begin(self)

    def end(self):
        """end(FloatVector self) -> std::vector< double >::iterator"""
        return _Nsound.FloatVector_end(self)

    def rbegin(self):
        """rbegin(FloatVector self) -> std::vector< double >::reverse_iterator"""
        return _Nsound.FloatVector_rbegin(self)

    def rend(self):
        """rend(FloatVector self) -> std::vector< double >::reverse_iterator"""
        return _Nsound.FloatVector_rend(self)

    def pop_back(self):
        """pop_back(FloatVector self)"""
        return _Nsound.FloatVector_pop_back(self)

    def erase(self, *args):
        """
        erase(FloatVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(FloatVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _Nsound.FloatVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Nsound::float64)> self) -> FloatVector
        __init__(std::vector<(Nsound::float64)> self, FloatVector arg2) -> FloatVector
        __init__(std::vector<(Nsound::float64)> self, std::vector< double >::size_type size) -> FloatVector
        __init__(std::vector<(Nsound::float64)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> FloatVector
        """
        this = _Nsound.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(FloatVector self, std::vector< double >::value_type const & x)"""
        return _Nsound.FloatVector_push_back(self, *args)

    def front(self):
        """front(FloatVector self) -> std::vector< double >::value_type const &"""
        return _Nsound.FloatVector_front(self)

    def back(self):
        """back(FloatVector self) -> std::vector< double >::value_type const &"""
        return _Nsound.FloatVector_back(self)

    def assign(self, *args):
        """assign(FloatVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _Nsound.FloatVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(FloatVector self, std::vector< double >::size_type new_size)
        resize(FloatVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _Nsound.FloatVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(FloatVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(FloatVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _Nsound.FloatVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(FloatVector self, std::vector< double >::size_type n)"""
        return _Nsound.FloatVector_reserve(self, *args)

    def capacity(self):
        """capacity(FloatVector self) -> std::vector< double >::size_type"""
        return _Nsound.FloatVector_capacity(self)

    __swig_destroy__ = _Nsound.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _Nsound.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class BooleanVector(_object):
    """Proxy of C++ std::vector<(Nsound::boolean)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BooleanVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BooleanVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(BooleanVector self) -> SwigPyIterator"""
        return _Nsound.BooleanVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(BooleanVector self) -> bool"""
        return _Nsound.BooleanVector___nonzero__(self)

    def __bool__(self):
        """__bool__(BooleanVector self) -> bool"""
        return _Nsound.BooleanVector___bool__(self)

    def __len__(self):
        """__len__(BooleanVector self) -> std::vector< bool >::size_type"""
        return _Nsound.BooleanVector___len__(self)

    def pop(self):
        """pop(BooleanVector self) -> std::vector< bool >::value_type"""
        return _Nsound.BooleanVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> BooleanVector"""
        return _Nsound.BooleanVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, BooleanVector v=std::vector< bool,std::allocator< bool > >())
        __setslice__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)
        """
        return _Nsound.BooleanVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)"""
        return _Nsound.BooleanVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(BooleanVector self, std::vector< bool >::difference_type i)
        __delitem__(BooleanVector self, PySliceObject * slice)
        """
        return _Nsound.BooleanVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(BooleanVector self, PySliceObject * slice) -> BooleanVector
        __getitem__(BooleanVector self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type
        """
        return _Nsound.BooleanVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(BooleanVector self, PySliceObject * slice, BooleanVector v)
        __setitem__(BooleanVector self, PySliceObject * slice)
        __setitem__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)
        """
        return _Nsound.BooleanVector___setitem__(self, *args)

    def append(self, *args):
        """append(BooleanVector self, std::vector< bool >::value_type x)"""
        return _Nsound.BooleanVector_append(self, *args)

    def empty(self):
        """empty(BooleanVector self) -> bool"""
        return _Nsound.BooleanVector_empty(self)

    def size(self):
        """size(BooleanVector self) -> std::vector< bool >::size_type"""
        return _Nsound.BooleanVector_size(self)

    def clear(self):
        """clear(BooleanVector self)"""
        return _Nsound.BooleanVector_clear(self)

    def swap(self, *args):
        """swap(BooleanVector self, BooleanVector v)"""
        return _Nsound.BooleanVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(BooleanVector self) -> std::vector< bool >::allocator_type"""
        return _Nsound.BooleanVector_get_allocator(self)

    def begin(self):
        """begin(BooleanVector self) -> std::vector< bool >::iterator"""
        return _Nsound.BooleanVector_begin(self)

    def end(self):
        """end(BooleanVector self) -> std::vector< bool >::iterator"""
        return _Nsound.BooleanVector_end(self)

    def rbegin(self):
        """rbegin(BooleanVector self) -> std::vector< bool >::reverse_iterator"""
        return _Nsound.BooleanVector_rbegin(self)

    def rend(self):
        """rend(BooleanVector self) -> std::vector< bool >::reverse_iterator"""
        return _Nsound.BooleanVector_rend(self)

    def pop_back(self):
        """pop_back(BooleanVector self)"""
        return _Nsound.BooleanVector_pop_back(self)

    def erase(self, *args):
        """
        erase(BooleanVector self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator
        erase(BooleanVector self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator
        """
        return _Nsound.BooleanVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Nsound::boolean)> self) -> BooleanVector
        __init__(std::vector<(Nsound::boolean)> self, BooleanVector arg2) -> BooleanVector
        __init__(std::vector<(Nsound::boolean)> self, std::vector< bool >::size_type size) -> BooleanVector
        __init__(std::vector<(Nsound::boolean)> self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> BooleanVector
        """
        this = _Nsound.new_BooleanVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(BooleanVector self, std::vector< bool >::value_type x)"""
        return _Nsound.BooleanVector_push_back(self, *args)

    def front(self):
        """front(BooleanVector self) -> std::vector< bool >::value_type"""
        return _Nsound.BooleanVector_front(self)

    def back(self):
        """back(BooleanVector self) -> std::vector< bool >::value_type"""
        return _Nsound.BooleanVector_back(self)

    def assign(self, *args):
        """assign(BooleanVector self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)"""
        return _Nsound.BooleanVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(BooleanVector self, std::vector< bool >::size_type new_size)
        resize(BooleanVector self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)
        """
        return _Nsound.BooleanVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(BooleanVector self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator
        insert(BooleanVector self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)
        """
        return _Nsound.BooleanVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(BooleanVector self, std::vector< bool >::size_type n)"""
        return _Nsound.BooleanVector_reserve(self, *args)

    def capacity(self):
        """capacity(BooleanVector self) -> std::vector< bool >::size_type"""
        return _Nsound.BooleanVector_capacity(self)

    __swig_destroy__ = _Nsound.delete_BooleanVector
    __del__ = lambda self : None;
BooleanVector_swigregister = _Nsound.BooleanVector_swigregister
BooleanVector_swigregister(BooleanVector)

class Uint32Vector(_object):
    """Proxy of C++ std::vector<(Nsound::uint32)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uint32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uint32Vector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(Uint32Vector self) -> SwigPyIterator"""
        return _Nsound.Uint32Vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(Uint32Vector self) -> bool"""
        return _Nsound.Uint32Vector___nonzero__(self)

    def __bool__(self):
        """__bool__(Uint32Vector self) -> bool"""
        return _Nsound.Uint32Vector___bool__(self)

    def __len__(self):
        """__len__(Uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _Nsound.Uint32Vector___len__(self)

    def pop(self):
        """pop(Uint32Vector self) -> std::vector< unsigned int >::value_type"""
        return _Nsound.Uint32Vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> Uint32Vector"""
        return _Nsound.Uint32Vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, 
            Uint32Vector v=std::vector< unsigned int,std::allocator< unsigned int > >())
        __setslice__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        """
        return _Nsound.Uint32Vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _Nsound.Uint32Vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(Uint32Vector self, std::vector< unsigned int >::difference_type i)
        __delitem__(Uint32Vector self, PySliceObject * slice)
        """
        return _Nsound.Uint32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(Uint32Vector self, PySliceObject * slice) -> Uint32Vector
        __getitem__(Uint32Vector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _Nsound.Uint32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(Uint32Vector self, PySliceObject * slice, Uint32Vector v)
        __setitem__(Uint32Vector self, PySliceObject * slice)
        __setitem__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _Nsound.Uint32Vector___setitem__(self, *args)

    def append(self, *args):
        """append(Uint32Vector self, std::vector< unsigned int >::value_type const & x)"""
        return _Nsound.Uint32Vector_append(self, *args)

    def empty(self):
        """empty(Uint32Vector self) -> bool"""
        return _Nsound.Uint32Vector_empty(self)

    def size(self):
        """size(Uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _Nsound.Uint32Vector_size(self)

    def clear(self):
        """clear(Uint32Vector self)"""
        return _Nsound.Uint32Vector_clear(self)

    def swap(self, *args):
        """swap(Uint32Vector self, Uint32Vector v)"""
        return _Nsound.Uint32Vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(Uint32Vector self) -> std::vector< unsigned int >::allocator_type"""
        return _Nsound.Uint32Vector_get_allocator(self)

    def begin(self):
        """begin(Uint32Vector self) -> std::vector< unsigned int >::iterator"""
        return _Nsound.Uint32Vector_begin(self)

    def end(self):
        """end(Uint32Vector self) -> std::vector< unsigned int >::iterator"""
        return _Nsound.Uint32Vector_end(self)

    def rbegin(self):
        """rbegin(Uint32Vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _Nsound.Uint32Vector_rbegin(self)

    def rend(self):
        """rend(Uint32Vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _Nsound.Uint32Vector_rend(self)

    def pop_back(self):
        """pop_back(Uint32Vector self)"""
        return _Nsound.Uint32Vector_pop_back(self)

    def erase(self, *args):
        """
        erase(Uint32Vector self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(Uint32Vector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _Nsound.Uint32Vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Nsound::uint32)> self) -> Uint32Vector
        __init__(std::vector<(Nsound::uint32)> self, Uint32Vector arg2) -> Uint32Vector
        __init__(std::vector<(Nsound::uint32)> self, std::vector< unsigned int >::size_type size) -> Uint32Vector
        __init__(std::vector<(Nsound::uint32)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> Uint32Vector
        """
        this = _Nsound.new_Uint32Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(Uint32Vector self, std::vector< unsigned int >::value_type const & x)"""
        return _Nsound.Uint32Vector_push_back(self, *args)

    def front(self):
        """front(Uint32Vector self) -> std::vector< unsigned int >::value_type const &"""
        return _Nsound.Uint32Vector_front(self)

    def back(self):
        """back(Uint32Vector self) -> std::vector< unsigned int >::value_type const &"""
        return _Nsound.Uint32Vector_back(self)

    def assign(self, *args):
        """assign(Uint32Vector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _Nsound.Uint32Vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(Uint32Vector self, std::vector< unsigned int >::size_type new_size)
        resize(Uint32Vector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _Nsound.Uint32Vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(Uint32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(Uint32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, 
            std::vector< unsigned int >::value_type const & x)
        """
        return _Nsound.Uint32Vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(Uint32Vector self, std::vector< unsigned int >::size_type n)"""
        return _Nsound.Uint32Vector_reserve(self, *args)

    def capacity(self):
        """capacity(Uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _Nsound.Uint32Vector_capacity(self)

    __swig_destroy__ = _Nsound.delete_Uint32Vector
    __del__ = lambda self : None;
Uint32Vector_swigregister = _Nsound.Uint32Vector_swigregister
Uint32Vector_swigregister(Uint32Vector)

class BooleanVectorVector(_object):
    """Proxy of C++ std::vector<(std::vector<(Nsound::boolean)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BooleanVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BooleanVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(BooleanVectorVector self) -> SwigPyIterator"""
        return _Nsound.BooleanVectorVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(BooleanVectorVector self) -> bool"""
        return _Nsound.BooleanVectorVector___nonzero__(self)

    def __bool__(self):
        """__bool__(BooleanVectorVector self) -> bool"""
        return _Nsound.BooleanVectorVector___bool__(self)

    def __len__(self):
        """__len__(BooleanVectorVector self) -> std::vector< std::vector< bool > >::size_type"""
        return _Nsound.BooleanVectorVector___len__(self)

    def pop(self):
        """pop(BooleanVectorVector self) -> BooleanVector"""
        return _Nsound.BooleanVectorVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j) -> BooleanVectorVector"""
        return _Nsound.BooleanVectorVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j, 
            BooleanVectorVector v=std::vector< std::vector< Nsound::boolean,std::allocator< Nsound::boolean > >,std::allocator< std::vector< Nsound::boolean,std::allocator< Nsound::boolean > > > >())
        __setslice__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j)
        """
        return _Nsound.BooleanVectorVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j)"""
        return _Nsound.BooleanVectorVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i)
        __delitem__(BooleanVectorVector self, PySliceObject * slice)
        """
        return _Nsound.BooleanVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(BooleanVectorVector self, PySliceObject * slice) -> BooleanVectorVector
        __getitem__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i) -> BooleanVector
        """
        return _Nsound.BooleanVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(BooleanVectorVector self, PySliceObject * slice, BooleanVectorVector v)
        __setitem__(BooleanVectorVector self, PySliceObject * slice)
        __setitem__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, BooleanVector x)
        """
        return _Nsound.BooleanVectorVector___setitem__(self, *args)

    def append(self, *args):
        """append(BooleanVectorVector self, BooleanVector x)"""
        return _Nsound.BooleanVectorVector_append(self, *args)

    def empty(self):
        """empty(BooleanVectorVector self) -> bool"""
        return _Nsound.BooleanVectorVector_empty(self)

    def size(self):
        """size(BooleanVectorVector self) -> std::vector< std::vector< bool > >::size_type"""
        return _Nsound.BooleanVectorVector_size(self)

    def clear(self):
        """clear(BooleanVectorVector self)"""
        return _Nsound.BooleanVectorVector_clear(self)

    def swap(self, *args):
        """swap(BooleanVectorVector self, BooleanVectorVector v)"""
        return _Nsound.BooleanVectorVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(BooleanVectorVector self) -> std::vector< std::vector< bool > >::allocator_type"""
        return _Nsound.BooleanVectorVector_get_allocator(self)

    def begin(self):
        """begin(BooleanVectorVector self) -> std::vector< std::vector< bool > >::iterator"""
        return _Nsound.BooleanVectorVector_begin(self)

    def end(self):
        """end(BooleanVectorVector self) -> std::vector< std::vector< bool > >::iterator"""
        return _Nsound.BooleanVectorVector_end(self)

    def rbegin(self):
        """rbegin(BooleanVectorVector self) -> std::vector< std::vector< bool > >::reverse_iterator"""
        return _Nsound.BooleanVectorVector_rbegin(self)

    def rend(self):
        """rend(BooleanVectorVector self) -> std::vector< std::vector< bool > >::reverse_iterator"""
        return _Nsound.BooleanVectorVector_rend(self)

    def pop_back(self):
        """pop_back(BooleanVectorVector self)"""
        return _Nsound.BooleanVectorVector_pop_back(self)

    def erase(self, *args):
        """
        erase(BooleanVectorVector self, std::vector< std::vector< bool > >::iterator pos) -> std::vector< std::vector< bool > >::iterator
        erase(BooleanVectorVector self, std::vector< std::vector< bool > >::iterator first, std::vector< std::vector< bool > >::iterator last) -> std::vector< std::vector< bool > >::iterator
        """
        return _Nsound.BooleanVectorVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::vector<(Nsound::boolean)>)> self) -> BooleanVectorVector
        __init__(std::vector<(std::vector<(Nsound::boolean)>)> self, BooleanVectorVector arg2) -> BooleanVectorVector
        __init__(std::vector<(std::vector<(Nsound::boolean)>)> self, std::vector< std::vector< bool > >::size_type size) -> BooleanVectorVector
        __init__(std::vector<(std::vector<(Nsound::boolean)>)> self, std::vector< std::vector< bool > >::size_type size, BooleanVector value) -> BooleanVectorVector
        """
        this = _Nsound.new_BooleanVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(BooleanVectorVector self, BooleanVector x)"""
        return _Nsound.BooleanVectorVector_push_back(self, *args)

    def front(self):
        """front(BooleanVectorVector self) -> BooleanVector"""
        return _Nsound.BooleanVectorVector_front(self)

    def back(self):
        """back(BooleanVectorVector self) -> BooleanVector"""
        return _Nsound.BooleanVectorVector_back(self)

    def assign(self, *args):
        """assign(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type n, BooleanVector x)"""
        return _Nsound.BooleanVectorVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type new_size)
        resize(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type new_size, BooleanVector x)
        """
        return _Nsound.BooleanVectorVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(BooleanVectorVector self, std::vector< std::vector< bool > >::iterator pos, BooleanVector x) -> std::vector< std::vector< bool > >::iterator
        insert(BooleanVectorVector self, std::vector< std::vector< bool > >::iterator pos, std::vector< std::vector< bool > >::size_type n, 
            BooleanVector x)
        """
        return _Nsound.BooleanVectorVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type n)"""
        return _Nsound.BooleanVectorVector_reserve(self, *args)

    def capacity(self):
        """capacity(BooleanVectorVector self) -> std::vector< std::vector< bool > >::size_type"""
        return _Nsound.BooleanVectorVector_capacity(self)

    __swig_destroy__ = _Nsound.delete_BooleanVectorVector
    __del__ = lambda self : None;
BooleanVectorVector_swigregister = _Nsound.BooleanVectorVector_swigregister
BooleanVectorVector_swigregister(BooleanVectorVector)

class FFTChunkVectorT(_object):
    """Proxy of C++ std::vector<(Nsound::FFTChunk)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTChunkVectorT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFTChunkVectorT, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(FFTChunkVectorT self) -> SwigPyIterator"""
        return _Nsound.FFTChunkVectorT_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(FFTChunkVectorT self) -> bool"""
        return _Nsound.FFTChunkVectorT___nonzero__(self)

    def __bool__(self):
        """__bool__(FFTChunkVectorT self) -> bool"""
        return _Nsound.FFTChunkVectorT___bool__(self)

    def __len__(self):
        """__len__(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::size_type"""
        return _Nsound.FFTChunkVectorT___len__(self)

    def pop(self):
        """pop(FFTChunkVectorT self) -> FFTChunk"""
        return _Nsound.FFTChunkVectorT_pop(self)

    def __getslice__(self, *args):
        """__getslice__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, std::vector< Nsound::FFTChunk >::difference_type j) -> FFTChunkVectorT"""
        return _Nsound.FFTChunkVectorT___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, std::vector< Nsound::FFTChunk >::difference_type j, 
            FFTChunkVectorT v=std::vector< Nsound::FFTChunk,std::allocator< Nsound::FFTChunk > >())
        __setslice__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, std::vector< Nsound::FFTChunk >::difference_type j)
        """
        return _Nsound.FFTChunkVectorT___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, std::vector< Nsound::FFTChunk >::difference_type j)"""
        return _Nsound.FFTChunkVectorT___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i)
        __delitem__(FFTChunkVectorT self, PySliceObject * slice)
        """
        return _Nsound.FFTChunkVectorT___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(FFTChunkVectorT self, PySliceObject * slice) -> FFTChunkVectorT
        __getitem__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i) -> FFTChunk
        """
        return _Nsound.FFTChunkVectorT___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(FFTChunkVectorT self, PySliceObject * slice, FFTChunkVectorT v)
        __setitem__(FFTChunkVectorT self, PySliceObject * slice)
        __setitem__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, FFTChunk x)
        """
        return _Nsound.FFTChunkVectorT___setitem__(self, *args)

    def append(self, *args):
        """append(FFTChunkVectorT self, FFTChunk x)"""
        return _Nsound.FFTChunkVectorT_append(self, *args)

    def empty(self):
        """empty(FFTChunkVectorT self) -> bool"""
        return _Nsound.FFTChunkVectorT_empty(self)

    def size(self):
        """size(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::size_type"""
        return _Nsound.FFTChunkVectorT_size(self)

    def clear(self):
        """clear(FFTChunkVectorT self)"""
        return _Nsound.FFTChunkVectorT_clear(self)

    def swap(self, *args):
        """swap(FFTChunkVectorT self, FFTChunkVectorT v)"""
        return _Nsound.FFTChunkVectorT_swap(self, *args)

    def get_allocator(self):
        """get_allocator(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::allocator_type"""
        return _Nsound.FFTChunkVectorT_get_allocator(self)

    def begin(self):
        """begin(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::iterator"""
        return _Nsound.FFTChunkVectorT_begin(self)

    def end(self):
        """end(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::iterator"""
        return _Nsound.FFTChunkVectorT_end(self)

    def rbegin(self):
        """rbegin(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::reverse_iterator"""
        return _Nsound.FFTChunkVectorT_rbegin(self)

    def rend(self):
        """rend(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::reverse_iterator"""
        return _Nsound.FFTChunkVectorT_rend(self)

    def pop_back(self):
        """pop_back(FFTChunkVectorT self)"""
        return _Nsound.FFTChunkVectorT_pop_back(self)

    def erase(self, *args):
        """
        erase(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::iterator pos) -> std::vector< Nsound::FFTChunk >::iterator
        erase(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::iterator first, std::vector< Nsound::FFTChunk >::iterator last) -> std::vector< Nsound::FFTChunk >::iterator
        """
        return _Nsound.FFTChunkVectorT_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Nsound::FFTChunk)> self) -> FFTChunkVectorT
        __init__(std::vector<(Nsound::FFTChunk)> self, FFTChunkVectorT arg2) -> FFTChunkVectorT
        __init__(std::vector<(Nsound::FFTChunk)> self, std::vector< Nsound::FFTChunk >::size_type size) -> FFTChunkVectorT
        __init__(std::vector<(Nsound::FFTChunk)> self, std::vector< Nsound::FFTChunk >::size_type size, FFTChunk value) -> FFTChunkVectorT
        """
        this = _Nsound.new_FFTChunkVectorT(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(FFTChunkVectorT self, FFTChunk x)"""
        return _Nsound.FFTChunkVectorT_push_back(self, *args)

    def front(self):
        """front(FFTChunkVectorT self) -> FFTChunk"""
        return _Nsound.FFTChunkVectorT_front(self)

    def back(self):
        """back(FFTChunkVectorT self) -> FFTChunk"""
        return _Nsound.FFTChunkVectorT_back(self)

    def assign(self, *args):
        """assign(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type n, FFTChunk x)"""
        return _Nsound.FFTChunkVectorT_assign(self, *args)

    def resize(self, *args):
        """
        resize(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type new_size)
        resize(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type new_size, FFTChunk x)
        """
        return _Nsound.FFTChunkVectorT_resize(self, *args)

    def insert(self, *args):
        """
        insert(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::iterator pos, FFTChunk x) -> std::vector< Nsound::FFTChunk >::iterator
        insert(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::iterator pos, std::vector< Nsound::FFTChunk >::size_type n, 
            FFTChunk x)
        """
        return _Nsound.FFTChunkVectorT_insert(self, *args)

    def reserve(self, *args):
        """reserve(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type n)"""
        return _Nsound.FFTChunkVectorT_reserve(self, *args)

    def capacity(self):
        """capacity(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::size_type"""
        return _Nsound.FFTChunkVectorT_capacity(self)

    __swig_destroy__ = _Nsound.delete_FFTChunkVectorT
    __del__ = lambda self : None;
FFTChunkVectorT_swigregister = _Nsound.FFTChunkVectorT_swigregister
FFTChunkVectorT_swigregister(FFTChunkVectorT)

class StringVector(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(StringVector self) -> SwigPyIterator"""
        return _Nsound.StringVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(StringVector self) -> bool"""
        return _Nsound.StringVector___nonzero__(self)

    def __bool__(self):
        """__bool__(StringVector self) -> bool"""
        return _Nsound.StringVector___bool__(self)

    def __len__(self):
        """__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _Nsound.StringVector___len__(self)

    def pop(self):
        """pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _Nsound.StringVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector"""
        return _Nsound.StringVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            StringVector v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _Nsound.StringVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _Nsound.StringVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)
        __delitem__(StringVector self, PySliceObject * slice)
        """
        return _Nsound.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector
        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _Nsound.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)
        __setitem__(StringVector self, PySliceObject * slice)
        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _Nsound.StringVector___setitem__(self, *args)

    def append(self, *args):
        """append(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _Nsound.StringVector_append(self, *args)

    def empty(self):
        """empty(StringVector self) -> bool"""
        return _Nsound.StringVector_empty(self)

    def size(self):
        """size(StringVector self) -> std::vector< std::string >::size_type"""
        return _Nsound.StringVector_size(self)

    def clear(self):
        """clear(StringVector self)"""
        return _Nsound.StringVector_clear(self)

    def swap(self, *args):
        """swap(StringVector self, StringVector v)"""
        return _Nsound.StringVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _Nsound.StringVector_get_allocator(self)

    def begin(self):
        """begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _Nsound.StringVector_begin(self)

    def end(self):
        """end(StringVector self) -> std::vector< std::string >::iterator"""
        return _Nsound.StringVector_end(self)

    def rbegin(self):
        """rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _Nsound.StringVector_rbegin(self)

    def rend(self):
        """rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _Nsound.StringVector_rend(self)

    def pop_back(self):
        """pop_back(StringVector self)"""
        return _Nsound.StringVector_pop_back(self)

    def erase(self, *args):
        """
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _Nsound.StringVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> StringVector
        __init__(std::vector<(std::string)> self, StringVector arg2) -> StringVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StringVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector
        """
        this = _Nsound.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _Nsound.StringVector_push_back(self, *args)

    def front(self):
        """front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _Nsound.StringVector_front(self)

    def back(self):
        """back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _Nsound.StringVector_back(self)

    def assign(self, *args):
        """assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _Nsound.StringVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(StringVector self, std::vector< std::string >::size_type new_size)
        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _Nsound.StringVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _Nsound.StringVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(StringVector self, std::vector< std::string >::size_type n)"""
        return _Nsound.StringVector_reserve(self, *args)

    def capacity(self):
        """capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _Nsound.StringVector_capacity(self)

    __swig_destroy__ = _Nsound.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _Nsound.StringVector_swigregister
StringVector_swigregister(StringVector)

class circular_iterator(_object):
    """Proxy of C++ Nsound::circular_iterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, circular_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, circular_iterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::circular_iterator self, FloatVector v) -> circular_iterator
        __init__(Nsound::circular_iterator self, circular_iterator copy) -> circular_iterator
        """
        this = _Nsound.new_circular_iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self):
        """reset(circular_iterator self)"""
        return _Nsound.circular_iterator_reset(self)

    def __eq__(self, *args):
        """__eq__(circular_iterator self, circular_iterator rhs) -> bool"""
        return _Nsound.circular_iterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(circular_iterator self, circular_iterator rhs) -> bool"""
        return _Nsound.circular_iterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(circular_iterator self, Nsound::int32 i) -> circular_iterator"""
        return _Nsound.circular_iterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(circular_iterator self, Nsound::int32 i) -> circular_iterator"""
        return _Nsound.circular_iterator___isub__(self, *args)

    def __ref__(self):
        """__ref__(circular_iterator self) -> Nsound::FloatVector::value_type &"""
        return _Nsound.circular_iterator___ref__(self)

    def __float__(self):
        """__float__(circular_iterator self) -> Nsound::float64"""
        return _Nsound.circular_iterator___float__(self)

    def __str__(self):
        """__str__(circular_iterator self) -> std::string"""
        return _Nsound.circular_iterator___str__(self)

    __swig_destroy__ = _Nsound.delete_circular_iterator
    __del__ = lambda self : None;
circular_iterator_swigregister = _Nsound.circular_iterator_swigregister
circular_iterator_swigregister(circular_iterator)

class const_circular_iterator(_object):
    """Proxy of C++ Nsound::const_circular_iterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, const_circular_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, const_circular_iterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::const_circular_iterator self, FloatVector v) -> const_circular_iterator
        __init__(Nsound::const_circular_iterator self, const_circular_iterator copy) -> const_circular_iterator
        """
        this = _Nsound.new_const_circular_iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self):
        """reset(const_circular_iterator self)"""
        return _Nsound.const_circular_iterator_reset(self)

    def __eq__(self, *args):
        """__eq__(const_circular_iterator self, const_circular_iterator rhs) -> bool"""
        return _Nsound.const_circular_iterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(const_circular_iterator self, const_circular_iterator rhs) -> bool"""
        return _Nsound.const_circular_iterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(const_circular_iterator self, Nsound::int32 i) -> const_circular_iterator"""
        return _Nsound.const_circular_iterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(const_circular_iterator self, Nsound::int32 i) -> const_circular_iterator"""
        return _Nsound.const_circular_iterator___isub__(self, *args)

    def __ref__(self):
        """__ref__(const_circular_iterator self) -> Nsound::FloatVector::value_type const &"""
        return _Nsound.const_circular_iterator___ref__(self)

    def __float__(self):
        """__float__(const_circular_iterator self) -> Nsound::float64"""
        return _Nsound.const_circular_iterator___float__(self)

    __swig_destroy__ = _Nsound.delete_const_circular_iterator
    __del__ = lambda self : None;
const_circular_iterator_swigregister = _Nsound.const_circular_iterator_swigregister
const_circular_iterator_swigregister(const_circular_iterator)

class Instrument(_object):
    """Proxy of C++ Nsound::Instrument class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_Instrument
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(Instrument self) -> AudioStream
        play(Instrument self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        """
        return _Nsound.Instrument_play(self, *args)

    def getInfo(self):
        """getInfo(Instrument self) -> std::string"""
        return _Nsound.Instrument_getInfo(self)

Instrument_swigregister = _Nsound.Instrument_swigregister
Instrument_swigregister(Instrument)

class BufferSelection(_object):
    """Proxy of C++ Nsound::BufferSelection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferSelection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferSelection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::BufferSelection self, Buffer buffer, BooleanVector bv) -> BufferSelection
        __init__(Nsound::BufferSelection self, BufferSelection copy) -> BufferSelection
        """
        this = _Nsound.new_BufferSelection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_BufferSelection
    __del__ = lambda self : None;
    def __iadd__(self, *args):
        """__iadd__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___isub__(self, *args)

    def __imul__(self, *args):
        """__imul__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___idiv__(self, *args)

    def __ixor__(self, *args):
        """__ixor__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___ixor__(self, *args)

    def set(self, *args):
        """set(BufferSelection self, Nsound::float64 const & rhs)"""
        return _Nsound.BufferSelection_set(self, *args)

BufferSelection_swigregister = _Nsound.BufferSelection_swigregister
BufferSelection_swigregister(BufferSelection)

class Buffer(_object):
    """Proxy of C++ Nsound::Buffer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_Buffer
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(Nsound::Buffer self) -> Buffer
        __init__(Nsound::Buffer self, Nsound::uint32 chunk_size) -> Buffer
        __init__(Nsound::Buffer self, FloatVector list) -> Buffer
        __init__(Nsound::Buffer self, std::string const & filename, Nsound::uint32 chunk_size=4096) -> Buffer
        __init__(Nsound::Buffer self, std::string const & filename) -> Buffer
        __init__(Nsound::Buffer self, Buffer rhs) -> Buffer
        """
        this = _Nsound.new_Buffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def abs(self):
        """abs(Buffer self)"""
        return _Nsound.Buffer_abs(self)

    def getAbs(self):
        """getAbs(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getAbs(self)

    def add(self, *args):
        """
        add(Buffer self, Buffer buffer, Nsound::uint32 offset=0, Nsound::uint32 n_samples=0)
        add(Buffer self, Buffer buffer, Nsound::uint32 offset=0)
        add(Buffer self, Buffer buffer)
        """
        return _Nsound.Buffer_add(self, *args)

    def argmax(self):
        """argmax(Buffer self) -> Nsound::uint32"""
        return _Nsound.Buffer_argmax(self)

    def argmin(self):
        """argmin(Buffer self) -> Nsound::uint32"""
        return _Nsound.Buffer_argmin(self)

    def cbegin(self, *args):
        """
        cbegin(Buffer self) -> circular_iterator
        cbegin(Buffer self) -> const_circular_iterator
        """
        return _Nsound.Buffer_cbegin(self, *args)

    def getNBytes(self):
        """getNBytes(Buffer self) -> Nsound::uint32"""
        return _Nsound.Buffer_getNBytes(self)

    def exp(self):
        """exp(Buffer self)"""
        return _Nsound.Buffer_exp(self)

    def getExp(self):
        """getExp(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getExp(self)

    def convolve(self, *args):
        """convolve(Buffer self, Buffer H)"""
        return _Nsound.Buffer_convolve(self, *args)

    def getConvolve(self, *args):
        """getConvolve(Buffer self, Buffer H) -> Buffer"""
        return _Nsound.Buffer_getConvolve(self, *args)

    def dB(self):
        """dB(Buffer self)"""
        return _Nsound.Buffer_dB(self)

    def getdB(self):
        """getdB(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getdB(self)

    def derivative(self, *args):
        """derivative(Buffer self, Nsound::uint32 n)"""
        return _Nsound.Buffer_derivative(self, *args)

    def getDerivative(self, *args):
        """getDerivative(Buffer self, Nsound::uint32 n) -> Buffer"""
        return _Nsound.Buffer_getDerivative(self, *args)

    def downSample(self, *args):
        """downSample(Buffer self, Nsound::uint32 n)"""
        return _Nsound.Buffer_downSample(self, *args)

    def getDownSample(self, *args):
        """getDownSample(Buffer self, Nsound::uint32 n) -> Buffer"""
        return _Nsound.Buffer_getDownSample(self, *args)

    def findPeaks(self, window_size=0, min_height=0.0):
        """
        findPeaks(Buffer self, Nsound::uint32 window_size=0, Nsound::float64 min_height=0.0) -> Uint32Vector
        findPeaks(Buffer self, Nsound::uint32 window_size=0) -> Uint32Vector
        findPeaks(Buffer self) -> Uint32Vector
        """
        return _Nsound.Buffer_findPeaks(self, window_size, min_height)

    def getLength(self):
        """getLength(Buffer self) -> Nsound::uint32"""
        return _Nsound.Buffer_getLength(self)

    def limit(self, *args):
        """
        limit(Buffer self, Nsound::float64 min, Nsound::float64 max)
        limit(Buffer self, Buffer min, Buffer max)
        """
        return _Nsound.Buffer_limit(self, *args)

    def getLimit(self, *args):
        """
        getLimit(Buffer self, Nsound::float64 min, Nsound::float64 max) -> Buffer
        getLimit(Buffer self, Buffer min, Buffer max) -> Buffer
        """
        return _Nsound.Buffer_getLimit(self, *args)

    def log(self):
        """log(Buffer self)"""
        return _Nsound.Buffer_log(self)

    def getLog(self):
        """getLog(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getLog(self)

    def log10(self):
        """log10(Buffer self)"""
        return _Nsound.Buffer_log10(self)

    def getLog10(self):
        """getLog10(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getLog10(self)

    def getMax(self):
        """getMax(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getMax(self)

    def getMaxMagnitude(self):
        """getMaxMagnitude(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getMaxMagnitude(self)

    def getMean(self):
        """getMean(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getMean(self)

    def getMin(self):
        """getMin(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getMin(self)

    def mul(self, *args):
        """
        mul(Buffer self, Buffer buffer, Nsound::uint32 offset=0, Nsound::uint32 n_samples=0)
        mul(Buffer self, Buffer buffer, Nsound::uint32 offset=0)
        mul(Buffer self, Buffer buffer)
        """
        return _Nsound.Buffer_mul(self, *args)

    def normalize(self):
        """normalize(Buffer self)"""
        return _Nsound.Buffer_normalize(self)

    def getNormalize(self):
        """getNormalize(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getNormalize(self)

    def getSignalEnergy(self, *args):
        """getSignalEnergy(Buffer self, Nsound::uint32 window_size) -> Buffer"""
        return _Nsound.Buffer_getSignalEnergy(self, *args)

    def getStd(self):
        """getStd(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getStd(self)

    def getSum(self):
        """getSum(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getSum(self)

    def zNorm(self):
        """zNorm(Buffer self)"""
        return _Nsound.Buffer_zNorm(self)

    def getZNorm(self):
        """getZNorm(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getZNorm(self)

    def __call__(self, *args):
        """__call__(Buffer self, BooleanVector bv) -> BufferSelection"""
        return _Nsound.Buffer___call__(self, *args)

    def _get_at_index(self, *args):
        """
        _get_at_index(Buffer self, Nsound::uint32 index) -> Nsound::float64
        _get_at_index(Buffer self, Nsound::uint32 index) -> Nsound::float64 const &
        """
        return _Nsound.Buffer__get_at_index(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(Buffer self, AudioStream rhs) -> Buffer
        __lshift__(Buffer self, Buffer rhs) -> Buffer
        __lshift__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___lshift__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(Buffer self, Buffer rhs) -> Buffer
        __iadd__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(Buffer self, Buffer rhs) -> Buffer
        __isub__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(Buffer self, Buffer rhs) -> Buffer
        __imul__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(Buffer self, Buffer rhs) -> Buffer
        __idiv__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___idiv__(self, *args)

    def __ixor__(self, *args):
        """
        __ixor__(Buffer self, Buffer powers) -> Buffer
        __ixor__(Buffer self, Nsound::float64 power) -> Buffer
        """
        return _Nsound.Buffer___ixor__(self, *args)

    def __gt__(self, *args):
        """__gt__(Buffer self, Nsound::float64 rhs) -> BooleanVector"""
        return _Nsound.Buffer___gt__(self, *args)

    def __ge__(self, *args):
        """__ge__(Buffer self, Nsound::float64 rhs) -> BooleanVector"""
        return _Nsound.Buffer___ge__(self, *args)

    def __lt__(self, *args):
        """__lt__(Buffer self, Nsound::float64 rhs) -> BooleanVector"""
        return _Nsound.Buffer___lt__(self, *args)

    def __le__(self, *args):
        """__le__(Buffer self, Nsound::float64 rhs) -> BooleanVector"""
        return _Nsound.Buffer___le__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(Buffer self, Buffer rhs) -> Nsound::boolean
        __eq__(Buffer self, Nsound::float64 rhs) -> BooleanVector
        """
        return _Nsound.Buffer___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(Buffer self, Buffer rhs) -> Nsound::boolean
        __ne__(Buffer self, Nsound::float64 rhs) -> BooleanVector
        """
        return _Nsound.Buffer___ne__(self, *args)

    def plot(self, title="Buffer"):
        """
        plot(Buffer self, std::string const & title="Buffer")
        plot(Buffer self)
        """
        return _Nsound.Buffer_plot(self, title)

    def getPointer(self, *args):
        """
        getPointer(Buffer self) -> Nsound::float64 const
        getPointer(Buffer self) -> Nsound::float64 *
        """
        return _Nsound.Buffer_getPointer(self, *args)

    def preallocate(self, *args):
        """preallocate(Buffer self, Nsound::uint32 n)"""
        return _Nsound.Buffer_preallocate(self, *args)

    def readWavefile(self, *args):
        """readWavefile(Buffer self, char const * filename)"""
        return _Nsound.Buffer_readWavefile(self, *args)

    def resample(self, *args):
        """
        resample(Buffer self, Nsound::float64 factor)
        resample(Buffer self, Buffer factor)
        """
        return _Nsound.Buffer_resample(self, *args)

    def getResample(self, *args):
        """
        getResample(Buffer self, Nsound::float64 factor, Nsound::uint32 const N=10, Nsound::float64 beta=5.0) -> Buffer
        getResample(Buffer self, Nsound::float64 factor, Nsound::uint32 const N=10) -> Buffer
        getResample(Buffer self, Nsound::float64 factor) -> Buffer
        getResample(Buffer self, Buffer factor, Nsound::uint32 const N=10, Nsound::float64 beta=5.0) -> Buffer
        getResample(Buffer self, Buffer factor, Nsound::uint32 const N=10) -> Buffer
        getResample(Buffer self, Buffer factor) -> Buffer
        getResample(Buffer self, Nsound::uint32 const L, Nsound::uint32 const M, Nsound::uint32 const N=10, Nsound::float64 beta=5.0) -> Buffer
        getResample(Buffer self, Nsound::uint32 const L, Nsound::uint32 const M, Nsound::uint32 const N=10) -> Buffer
        getResample(Buffer self, Nsound::uint32 const L, Nsound::uint32 const M) -> Buffer
        """
        return _Nsound.Buffer_getResample(self, *args)

    def reverse(self):
        """reverse(Buffer self)"""
        return _Nsound.Buffer_reverse(self)

    def getReverse(self):
        """getReverse(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getReverse(self)

    def round(self):
        """round(Buffer self)"""
        return _Nsound.Buffer_round(self)

    def getRound(self):
        """getRound(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getRound(self)

    def select(self, *args):
        """select(Buffer self, Nsound::uint32 const start_index, Nsound::uint32 const stop_index) -> BufferSelection"""
        return _Nsound.Buffer_select(self, *args)

    def write(self):
        """write(Buffer self) -> std::string"""
        return _Nsound.Buffer_write(self)

    def read(self, *args):
        """read(Buffer self, std::string const & string_in)"""
        return _Nsound.Buffer_read(self, *args)

    def smooth(self, *args):
        """smooth(Buffer self, Nsound::uint32 n_passes, Nsound::uint32 n_samples_per_average)"""
        return _Nsound.Buffer_smooth(self, *args)

    def getSmooth(self, *args):
        """getSmooth(Buffer self, Nsound::uint32 n_passes, Nsound::uint32 n_samples_per_average) -> Buffer"""
        return _Nsound.Buffer_getSmooth(self, *args)

    def speedUp(self, *args):
        """
        speedUp(Buffer self, Nsound::float64 step_size)
        speedUp(Buffer self, Buffer step_size)
        """
        return _Nsound.Buffer_speedUp(self, *args)

    def getSpeedUp(self, *args):
        """
        getSpeedUp(Buffer self, Nsound::float64 step_size) -> Buffer
        getSpeedUp(Buffer self, Buffer step_size) -> Buffer
        """
        return _Nsound.Buffer_getSpeedUp(self, *args)

    def sqrt(self):
        """sqrt(Buffer self)"""
        return _Nsound.Buffer_sqrt(self)

    def getSqrt(self):
        """getSqrt(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getSqrt(self)

    def subbuffer(self, *args):
        """
        subbuffer(Buffer self, Nsound::uint32 start_index, Nsound::uint32 n_samples=0) -> Buffer
        subbuffer(Buffer self, Nsound::uint32 start_index) -> Buffer
        """
        return _Nsound.Buffer_subbuffer(self, *args)

    def upSample(self, *args):
        """upSample(Buffer self, Nsound::uint32 n)"""
        return _Nsound.Buffer_upSample(self, *args)

    def getUpSample(self, *args):
        """getUpSample(Buffer self, Nsound::uint32 n) -> Buffer"""
        return _Nsound.Buffer_getUpSample(self, *args)

    def writeWavefile(self, *args):
        """writeWavefile(Buffer self, char const * filename)"""
        return _Nsound.Buffer_writeWavefile(self, *args)

    def _set_at_index(self, *args):
        """_set_at_index(Buffer self, Nsound::int32 index, Nsound::float64 x)"""
        return _Nsound.Buffer__set_at_index(self, *args)

    #------------------------------------------------------------------------------
    # from swig/Buffer.i
    #

    def __add__(self, rhs):
        temp = Buffer(self)
        temp += rhs
        return temp


    def __sub__(self, rhs):
        temp = Buffer(self)
        temp -= rhs
        return temp


    def __div__(self, rhs):
        temp = Buffer(self)
        temp /= rhs
        return temp


    def __mul__(self, rhs):
        temp = Buffer(self)
        temp *= rhs
        return temp


    def __radd__(self, lhs):
        temp = Buffer(self)
        temp += lhs
        return temp


    def __rmul__(self, lhs):
        temp = Buffer(self)
        temp *= lhs
        return temp


    def __rsub__(self, lhs):
        temp = Buffer(self) * -1.0
        temp += lhs
        return temp


    def __rdiv__(self, lhs):
        temp = Buffer(self)
        for i in range(temp.getLength()):

            if abs(self[i]) > 0.0:
                temp[i] = lhs / self[i]
            else:
                temp[i] = lhs / 1e-20

        return temp


    def __ilshift__(self, rhs):
        raise Exception("Operator not supported")


    def __irshift__(self, rhs):
        raise Exception("Operator not supported")


    def __lshift__(self, rhs):

        # Read wavefile
        if (
                isinstance(rhs, str) or
                isinstance(rhs, Buffer)
        ):
            return _Nsound.Buffer___lshift__(self, rhs)

        else:

            # try to convert to a float
            try:
                return _Nsound.Buffer___lshift__(self, float(rhs))

            except TypeError:
                pass

            # try to convert to Buffer

            try:
                return _Nsound.Buffer___lshift__(self, Buffer(rhs))

            except TypeError:
                pass

            # assume the object is iteratble
            try:
               for x in rhs:
                   self = _Nsound.Buffer___lshift__(self, float(x))
            except TypeError:
               raise TypeError(str(type(rhs)) + ' is not iterable')

        return self


    def __rshift__(self, rhs):

        if isinstance(rhs, list):
            for s in self:
                rhs.append(s)

        elif isinstance(rhs, AudioPlayback) or isinstance(rhs, AudioPlaybackRt):
            rhs.play(self)
            return

        elif not isinstance(rhs, str):
            raise TypeError("right hand side argument must be of type str or list")

        self.writeWavefile(rhs)


    def __getitem__(self,i):

        if isinstance(i, int):

            if i >= self.getLength():
                raise StopIteration

            if i < 0:
                i += self.getLength()

            return _Nsound.Buffer__get_at_index(self, i)

        elif isinstance(i, slice):

            b = Buffer()

            for index in xrange(*i.indices(_Nsound.Buffer_getLength(self))):
                b << _Nsound.Buffer__get_at_index(self, index)

            return b

        else:
            raise StopIteration


    def __setitem__(self,i, d):

        if isinstance(i, int):

            if i >= self.getLength():
                raise IndexError("Error: Index out of bounds, %d >= %d" %(
                    i, self.getLength()))

            elif i < -self.getLength():
                raise IndexError("Error: Index out of bounds, %d < -%d" %(
                    i, self.getLength()))

            if type(d) != types.IntType and type(d) != types.FloatType:
                raise TypeError("Error: Argument must be numeric")

            _Nsound.Buffer__set_at_index(self, i, d)

        else:
            raise TypeError("Expecting index type int, but got %s" %(type(i)))


    def __pow__(self, power):
        return _Nsound.__xor__(self, power)


    def __ipow__(self, power):
        self = _Nsound.__xor__(self, power)
        return self


    def __repr__(self):
        return "Nsound.Buffer holding %d samples" % self.getLength()


    def toList(self):
        return [x for x in self]


    # Pickle interface

    def __getstate__(self):
        '''
        Returns a binary string
        '''
        return _Nsound.Buffer_write(self)

    def __setstate__(self, s):
        '''
        Reads the binary string.
        '''

        self.__init__()
        _Nsound.Buffer_read(self, s)

    #
    #------------------------------------------------------------------------------



    def ones(*args):
        """ones(Nsound::uint32 const n_samples) -> Buffer"""
        return _Nsound.Buffer_ones(*args)

    if _newclass:ones = staticmethod(ones)
    __swig_getmethods__["ones"] = lambda x: ones
    def rand(*args):
        """rand(Nsound::uint32 const n_samples) -> Buffer"""
        return _Nsound.Buffer_rand(*args)

    if _newclass:rand = staticmethod(rand)
    __swig_getmethods__["rand"] = lambda x: rand
    def zeros(*args):
        """zeros(Nsound::uint32 const n_samples) -> Buffer"""
        return _Nsound.Buffer_zeros(*args)

    if _newclass:zeros = staticmethod(zeros)
    __swig_getmethods__["zeros"] = lambda x: zeros
    def __len__(self):
        """__len__(Buffer self) -> std::size_t"""
        return _Nsound.Buffer___len__(self)

    def __str__(self):
        """__str__(Buffer self) -> std::string"""
        return _Nsound.Buffer___str__(self)

Buffer_swigregister = _Nsound.Buffer_swigregister
Buffer_swigregister(Buffer)

def Buffer_ones(*args):
  """Buffer_ones(Nsound::uint32 const n_samples) -> Buffer"""
  return _Nsound.Buffer_ones(*args)

def Buffer_rand(*args):
  """Buffer_rand(Nsound::uint32 const n_samples) -> Buffer"""
  return _Nsound.Buffer_rand(*args)

def Buffer_zeros(*args):
  """Buffer_zeros(Nsound::uint32 const n_samples) -> Buffer"""
  return _Nsound.Buffer_zeros(*args)

class AudioStreamSelection(_object):
    """Proxy of C++ Nsound::AudioStreamSelection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioStreamSelection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioStreamSelection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::AudioStreamSelection self, AudioStream as, BooleanVectorVector bv) -> AudioStreamSelection
        __init__(Nsound::AudioStreamSelection self, AudioStreamSelection copy) -> AudioStreamSelection
        """
        this = _Nsound.new_AudioStreamSelection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_AudioStreamSelection
    __del__ = lambda self : None;
    def __iadd__(self, *args):
        """__iadd__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___isub__(self, *args)

    def __imul__(self, *args):
        """__imul__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___idiv__(self, *args)

    def __ixor__(self, *args):
        """__ixor__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___ixor__(self, *args)

    def set(self, *args):
        """set(AudioStreamSelection self, Nsound::float64 const & rhs)"""
        return _Nsound.AudioStreamSelection_set(self, *args)

AudioStreamSelection_swigregister = _Nsound.AudioStreamSelection_swigregister
AudioStreamSelection_swigregister(AudioStreamSelection)

class AudioStream(_object):
    """Proxy of C++ Nsound::AudioStream class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioStream, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_AudioStream
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(Nsound::AudioStream self) -> AudioStream
        __init__(Nsound::AudioStream self, Nsound::float64 sample_rate, Nsound::uint32 n_channels=1, Nsound::uint32 n_samples_pre_allocate=4096) -> AudioStream
        __init__(Nsound::AudioStream self, Nsound::float64 sample_rate, Nsound::uint32 n_channels=1) -> AudioStream
        __init__(Nsound::AudioStream self, Nsound::float64 sample_rate) -> AudioStream
        __init__(Nsound::AudioStream self, std::string const & filename) -> AudioStream
        __init__(Nsound::AudioStream self, AudioStream rhs) -> AudioStream
        """
        this = _Nsound.new_AudioStream(*args)
        try: self.this.append(this)
        except: self.this = this
    def abs(self):
        """abs(AudioStream self)"""
        return _Nsound.AudioStream_abs(self)

    def getAbs(self):
        """getAbs(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getAbs(self)

    def add(self, *args):
        """
        add(AudioStream self, AudioStream as, Nsound::uint32 offset, Nsound::uint32 n_samples=0)
        add(AudioStream self, AudioStream as, Nsound::uint32 offset)
        add(AudioStream self, AudioStream as, Nsound::float64 offset_seconds, Nsound::float64 duration_seconds=0.0)
        add(AudioStream self, AudioStream as, Nsound::float64 offset_seconds)
        """
        return _Nsound.AudioStream_add(self, *args)

    def convolve(self, *args):
        """convolve(AudioStream self, Buffer b)"""
        return _Nsound.AudioStream_convolve(self, *args)

    def getConvolve(self, *args):
        """getConvolve(AudioStream self, Buffer b) -> AudioStream"""
        return _Nsound.AudioStream_getConvolve(self, *args)

    def dB(self):
        """dB(AudioStream self)"""
        return _Nsound.AudioStream_dB(self)

    def getdB(self):
        """getdB(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getdB(self)

    def derivative(self, *args):
        """derivative(AudioStream self, Nsound::uint32 n)"""
        return _Nsound.AudioStream_derivative(self, *args)

    def getDerivative(self, *args):
        """getDerivative(AudioStream self, Nsound::uint32 n) -> AudioStream"""
        return _Nsound.AudioStream_getDerivative(self, *args)

    def downSample(self, *args):
        """downSample(AudioStream self, Nsound::uint32 n)"""
        return _Nsound.AudioStream_downSample(self, *args)

    def getDownSample(self, *args):
        """getDownSample(AudioStream self, Nsound::uint32 n) -> AudioStream"""
        return _Nsound.AudioStream_getDownSample(self, *args)

    def getDuration(self):
        """getDuration(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getDuration(self)

    def getLength(self):
        """getLength(AudioStream self) -> Nsound::uint32"""
        return _Nsound.AudioStream_getLength(self)

    def limit(self, *args):
        """
        limit(AudioStream self, Nsound::float64 min, Nsound::float64 max)
        limit(AudioStream self, Buffer min, Buffer max)
        """
        return _Nsound.AudioStream_limit(self, *args)

    def getLimit(self, *args):
        """
        getLimit(AudioStream self, Nsound::float64 min, Nsound::float64 max) -> AudioStream
        getLimit(AudioStream self, Buffer min, Buffer max) -> AudioStream
        """
        return _Nsound.AudioStream_getLimit(self, *args)

    def getMax(self):
        """getMax(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getMax(self)

    def getMaxMagnitude(self):
        """getMaxMagnitude(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getMaxMagnitude(self)

    def getMin(self):
        """getMin(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getMin(self)

    def mono(self):
        """mono(AudioStream self)"""
        return _Nsound.AudioStream_mono(self)

    def getMono(self):
        """getMono(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getMono(self)

    def getNChannels(self):
        """getNChannels(AudioStream self) -> Nsound::uint32"""
        return _Nsound.AudioStream_getNChannels(self)

    def getSampleRate(self):
        """getSampleRate(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getSampleRate(self)

    def normalize(self):
        """normalize(AudioStream self)"""
        return _Nsound.AudioStream_normalize(self)

    def getNormalize(self):
        """getNormalize(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getNormalize(self)

    def _get_at_index(self, *args):
        """
        _get_at_index(AudioStream self, Nsound::uint32 index) -> Buffer
        _get_at_index(AudioStream self, Nsound::uint32 index) -> Buffer
        """
        return _Nsound.AudioStream__get_at_index(self, *args)

    def __call__(self, *args):
        """
        __call__(AudioStream self, BooleanVectorVector bv) -> AudioStreamSelection
        __call__(AudioStream self, Nsound::uint32 channel, Nsound::uint32 index) -> Nsound::float64
        """
        return _Nsound.AudioStream___call__(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(AudioStream self, AudioStream rhs) -> AudioStream
        __lshift__(AudioStream self, Buffer rhs) -> AudioStream
        __lshift__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___lshift__(self, *args)

    def __gt__(self, *args):
        """__gt__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector"""
        return _Nsound.AudioStream___gt__(self, *args)

    def __ge__(self, *args):
        """__ge__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector"""
        return _Nsound.AudioStream___ge__(self, *args)

    def __lt__(self, *args):
        """__lt__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector"""
        return _Nsound.AudioStream___lt__(self, *args)

    def __le__(self, *args):
        """__le__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector"""
        return _Nsound.AudioStream___le__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(AudioStream self, AudioStream rhs) -> Nsound::boolean
        __eq__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector
        """
        return _Nsound.AudioStream___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(AudioStream self, AudioStream rhs) -> Nsound::boolean
        __ne__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector
        """
        return _Nsound.AudioStream___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(AudioStream self, AudioStream rhs) -> AudioStream
        __iadd__(AudioStream self, Buffer rhs) -> AudioStream
        __iadd__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(AudioStream self, AudioStream rhs) -> AudioStream
        __isub__(AudioStream self, Buffer rhs) -> AudioStream
        __isub__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(AudioStream self, AudioStream rhs) -> AudioStream
        __imul__(AudioStream self, Buffer rhs) -> AudioStream
        __imul__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(AudioStream self, AudioStream rhs) -> AudioStream
        __idiv__(AudioStream self, Buffer rhs) -> AudioStream
        __idiv__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___idiv__(self, *args)

    def __ixor__(self, *args):
        """
        __ixor__(AudioStream self, AudioStream rhs) -> AudioStream
        __ixor__(AudioStream self, Buffer rhs) -> AudioStream
        __ixor__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___ixor__(self, *args)

    def pad(self, fill=0.0):
        """
        pad(AudioStream self, Nsound::float64 fill=0.0)
        pad(AudioStream self)
        """
        return _Nsound.AudioStream_pad(self, fill)

    def getPad(self, fill=0.0):
        """
        getPad(AudioStream self, Nsound::float64 fill=0.0) -> AudioStream
        getPad(AudioStream self) -> AudioStream
        """
        return _Nsound.AudioStream_getPad(self, fill)

    def pan(self, *args):
        """
        pan(AudioStream self, Nsound::float64 pan)
        pan(AudioStream self, Buffer pan)
        """
        return _Nsound.AudioStream_pan(self, *args)

    def getPan(self, *args):
        """
        getPan(AudioStream self, Nsound::float64 pan) -> AudioStream
        getPan(AudioStream self, Buffer pan) -> AudioStream
        """
        return _Nsound.AudioStream_getPan(self, *args)

    def plot(self, title="AudioStream"):
        """
        plot(AudioStream self, std::string const & title="AudioStream")
        plot(AudioStream self)
        """
        return _Nsound.AudioStream_plot(self, title)

    def readWavefile(self, *args):
        """readWavefile(AudioStream self, char const * filename)"""
        return _Nsound.AudioStream_readWavefile(self, *args)

    def resample(self, *args):
        """
        resample(AudioStream self, Nsound::float64 factor)
        resample(AudioStream self, Buffer factor)
        """
        return _Nsound.AudioStream_resample(self, *args)

    def getResample(self, *args):
        """
        getResample(AudioStream self, Nsound::float64 factor) -> AudioStream
        getResample(AudioStream self, Buffer factor) -> AudioStream
        """
        return _Nsound.AudioStream_getResample(self, *args)

    def resample2(self, *args):
        """resample2(AudioStream self, Nsound::float64 new_sample_rate)"""
        return _Nsound.AudioStream_resample2(self, *args)

    def getResample2(self, *args):
        """getResample2(AudioStream self, Nsound::float64 new_sample_rate) -> AudioStream"""
        return _Nsound.AudioStream_getResample2(self, *args)

    def reverse(self):
        """reverse(AudioStream self)"""
        return _Nsound.AudioStream_reverse(self)

    def getReverse(self):
        """getReverse(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getReverse(self)

    def select(self, *args):
        """select(AudioStream self, Nsound::uint32 const start_index, Nsound::uint32 const stop_index) -> AudioStreamSelection"""
        return _Nsound.AudioStream_select(self, *args)

    def write(self, *args):
        """
        write(AudioStream self, std::ostream & out) -> std::ostream
        write(AudioStream self) -> std::string
        """
        return _Nsound.AudioStream_write(self, *args)

    def read(self, *args):
        """
        read(AudioStream self, std::istream & stream_in) -> std::istream
        read(AudioStream self, std::string const & string_in)
        """
        return _Nsound.AudioStream_read(self, *args)

    def setNChannels(self, *args):
        """setNChannels(AudioStream self, Nsound::uint32 channels)"""
        return _Nsound.AudioStream_setNChannels(self, *args)

    def setSampleRate(self, *args):
        """setSampleRate(AudioStream self, Nsound::uint32 sample_rate)"""
        return _Nsound.AudioStream_setSampleRate(self, *args)

    def smooth(self, *args):
        """smooth(AudioStream self, Nsound::uint32 n_passes, Nsound::uint32 n_samples_per_average)"""
        return _Nsound.AudioStream_smooth(self, *args)

    def getSmooth(self, *args):
        """getSmooth(AudioStream self, Nsound::uint32 n_passes, Nsound::uint32 n_samples_per_average) -> AudioStream"""
        return _Nsound.AudioStream_getSmooth(self, *args)

    def speedUp(self, *args):
        """
        speedUp(AudioStream self, Nsound::float32 step_size)
        speedUp(AudioStream self, Buffer step_size)
        """
        return _Nsound.AudioStream_speedUp(self, *args)

    def getSpeedUp(self, *args):
        """
        getSpeedUp(AudioStream self, Nsound::float32 step_size) -> AudioStream
        getSpeedUp(AudioStream self, Buffer step_size) -> AudioStream
        """
        return _Nsound.AudioStream_getSpeedUp(self, *args)

    def sqrt(self):
        """sqrt(AudioStream self)"""
        return _Nsound.AudioStream_sqrt(self)

    def getSqrt(self):
        """getSqrt(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getSqrt(self)

    def substream(self, *args):
        """
        substream(AudioStream self, Nsound::uint32 start_index, Nsound::uint32 n_samples=0) -> AudioStream
        substream(AudioStream self, Nsound::uint32 start_index) -> AudioStream
        substream(AudioStream self, Nsound::int32 start_index, Nsound::int32 n_samples=0) -> AudioStream
        substream(AudioStream self, Nsound::int32 start_index) -> AudioStream
        substream(AudioStream self, Nsound::float64 start_time, Nsound::float64 duration=0) -> AudioStream
        substream(AudioStream self, Nsound::float64 start_time) -> AudioStream
        """
        return _Nsound.AudioStream_substream(self, *args)

    def transpose(self):
        """transpose(AudioStream self)"""
        return _Nsound.AudioStream_transpose(self)

    def getTranspose(self):
        """getTranspose(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getTranspose(self)

    def upSample(self, *args):
        """upSample(AudioStream self, Nsound::uint32 n)"""
        return _Nsound.AudioStream_upSample(self, *args)

    def getUpSample(self, *args):
        """getUpSample(AudioStream self, Nsound::uint32 n) -> AudioStream"""
        return _Nsound.AudioStream_getUpSample(self, *args)

    def writeWavefile(self, *args):
        """writeWavefile(AudioStream self, char const * filename)"""
        return _Nsound.AudioStream_writeWavefile(self, *args)

    def _set_at_index(self, *args):
        """_set_at_index(AudioStream self, Nsound::int32 i, Buffer arg3)"""
        return _Nsound.AudioStream__set_at_index(self, *args)

    #------------------------------------------------------------------------------
    # from swig/AudioStream.i
    #

    def __add__(self, other):
        temp = AudioStream(self)
        temp += other
        return temp


    def __len__(self):
        return self.getLength()


    def __sub__(self, other):
        temp = AudioStream(self)
        temp -= other
        return temp


    def __div__(self, other):
        temp = AudioStream(self)
        temp /= other
        return temp


    def __mul__(self, other):
        temp = AudioStream(self)
        temp *= other
        return temp


    def __radd__(self, other):
        temp = AudioStream(self)
        temp += other
        return temp


    def __rmul__(self, other):
        temp = AudioStream(self)
        temp *= other
        return temp


    def __rsub__(self, other):
        temp = AudioStream(self) * -1.0
        temp += other
        return temp


    def __rdiv__(self, other):
        temp = AudioStream(self)
        for i in range(temp.getNChannels()):

            temp[i] = other / temp[i];

        return temp


    def __ilshift__(self, rhs):
        raise Exception("Operator not supported")


    def __irshift__(self, rhs):
        raise Exception("Operator not supported")


    def __lshift__(self, rhs):

        # Read wavefile
        if (
                isinstance(rhs, str) or
                isinstance(rhs, AudioStream) or
                isinstance(rhs, Buffer)
        ):
            return _Nsound.AudioStream___lshift__(self, rhs)

        else:

            # try to convert to a float
            try:
                return _Nsound.AudioStream___lshift__(self, float(rhs))

            except TypeError:
                pass

            # assume the object is iteratble
            try:
               for x in rhs:
                   self = _Nsound.AudioStream___lshift__(self, float(x))
            except TypeError:
               raise TypeError(str(type(rhs)) + ' is not iterable')

        return self


    def __rshift__(self, rhs):

        if isinstance(rhs, list):
            temp = self.getMono()
            for s in temp:
                rhs.append(s)

        elif isinstance(rhs, AudioPlayback) or isinstance(rhs, AudioPlaybackRt):
            rhs.play(self)
            return

        elif not isinstance(rhs, str):
            raise TypeError("Error: right hand side argument must be of type str")

        self.writeWavefile(rhs)


    def __getitem__(self,i):

        if isinstance(i, int):
            if abs(i) >= self.getNChannels():
                raise StopIteration

            if i < 0:
                i += self.getNChannels()

            return _Nsound.AudioStream__get_at_index(self, i)

        elif isinstance(i, slice):

            indices = range(*i.indices())

            n_channels = len(indices)

            a = AudioStream(self.getSampleRate(), n_channels)

            k = 0
            for index in indices:
                a[k] = Buffer(_Nsound.AudioStream__get_at_index(self, index))
                k += 1

            return a

        else:
            raise StopIteration


    def __setitem__(self, i, buf):

        if isinstance(i, int):
            if i >= self.getNChannels():
                raise IndexError("Error: Index out of bounds, %d >= %d" %(
                    i, self.getNChannels()))

            if not isinstance(buf, Buffer):
                raise TypeError(
                    "Error: Input argument must be of class Buffer, not %s" %(
                        type(buf)))

            self._set_at_index(i, buf)

        else:
            raise TypeError("Expecting index type int, but got %s" %(type(i)))


    def __pow__(self, power):
        return _Nsound.__xor__(self, power)


    def __ipow__(self, power):
        self = _Nsound.__xor__(self, power)
        return self


    def __str__(self):

        s = "Nsound.AudioStream(\n"

        for b in self:
            s += "    %s,\n" % b

        s += ")"

        return s


    def __repr__(self):
        return "Nsound.AudioStream(%.1f, %d) holding %.3f seconds (%d samples)" % (
            self.getSampleRate(),
            self.getNChannels(),
            self.getDuration(),
            self.getLength()
        )


    # Pickle interface

    def __getstate__(self):
        '''
        Returns a binary string
        '''
        return _Nsound.AudioStream_write(self)


    def __setstate__(self, s):
        '''
        Reads the binary string.
        '''

        self.__init__()
        _Nsound.AudioStream_read(self, s)

    #
    #------------------------------------------------------------------------------



    def ones(*args):
        """ones(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
        return _Nsound.AudioStream_ones(*args)

    if _newclass:ones = staticmethod(ones)
    __swig_getmethods__["ones"] = lambda x: ones
    def rand(*args):
        """rand(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
        return _Nsound.AudioStream_rand(*args)

    if _newclass:rand = staticmethod(rand)
    __swig_getmethods__["rand"] = lambda x: rand
    def zeros(*args):
        """zeros(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
        return _Nsound.AudioStream_zeros(*args)

    if _newclass:zeros = staticmethod(zeros)
    __swig_getmethods__["zeros"] = lambda x: zeros
    def __len__(self):
        """__len__(AudioStream self) -> std::size_t"""
        return _Nsound.AudioStream___len__(self)

AudioStream_swigregister = _Nsound.AudioStream_swigregister
AudioStream_swigregister(AudioStream)

def AudioStream_ones(*args):
  """AudioStream_ones(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
  return _Nsound.AudioStream_ones(*args)

def AudioStream_rand(*args):
  """AudioStream_rand(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
  return _Nsound.AudioStream_rand(*args)

def AudioStream_zeros(*args):
  """AudioStream_zeros(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
  return _Nsound.AudioStream_zeros(*args)


def __xor__(*args):
  """
    __xor__(Buffer lhs, Buffer rhs) -> Buffer
    __xor__(Buffer lhs, Nsound::float64 d) -> Buffer
    __xor__(Nsound::float64 d, Buffer rhs) -> Buffer
    __xor__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __xor__(AudioStream lhs, Buffer rhs) -> AudioStream
    __xor__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    """
  return _Nsound.__xor__(*args)

def __add__(*args):
  """
    __add__(circular_iterator lhs, Nsound::int32 rhs) -> circular_iterator
    __add__(const_circular_iterator lhs, Nsound::int32 rhs) -> const_circular_iterator
    __add__(Buffer lhs, Buffer rhs) -> Buffer
    __add__(Buffer lhs, Nsound::float64 d) -> Buffer
    __add__(Nsound::float64 d, Buffer rhs) -> Buffer
    __add__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __add__(AudioStream lhs, Buffer rhs) -> AudioStream
    __add__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    __add__(Nsound::float64 d, AudioStream rhs) -> AudioStream
    """
  return _Nsound.__add__(*args)

def __sub__(*args):
  """
    __sub__(circular_iterator lhs, Nsound::int32 rhs) -> circular_iterator
    __sub__(const_circular_iterator lhs, Nsound::int32 rhs) -> const_circular_iterator
    __sub__(Buffer lhs, Buffer rhs) -> Buffer
    __sub__(Buffer lhs, Nsound::float64 d) -> Buffer
    __sub__(Nsound::float64 d, Buffer rhs) -> Buffer
    __sub__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __sub__(AudioStream lhs, Buffer rhs) -> AudioStream
    __sub__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    __sub__(Nsound::float64 d, AudioStream rhs) -> AudioStream
    """
  return _Nsound.__sub__(*args)

def __mul__(*args):
  """
    __mul__(Buffer lhs, Buffer rhs) -> Buffer
    __mul__(Buffer lhs, Nsound::float64 d) -> Buffer
    __mul__(Nsound::float64 d, Buffer rhs) -> Buffer
    __mul__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __mul__(AudioStream lhs, Buffer rhs) -> AudioStream
    __mul__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    __mul__(Nsound::float64 d, AudioStream rhs) -> AudioStream
    """
  return _Nsound.__mul__(*args)

def __div__(*args):
  """
    __div__(Buffer lhs, Buffer rhs) -> Buffer
    __div__(Buffer lhs, Nsound::float64 d) -> Buffer
    __div__(Nsound::float64 d, Buffer rhs) -> Buffer
    __div__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __div__(AudioStream lhs, Buffer rhs) -> AudioStream
    __div__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    __div__(Nsound::float64 d, AudioStream rhs) -> AudioStream
    """
  return _Nsound.__div__(*args)
class FFTChunk(_object):
    """Proxy of C++ Nsound::FFTChunk class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFTChunk, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FFTChunk self, Nsound::uint32 size=32, Nsound::uint32 sample_rate=44100, Nsound::uint32 original_size=0) -> FFTChunk
        __init__(Nsound::FFTChunk self, Nsound::uint32 size=32, Nsound::uint32 sample_rate=44100) -> FFTChunk
        __init__(Nsound::FFTChunk self, Nsound::uint32 size=32) -> FFTChunk
        __init__(Nsound::FFTChunk self) -> FFTChunk
        __init__(Nsound::FFTChunk self, FFTChunk copy) -> FFTChunk
        """
        this = _Nsound.new_FFTChunk(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FFTChunk
    __del__ = lambda self : None;
    def getFrequencyAxis(self):
        """getFrequencyAxis(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getFrequencyAxis(self)

    def getReal(self):
        """getReal(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getReal(self)

    def getImaginary(self):
        """getImaginary(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getImaginary(self)

    def getMagnitude(self):
        """getMagnitude(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getMagnitude(self)

    def getOriginalSize(self):
        """getOriginalSize(FFTChunk self) -> Nsound::uint32"""
        return _Nsound.FFTChunk_getOriginalSize(self)

    def getPhase(self):
        """getPhase(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getPhase(self)

    def isPolar(self):
        """isPolar(FFTChunk self) -> Nsound::boolean"""
        return _Nsound.FFTChunk_isPolar(self)

    def plot(self, title="", dB=True, show_phase=False):
        """
        plot(FFTChunk self, std::string const & title="", Nsound::boolean dB=True, Nsound::boolean show_phase=False)
        plot(FFTChunk self, std::string const & title="", Nsound::boolean dB=True)
        plot(FFTChunk self, std::string const & title="")
        plot(FFTChunk self)
        """
        return _Nsound.FFTChunk_plot(self, title, dB, show_phase)

    def setCartesian(self, *args):
        """setCartesian(FFTChunk self, Buffer real, Buffer imaginary)"""
        return _Nsound.FFTChunk_setCartesian(self, *args)

    def setPolar(self, *args):
        """setPolar(FFTChunk self, Buffer magnitude, Buffer phase)"""
        return _Nsound.FFTChunk_setPolar(self, *args)

    def toPolar(self):
        """toPolar(FFTChunk self)"""
        return _Nsound.FFTChunk_toPolar(self)

    def toCartesian(self):
        """toCartesian(FFTChunk self)"""
        return _Nsound.FFTChunk_toCartesian(self)

    __swig_setmethods__["real_"] = _Nsound.FFTChunk_real__set
    __swig_getmethods__["real_"] = _Nsound.FFTChunk_real__get
    if _newclass:real_ = _swig_property(_Nsound.FFTChunk_real__get, _Nsound.FFTChunk_real__set)
    __swig_setmethods__["imag_"] = _Nsound.FFTChunk_imag__set
    __swig_getmethods__["imag_"] = _Nsound.FFTChunk_imag__get
    if _newclass:imag_ = _swig_property(_Nsound.FFTChunk_imag__get, _Nsound.FFTChunk_imag__set)
    def getSampleRate(self):
        """getSampleRate(FFTChunk self) -> Nsound::uint32"""
        return _Nsound.FFTChunk_getSampleRate(self)

FFTChunk_swigregister = _Nsound.FFTChunk_swigregister
FFTChunk_swigregister(FFTChunk)

BARTLETT = _Nsound.BARTLETT
BLACKMAN = _Nsound.BLACKMAN
BLACKMAN_HARRIS = _Nsound.BLACKMAN_HARRIS
GAUSSIAN = _Nsound.GAUSSIAN
GAUSSIAN_05 = _Nsound.GAUSSIAN_05
GAUSSIAN_10 = _Nsound.GAUSSIAN_10
GAUSSIAN_15 = _Nsound.GAUSSIAN_15
GAUSSIAN_20 = _Nsound.GAUSSIAN_20
GAUSSIAN_25 = _Nsound.GAUSSIAN_25
GAUSSIAN_30 = _Nsound.GAUSSIAN_30
GAUSSIAN_33 = _Nsound.GAUSSIAN_33
GAUSSIAN_35 = _Nsound.GAUSSIAN_35
GAUSSIAN_40 = _Nsound.GAUSSIAN_40
GAUSSIAN_45 = _Nsound.GAUSSIAN_45
GAUSSIAN_50 = _Nsound.GAUSSIAN_50
GAUSSIAN_55 = _Nsound.GAUSSIAN_55
GAUSSIAN_60 = _Nsound.GAUSSIAN_60
GAUSSIAN_65 = _Nsound.GAUSSIAN_65
GAUSSIAN_66 = _Nsound.GAUSSIAN_66
GAUSSIAN_70 = _Nsound.GAUSSIAN_70
GAUSSIAN_75 = _Nsound.GAUSSIAN_75
GAUSSIAN_80 = _Nsound.GAUSSIAN_80
GAUSSIAN_85 = _Nsound.GAUSSIAN_85
GAUSSIAN_90 = _Nsound.GAUSSIAN_90
GAUSSIAN_95 = _Nsound.GAUSSIAN_95
GAUSSIAN_99 = _Nsound.GAUSSIAN_99
HAMMING = _Nsound.HAMMING
HANNING = _Nsound.HANNING
KAISER = _Nsound.KAISER
NUTTALL = _Nsound.NUTTALL
PARZEN = _Nsound.PARZEN
RECTANGULAR = _Nsound.RECTANGULAR
BACKEND_TYPE_NONE = _Nsound.BACKEND_TYPE_NONE
BACKEND_TYPE_LIBAO = _Nsound.BACKEND_TYPE_LIBAO
BACKEND_TYPE_LIBPORTAUDIO = _Nsound.BACKEND_TYPE_LIBPORTAUDIO
class AudioBackend(_object):
    """Proxy of C++ Nsound::AudioBackend class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioBackend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioBackend, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    BACKEND_NOT_INITIALIZED = _Nsound.AudioBackend_BACKEND_NOT_INITIALIZED
    BACKEND_READY = _Nsound.AudioBackend_BACKEND_READY
    BACKEND_ERROR = _Nsound.AudioBackend_BACKEND_ERROR
    __swig_destroy__ = _Nsound.delete_AudioBackend
    __del__ = lambda self : None;
    def getBackendType(self):
        """getBackendType(AudioBackend self) -> Nsound::AudioBackendType"""
        return _Nsound.AudioBackend_getBackendType(self)

    def getBitsPerSample(self):
        """getBitsPerSample(AudioBackend self) -> Nsound::uint32"""
        return _Nsound.AudioBackend_getBitsPerSample(self)

    def getChannels(self):
        """getChannels(AudioBackend self) -> Nsound::uint32"""
        return _Nsound.AudioBackend_getChannels(self)

    def getError(self):
        """getError(AudioBackend self) -> std::string"""
        return _Nsound.AudioBackend_getError(self)

    def getInfo(self):
        """getInfo(AudioBackend self) -> std::string"""
        return _Nsound.AudioBackend_getInfo(self)

    def getSampleRate(self):
        """getSampleRate(AudioBackend self) -> Nsound::uint32"""
        return _Nsound.AudioBackend_getSampleRate(self)

    def getState(self):
        """getState(AudioBackend self) -> Nsound::AudioBackend::State"""
        return _Nsound.AudioBackend_getState(self)

    def getStateString(*args):
        """
        getStateString() -> std::string
        getStateString(Nsound::AudioBackend::State const & state) -> std::string
        """
        return _Nsound.AudioBackend_getStateString(*args)

    if _newclass:getStateString = staticmethod(getStateString)
    __swig_getmethods__["getStateString"] = lambda x: getStateString
    def initialize(self):
        """initialize(AudioBackend self)"""
        return _Nsound.AudioBackend_initialize(self)

    def play(self, *args):
        """play(AudioBackend self, void * data, Nsound::uint32 n_bytes)"""
        return _Nsound.AudioBackend_play(self, *args)

    def scanDevices(self, *args):
        """scanDevices(AudioBackend self, AudioPlayback pb, AudioStream test_clip)"""
        return _Nsound.AudioBackend_scanDevices(self, *args)

    def setOption(self, *args):
        """setOption(AudioBackend self, std::string const & key, std::string const & value)"""
        return _Nsound.AudioBackend_setOption(self, *args)

    def shutdown(self):
        """shutdown(AudioBackend self)"""
        return _Nsound.AudioBackend_shutdown(self)

AudioBackend_swigregister = _Nsound.AudioBackend_swigregister
AudioBackend_swigregister(AudioBackend)

def AudioBackend_getStateString(*args):
  """
    getStateString() -> std::string
    AudioBackend_getStateString(Nsound::AudioBackend::State const & state) -> std::string
    """
  return _Nsound.AudioBackend_getStateString(*args)

class AudioPlayback(_object):
    """Proxy of C++ Nsound::AudioPlayback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioPlayback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioPlayback, name)
    __repr__ = _swig_repr
    def __init__(self, sample_rate=44100.0, channels=1, bits_per_sample=16): 
        """
        __init__(Nsound::AudioPlayback self, Nsound::float64 const & sample_rate=44100.0, Nsound::uint32 const channels=1, Nsound::uint32 const bits_per_sample=16) -> AudioPlayback
        __init__(Nsound::AudioPlayback self, Nsound::float64 const & sample_rate=44100.0, Nsound::uint32 const channels=1) -> AudioPlayback
        __init__(Nsound::AudioPlayback self, Nsound::float64 const & sample_rate=44100.0) -> AudioPlayback
        __init__(Nsound::AudioPlayback self) -> AudioPlayback
        """
        this = _Nsound.new_AudioPlayback(sample_rate, channels, bits_per_sample)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_AudioPlayback
    __del__ = lambda self : None;
    def setBackendType(*args):
        """setBackendType(Nsound::AudioBackendType const ab)"""
        return _Nsound.AudioPlayback_setBackendType(*args)

    if _newclass:setBackendType = staticmethod(setBackendType)
    __swig_getmethods__["setBackendType"] = lambda x: setBackendType
    def getBackendType():
        """getBackendType() -> Nsound::AudioBackendType"""
        return _Nsound.AudioPlayback_getBackendType()

    if _newclass:getBackendType = staticmethod(getBackendType)
    __swig_getmethods__["getBackendType"] = lambda x: getBackendType
    def getBitsPerSample(self):
        """getBitsPerSample(AudioPlayback self) -> Nsound::uint32"""
        return _Nsound.AudioPlayback_getBitsPerSample(self)

    def setBitsPerSample(self, *args):
        """setBitsPerSample(AudioPlayback self, Nsound::uint32 bits_per_sample)"""
        return _Nsound.AudioPlayback_setBitsPerSample(self, *args)

    def getChannels(self):
        """getChannels(AudioPlayback self) -> Nsound::uint32"""
        return _Nsound.AudioPlayback_getChannels(self)

    def setChannels(self, *args):
        """setChannels(AudioPlayback self, Nsound::uint32 channels)"""
        return _Nsound.AudioPlayback_setChannels(self, *args)

    def getError(self):
        """getError(AudioPlayback self) -> std::string"""
        return _Nsound.AudioPlayback_getError(self)

    def getInfo(self):
        """getInfo(AudioPlayback self) -> std::string"""
        return _Nsound.AudioPlayback_getInfo(self)

    def getSampleRate(self):
        """getSampleRate(AudioPlayback self) -> Nsound::uint32"""
        return _Nsound.AudioPlayback_getSampleRate(self)

    def setSampleRate(self, *args):
        """setSampleRate(AudioPlayback self, Nsound::uint32 sample_rate)"""
        return _Nsound.AudioPlayback_setSampleRate(self, *args)

    def getState(self):
        """getState(AudioPlayback self) -> Nsound::AudioBackend::State"""
        return _Nsound.AudioPlayback_getState(self)

    def getStateString(self, *args):
        """
        getStateString(AudioPlayback self) -> std::string
        getStateString(AudioPlayback self, Nsound::AudioBackend::State const & state) -> std::string
        """
        return _Nsound.AudioPlayback_getStateString(self, *args)

    def initialize(self):
        """initialize(AudioPlayback self)"""
        return _Nsound.AudioPlayback_initialize(self)

    def play(self, *args):
        """
        play(AudioPlayback self, AudioStream a)
        play(AudioPlayback self, Buffer b)
        """
        return _Nsound.AudioPlayback_play(self, *args)

    def scanDevices(self):
        """scanDevices(AudioPlayback self)"""
        return _Nsound.AudioPlayback_scanDevices(self)

    def setOption(self, *args):
        """setOption(AudioPlayback self, std::string const & key, std::string const & value)"""
        return _Nsound.AudioPlayback_setOption(self, *args)

    def shutdown(self):
        """shutdown(AudioPlayback self)"""
        return _Nsound.AudioPlayback_shutdown(self)

AudioPlayback_swigregister = _Nsound.AudioPlayback_swigregister
AudioPlayback_swigregister(AudioPlayback)

def AudioPlayback_setBackendType(*args):
  """AudioPlayback_setBackendType(Nsound::AudioBackendType const ab)"""
  return _Nsound.AudioPlayback_setBackendType(*args)

def AudioPlayback_getBackendType():
  """AudioPlayback_getBackendType() -> Nsound::AudioBackendType"""
  return _Nsound.AudioPlayback_getBackendType()


def use(*args):
  """
    use(std::string const & backend)
    use(Nsound::AudioBackendType const & type)
    """
  return _Nsound.use(*args)

def getBackends():
  """getBackends() -> StringVector"""
  return _Nsound.getBackends()

def getBackendTypes():
  """getBackendTypes() -> std::vector< Nsound::AudioBackendType,std::allocator< Nsound::AudioBackendType > >"""
  return _Nsound.getBackendTypes()
BUM_SILENCE = _Nsound.BUM_SILENCE
BUM_NOISE = _Nsound.BUM_NOISE
BUM_TONE = _Nsound.BUM_TONE
class AudioPlaybackRtDebug(_object):
    """Proxy of C++ Nsound::AudioPlaybackRtDebug class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioPlaybackRtDebug, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioPlaybackRtDebug, name)
    __repr__ = _swig_repr
    __swig_setmethods__["unknown_error_count"] = _Nsound.AudioPlaybackRtDebug_unknown_error_count_set
    __swig_getmethods__["unknown_error_count"] = _Nsound.AudioPlaybackRtDebug_unknown_error_count_get
    if _newclass:unknown_error_count = _swig_property(_Nsound.AudioPlaybackRtDebug_unknown_error_count_get, _Nsound.AudioPlaybackRtDebug_unknown_error_count_set)
    __swig_setmethods__["overrun_count"] = _Nsound.AudioPlaybackRtDebug_overrun_count_set
    __swig_getmethods__["overrun_count"] = _Nsound.AudioPlaybackRtDebug_overrun_count_get
    if _newclass:overrun_count = _swig_property(_Nsound.AudioPlaybackRtDebug_overrun_count_get, _Nsound.AudioPlaybackRtDebug_overrun_count_set)
    __swig_setmethods__["underrun_count"] = _Nsound.AudioPlaybackRtDebug_underrun_count_set
    __swig_getmethods__["underrun_count"] = _Nsound.AudioPlaybackRtDebug_underrun_count_get
    if _newclass:underrun_count = _swig_property(_Nsound.AudioPlaybackRtDebug_underrun_count_get, _Nsound.AudioPlaybackRtDebug_underrun_count_set)
    __swig_setmethods__["pa_overrun_count"] = _Nsound.AudioPlaybackRtDebug_pa_overrun_count_set
    __swig_getmethods__["pa_overrun_count"] = _Nsound.AudioPlaybackRtDebug_pa_overrun_count_get
    if _newclass:pa_overrun_count = _swig_property(_Nsound.AudioPlaybackRtDebug_pa_overrun_count_get, _Nsound.AudioPlaybackRtDebug_pa_overrun_count_set)
    __swig_setmethods__["pa_underrun_count"] = _Nsound.AudioPlaybackRtDebug_pa_underrun_count_set
    __swig_getmethods__["pa_underrun_count"] = _Nsound.AudioPlaybackRtDebug_pa_underrun_count_get
    if _newclass:pa_underrun_count = _swig_property(_Nsound.AudioPlaybackRtDebug_pa_underrun_count_get, _Nsound.AudioPlaybackRtDebug_pa_underrun_count_set)
    __swig_setmethods__["pool_size"] = _Nsound.AudioPlaybackRtDebug_pool_size_set
    __swig_getmethods__["pool_size"] = _Nsound.AudioPlaybackRtDebug_pool_size_get
    if _newclass:pool_size = _swig_property(_Nsound.AudioPlaybackRtDebug_pool_size_get, _Nsound.AudioPlaybackRtDebug_pool_size_set)
    __swig_setmethods__["n_ready"] = _Nsound.AudioPlaybackRtDebug_n_ready_set
    __swig_getmethods__["n_ready"] = _Nsound.AudioPlaybackRtDebug_n_ready_get
    if _newclass:n_ready = _swig_property(_Nsound.AudioPlaybackRtDebug_n_ready_get, _Nsound.AudioPlaybackRtDebug_n_ready_set)
    __swig_setmethods__["wr_index"] = _Nsound.AudioPlaybackRtDebug_wr_index_set
    __swig_getmethods__["wr_index"] = _Nsound.AudioPlaybackRtDebug_wr_index_get
    if _newclass:wr_index = _swig_property(_Nsound.AudioPlaybackRtDebug_wr_index_get, _Nsound.AudioPlaybackRtDebug_wr_index_set)
    __swig_setmethods__["wr_ptr"] = _Nsound.AudioPlaybackRtDebug_wr_ptr_set
    __swig_getmethods__["wr_ptr"] = _Nsound.AudioPlaybackRtDebug_wr_ptr_get
    if _newclass:wr_ptr = _swig_property(_Nsound.AudioPlaybackRtDebug_wr_ptr_get, _Nsound.AudioPlaybackRtDebug_wr_ptr_set)
    __swig_setmethods__["rd_ptr"] = _Nsound.AudioPlaybackRtDebug_rd_ptr_set
    __swig_getmethods__["rd_ptr"] = _Nsound.AudioPlaybackRtDebug_rd_ptr_get
    if _newclass:rd_ptr = _swig_property(_Nsound.AudioPlaybackRtDebug_rd_ptr_get, _Nsound.AudioPlaybackRtDebug_rd_ptr_set)
    __swig_setmethods__["samplerate"] = _Nsound.AudioPlaybackRtDebug_samplerate_set
    __swig_getmethods__["samplerate"] = _Nsound.AudioPlaybackRtDebug_samplerate_get
    if _newclass:samplerate = _swig_property(_Nsound.AudioPlaybackRtDebug_samplerate_get, _Nsound.AudioPlaybackRtDebug_samplerate_set)
    __swig_setmethods__["samples_per_buffer"] = _Nsound.AudioPlaybackRtDebug_samples_per_buffer_set
    __swig_getmethods__["samples_per_buffer"] = _Nsound.AudioPlaybackRtDebug_samples_per_buffer_get
    if _newclass:samples_per_buffer = _swig_property(_Nsound.AudioPlaybackRtDebug_samples_per_buffer_get, _Nsound.AudioPlaybackRtDebug_samples_per_buffer_set)
    __swig_setmethods__["is_streaming"] = _Nsound.AudioPlaybackRtDebug_is_streaming_set
    __swig_getmethods__["is_streaming"] = _Nsound.AudioPlaybackRtDebug_is_streaming_get
    if _newclass:is_streaming = _swig_property(_Nsound.AudioPlaybackRtDebug_is_streaming_get, _Nsound.AudioPlaybackRtDebug_is_streaming_set)
    __swig_setmethods__["n_history"] = _Nsound.AudioPlaybackRtDebug_n_history_set
    __swig_getmethods__["n_history"] = _Nsound.AudioPlaybackRtDebug_n_history_get
    if _newclass:n_history = _swig_property(_Nsound.AudioPlaybackRtDebug_n_history_get, _Nsound.AudioPlaybackRtDebug_n_history_set)
    def __str__(self):
        """__str__(AudioPlaybackRtDebug self) -> std::string"""
        return _Nsound.AudioPlaybackRtDebug___str__(self)

    def __init__(self): 
        """__init__(Nsound::AudioPlaybackRtDebug self) -> AudioPlaybackRtDebug"""
        this = _Nsound.new_AudioPlaybackRtDebug()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_AudioPlaybackRtDebug
    __del__ = lambda self : None;
AudioPlaybackRtDebug_swigregister = _Nsound.AudioPlaybackRtDebug_swigregister
AudioPlaybackRtDebug_swigregister(AudioPlaybackRtDebug)

class AudioPlaybackRt(_object):
    """Proxy of C++ Nsound::AudioPlaybackRt class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioPlaybackRt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioPlaybackRt, name)
    __repr__ = _swig_repr
    def use_jack(*args):
        """use_jack(bool flag)"""
        return _Nsound.AudioPlaybackRt_use_jack(*args)

    if _newclass:use_jack = staticmethod(use_jack)
    __swig_getmethods__["use_jack"] = lambda x: use_jack
    def __init__(self, *args): 
        """
        __init__(Nsound::AudioPlaybackRt self, Nsound::float64 sample_rate=44100.0, Nsound::uint32 channels=1, Nsound::uint32 n_buffers=3, 
            Nsound::float64 buffer_size_sec=-1.0) -> AudioPlaybackRt
        __init__(Nsound::AudioPlaybackRt self, Nsound::float64 sample_rate=44100.0, Nsound::uint32 channels=1, Nsound::uint32 n_buffers=3) -> AudioPlaybackRt
        __init__(Nsound::AudioPlaybackRt self, Nsound::float64 sample_rate=44100.0, Nsound::uint32 channels=1) -> AudioPlaybackRt
        __init__(Nsound::AudioPlaybackRt self, Nsound::float64 sample_rate=44100.0) -> AudioPlaybackRt
        __init__(Nsound::AudioPlaybackRt self) -> AudioPlaybackRt
        """
        this = _Nsound.new_AudioPlaybackRt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_AudioPlaybackRt
    __del__ = lambda self : None;
    def getSamplesPerBuffer(self):
        """getSamplesPerBuffer(AudioPlaybackRt self) -> Nsound::uint32"""
        return _Nsound.AudioPlaybackRt_getSamplesPerBuffer(self)

    def getActualLatencySeconds(self):
        """getActualLatencySeconds(AudioPlaybackRt self) -> Nsound::float64"""
        return _Nsound.AudioPlaybackRt_getActualLatencySeconds(self)

    def setBufferUnderrunMode(self, *args):
        """setBufferUnderrunMode(AudioPlaybackRt self, Nsound::BufferUnderrunMode bum)"""
        return _Nsound.AudioPlaybackRt_setBufferUnderrunMode(self, *args)

    def getInfo(self):
        """getInfo(AudioPlaybackRt self) -> std::string"""
        return _Nsound.AudioPlaybackRt_getInfo(self)

    def play(self, *args):
        """
        play(AudioPlaybackRt self, AudioStream a)
        play(AudioPlaybackRt self, Buffer b)
        play(AudioPlaybackRt self, Nsound::float64 sample)
        play(AudioPlaybackRt self, Nsound::float64 left, Nsound::float64 right)
        """
        return _Nsound.AudioPlaybackRt_play(self, *args)

    def stop(self):
        """stop(AudioPlaybackRt self)"""
        return _Nsound.AudioPlaybackRt_stop(self)

    def debug_print(self):
        """debug_print(AudioPlaybackRt self) -> std::string"""
        return _Nsound.AudioPlaybackRt_debug_print(self)

    def get_debug_info(self):
        """get_debug_info(AudioPlaybackRt self) -> AudioPlaybackRtDebug"""
        return _Nsound.AudioPlaybackRt_get_debug_info(self)

    #------------------------------------------------------------------------------
    # from swig/shadowed.i
    #
    def __lshift__(self, rhs):
        self.play(rhs)

    def __rshift__(self, rhs):
        self.play(rhs)

    def __str__(self):
        return "Nsound.AudioPlaybackRt(): %s\n%s" % (self.getInfo(), self.debug_print())

    __repr__ = __str__

    #
    #------------------------------------------------------------------------------



AudioPlaybackRt_swigregister = _Nsound.AudioPlaybackRt_swigregister
AudioPlaybackRt_swigregister(AudioPlaybackRt)

def AudioPlaybackRt_use_jack(*args):
  """AudioPlaybackRt_use_jack(bool flag)"""
  return _Nsound.AudioPlaybackRt_use_jack(*args)

class BufferWindowSearch(_object):
    """Proxy of C++ Nsound::BufferWindowSearch class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferWindowSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferWindowSearch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::BufferWindowSearch self, Buffer buffer, Nsound::uint32 window_size=2048) -> BufferWindowSearch
        __init__(Nsound::BufferWindowSearch self, Buffer buffer) -> BufferWindowSearch
        __init__(Nsound::BufferWindowSearch self, BufferWindowSearch copy) -> BufferWindowSearch
        """
        this = _Nsound.new_BufferWindowSearch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_BufferWindowSearch
    __del__ = lambda self : None;
    def getNextWindow(self):
        """getNextWindow(BufferWindowSearch self) -> Buffer"""
        return _Nsound.BufferWindowSearch_getNextWindow(self)

    def getSamplesLeft(self):
        """getSamplesLeft(BufferWindowSearch self) -> Nsound::uint32"""
        return _Nsound.BufferWindowSearch_getSamplesLeft(self)

    def reset(self):
        """reset(BufferWindowSearch self)"""
        return _Nsound.BufferWindowSearch_reset(self)

    def setBuffer(self, *args):
        """setBuffer(BufferWindowSearch self, Buffer buffer)"""
        return _Nsound.BufferWindowSearch_setBuffer(self, *args)

BufferWindowSearch_swigregister = _Nsound.BufferWindowSearch_swigregister
BufferWindowSearch_swigregister(BufferWindowSearch)

class CircularBuffer(_object):
    """Proxy of C++ Nsound::CircularBuffer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircularBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CircularBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::CircularBuffer self, Nsound::uint32 n_samples) -> CircularBuffer"""
        this = _Nsound.new_CircularBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_CircularBuffer
    __del__ = lambda self : None;
    def read(self):
        """read(CircularBuffer self) -> Buffer"""
        return _Nsound.CircularBuffer_read(self)

    def write(self, *args):
        """
        write(CircularBuffer self, Nsound::float64 d)
        write(CircularBuffer self, AudioStream as)
        write(CircularBuffer self, Buffer b)
        """
        return _Nsound.CircularBuffer_write(self, *args)

CircularBuffer_swigregister = _Nsound.CircularBuffer_swigregister
CircularBuffer_swigregister(CircularBuffer)

class Clarinet(Instrument):
    """Proxy of C++ Nsound::Clarinet class"""
    __swig_setmethods__ = {}
    for _s in [Instrument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clarinet, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Clarinet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::Clarinet self, Nsound::float64 const & sample_rate) -> Clarinet"""
        this = _Nsound.new_Clarinet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Clarinet
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(Clarinet self) -> AudioStream
        play(Clarinet self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(Clarinet self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & presure, 
            Nsound::float64 const & filter, Nsound::float64 const & reed_stiffness) -> AudioStream
        """
        return _Nsound.Clarinet_play(self, *args)

    def getInfo(self):
        """getInfo(Clarinet self) -> std::string"""
        return _Nsound.Clarinet_getInfo(self)

Clarinet_swigregister = _Nsound.Clarinet_swigregister
Clarinet_swigregister(Clarinet)

class DelayLine(_object):
    """Proxy of C++ Nsound::DelayLine class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelayLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DelayLine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::DelayLine self, Nsound::float64 sample_rate, Nsound::float64 max_delay_in_seconds) -> DelayLine"""
        this = _Nsound.new_DelayLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def setRealtime(self, *args):
        """setRealtime(DelayLine self, bool flag)"""
        return _Nsound.DelayLine_setRealtime(self, *args)

    def delay(self, *args):
        """
        delay(DelayLine self, Buffer x, Buffer delay_time) -> Buffer
        delay(DelayLine self, Nsound::float64 x, Nsound::float64 delay_time) -> Nsound::float64
        """
        return _Nsound.DelayLine_delay(self, *args)

    def read(self, *args):
        """
        read(DelayLine self) -> Nsound::float64
        read(DelayLine self, Nsound::float64 delay) -> Nsound::float64
        """
        return _Nsound.DelayLine_read(self, *args)

    def write(self, *args):
        """write(DelayLine self, Nsound::float64 x)"""
        return _Nsound.DelayLine_write(self, *args)

    def reset(self):
        """reset(DelayLine self)"""
        return _Nsound.DelayLine_reset(self)

    __swig_destroy__ = _Nsound.delete_DelayLine
    __del__ = lambda self : None;
DelayLine_swigregister = _Nsound.DelayLine_swigregister
DelayLine_swigregister(DelayLine)

class DrumBD01(Instrument):
    """Proxy of C++ Nsound::DrumBD01 class"""
    __swig_setmethods__ = {}
    for _s in [Instrument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrumBD01, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrumBD01, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::DrumBD01 self, Nsound::float64 const & sample_rate) -> DrumBD01"""
        this = _Nsound.new_DrumBD01(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_DrumBD01
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(DrumBD01 self) -> AudioStream
        play(DrumBD01 self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(DrumBD01 self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & velocity) -> AudioStream
        """
        return _Nsound.DrumBD01_play(self, *args)

    def getInfo(self):
        """getInfo(DrumBD01 self) -> std::string"""
        return _Nsound.DrumBD01_getInfo(self)

DrumBD01_swigregister = _Nsound.DrumBD01_swigregister
DrumBD01_swigregister(DrumBD01)

class DrumKickBass(Instrument):
    """Proxy of C++ Nsound::DrumKickBass class"""
    __swig_setmethods__ = {}
    for _s in [Instrument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrumKickBass, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrumKickBass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::DrumKickBass self, Nsound::float64 const & sample_rate, Nsound::float64 const & high_frequency, Nsound::float64 const & low_frequency) -> DrumKickBass"""
        this = _Nsound.new_DrumKickBass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_DrumKickBass
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(DrumKickBass self) -> AudioStream
        play(DrumKickBass self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(DrumKickBass self, Nsound::float64 const & duration, Nsound::float64 const & high_frequency, Nsound::float64 const & low_frequency) -> AudioStream
        play(DrumKickBass self, Nsound::float64 const & duation, Buffer high_frequency, Buffer low_frequency) -> AudioStream
        """
        return _Nsound.DrumKickBass_play(self, *args)

    def getInfo(self):
        """getInfo(DrumKickBass self) -> std::string"""
        return _Nsound.DrumKickBass_getInfo(self)

DrumKickBass_swigregister = _Nsound.DrumKickBass_swigregister
DrumKickBass_swigregister(DrumKickBass)

class EnvelopeAdsr(_object):
    """Proxy of C++ Nsound::EnvelopeAdsr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvelopeAdsr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnvelopeAdsr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::EnvelopeAdsr self, Nsound::float64 const & sample_rate, Nsound::float64 const & attack_time, Nsound::float64 const & delay_time, 
            Nsound::float64 const & sustain_amplitude, Nsound::float64 const & release_time) -> EnvelopeAdsr
        """
        this = _Nsound.new_EnvelopeAdsr(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self):
        """reset(EnvelopeAdsr self)"""
        return _Nsound.EnvelopeAdsr_reset(self)

    def setAttackTime(self, *args):
        """setAttackTime(EnvelopeAdsr self, Nsound::float64 const & time)"""
        return _Nsound.EnvelopeAdsr_setAttackTime(self, *args)

    def setDelayTime(self, *args):
        """setDelayTime(EnvelopeAdsr self, Nsound::float64 const & time)"""
        return _Nsound.EnvelopeAdsr_setDelayTime(self, *args)

    def setSustainAmplitude(self, *args):
        """setSustainAmplitude(EnvelopeAdsr self, Nsound::float64 const & amp)"""
        return _Nsound.EnvelopeAdsr_setSustainAmplitude(self, *args)

    def setReleaseTime(self, *args):
        """setReleaseTime(EnvelopeAdsr self, Nsound::float64 const & time)"""
        return _Nsound.EnvelopeAdsr_setReleaseTime(self, *args)

    def shape(self, *args):
        """
        shape(EnvelopeAdsr self, AudioStream as) -> AudioStream
        shape(EnvelopeAdsr self, Buffer buf) -> Buffer
        shape(EnvelopeAdsr self, Nsound::float64 sample, bool key_on) -> Nsound::float64
        """
        return _Nsound.EnvelopeAdsr_shape(self, *args)

    def is_done(self):
        """is_done(EnvelopeAdsr self) -> bool"""
        return _Nsound.EnvelopeAdsr_is_done(self)

    __swig_destroy__ = _Nsound.delete_EnvelopeAdsr
    __del__ = lambda self : None;
EnvelopeAdsr_swigregister = _Nsound.EnvelopeAdsr_swigregister
EnvelopeAdsr_swigregister(EnvelopeAdsr)

class FFTransform(_object):
    """Proxy of C++ Nsound::FFTransform class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FFTransform self, Nsound::float64 const & sample_rate) -> FFTransform"""
        this = _Nsound.new_FFTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FFTransform
    __del__ = lambda self : None;
    def fft(self, *args):
        """
        fft(FFTransform self, Buffer time_domain) -> Buffer
        fft(FFTransform self, Buffer input, Nsound::int32 n_order, Nsound::int32 n_overlap=0) -> FFTChunkVectorT
        fft(FFTransform self, Buffer input, Nsound::int32 n_order) -> FFTChunkVectorT
        """
        return _Nsound.FFTransform_fft(self, *args)

    def ifft(self, *args):
        """
        ifft(FFTransform self, FFTChunkVectorT input) -> Buffer
        ifft(FFTransform self, Buffer frequency_domain) -> Buffer
        """
        return _Nsound.FFTransform_ifft(self, *args)

    def roundUp2(*args):
        """roundUp2(Nsound::int32 raw) -> Nsound::int32"""
        return _Nsound.FFTransform_roundUp2(*args)

    if _newclass:roundUp2 = staticmethod(roundUp2)
    __swig_getmethods__["roundUp2"] = lambda x: roundUp2
    def setWindow(self, *args):
        """setWindow(FFTransform self, Nsound::WindowType type)"""
        return _Nsound.FFTransform_setWindow(self, *args)

FFTransform_swigregister = _Nsound.FFTransform_swigregister
FFTransform_swigregister(FFTransform)

def FFTransform_roundUp2(*args):
  """FFTransform_roundUp2(Nsound::int32 raw) -> Nsound::int32"""
  return _Nsound.FFTransform_roundUp2(*args)

class Filter(_object):
    """Proxy of C++ Nsound::Filter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_Filter
    __del__ = lambda self : None;
    def setRealtime(self, *args):
        """setRealtime(Filter self, bool flag)"""
        return _Nsound.Filter_setRealtime(self, *args)

    def filter(self, *args):
        """
        filter(Filter self, AudioStream x) -> AudioStream
        filter(Filter self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(Filter self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(Filter self, Buffer x) -> Buffer
        filter(Filter self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(Filter self, Buffer x, Buffer frequencies) -> Buffer
        filter(Filter self, Nsound::float64 const & x) -> Nsound::float64
        filter(Filter self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.Filter_filter(self, *args)

    def getFrequencyAxis(self, n_fft=8192):
        """
        getFrequencyAxis(Filter self, Nsound::uint32 const n_fft=8192) -> Buffer
        getFrequencyAxis(Filter self) -> Buffer
        """
        return _Nsound.Filter_getFrequencyAxis(self, n_fft)

    def getFrequencyResponse(self, n_fft=8192):
        """
        getFrequencyResponse(Filter self, Nsound::uint32 const n_fft=8192) -> Buffer
        getFrequencyResponse(Filter self) -> Buffer
        """
        return _Nsound.Filter_getFrequencyResponse(self, n_fft)

    def getImpulseResponse(self, n_samples=8192):
        """
        getImpulseResponse(Filter self, Nsound::uint32 const n_samples=8192) -> Buffer
        getImpulseResponse(Filter self) -> Buffer
        """
        return _Nsound.Filter_getImpulseResponse(self, n_samples)

    def getKernelSize(self):
        """getKernelSize(Filter self) -> Nsound::uint32"""
        return _Nsound.Filter_getKernelSize(self)

    def getPhaseResponse(self):
        """getPhaseResponse(Filter self) -> Buffer"""
        return _Nsound.Filter_getPhaseResponse(self)

    def getSampleRate(self):
        """getSampleRate(Filter self) -> Nsound::float64"""
        return _Nsound.Filter_getSampleRate(self)

    def plot(self, show_phase=False):
        """
        plot(Filter self, Nsound::boolean show_phase=False)
        plot(Filter self)
        """
        return _Nsound.Filter_plot(self, show_phase)

    def reset(self):
        """reset(Filter self)"""
        return _Nsound.Filter_reset(self)

Filter_swigregister = _Nsound.Filter_swigregister
Filter_swigregister(Filter)

class FilterAllPass(Filter):
    """Proxy of C++ Nsound::FilterAllPass class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterAllPass, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterAllPass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterAllPass self, Nsound::float64 const & sample_rate, Nsound::float64 const & max_delay_time_seconds, 
            Nsound::float64 const & gain) -> FilterAllPass
        __init__(Nsound::FilterAllPass self, FilterAllPass copy) -> FilterAllPass
        """
        this = _Nsound.new_FilterAllPass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterAllPass
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterAllPass self, AudioStream x) -> AudioStream
        filter(FilterAllPass self, AudioStream x, Nsound::float64 const & delay_in_seconds) -> AudioStream
        filter(FilterAllPass self, AudioStream x, Buffer delay_in_seconds) -> AudioStream
        filter(FilterAllPass self, Buffer x) -> Buffer
        filter(FilterAllPass self, Buffer x, Nsound::float64 const & delay_in_seconds) -> Buffer
        filter(FilterAllPass self, Buffer x, Buffer delay_in_seconds) -> Buffer
        filter(FilterAllPass self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterAllPass self, Nsound::float64 const & x, Nsound::float64 const & delay_in_seconds) -> Nsound::float64
        """
        return _Nsound.FilterAllPass_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterAllPass self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterAllPass self, Nsound::boolean show_fc=True)
        plot(FilterAllPass self)
        """
        return _Nsound.FilterAllPass_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterAllPass self)"""
        return _Nsound.FilterAllPass_reset(self)

FilterAllPass_swigregister = _Nsound.FilterAllPass_swigregister
FilterAllPass_swigregister(FilterAllPass)

class FilterBandPassVocoder(Filter):
    """Proxy of C++ Nsound::FilterBandPassVocoder class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterBandPassVocoder, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterBandPassVocoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FilterBandPassVocoder self, Nsound::float64 const & sample_rate, Nsound::float64 const & frequency_low, Nsound::float64 const & frequency_high) -> FilterBandPassVocoder"""
        this = _Nsound.new_FilterBandPassVocoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterBandPassVocoder
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterBandPassVocoder self, AudioStream x) -> AudioStream
        filter(FilterBandPassVocoder self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterBandPassVocoder self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandPassVocoder self, Buffer x) -> Buffer
        filter(FilterBandPassVocoder self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterBandPassVocoder self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandPassVocoder self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandPassVocoder self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandPassVocoder self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandPassVocoder_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterBandPassVocoder self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterBandPassVocoder self, Nsound::boolean show_fc=True)
        plot(FilterBandPassVocoder self)
        """
        return _Nsound.FilterBandPassVocoder_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterBandPassVocoder self)"""
        return _Nsound.FilterBandPassVocoder_reset(self)

FilterBandPassVocoder_swigregister = _Nsound.FilterBandPassVocoder_swigregister
FilterBandPassVocoder_swigregister(FilterBandPassVocoder)

class FilterCombLowPassFeedback(Filter):
    """Proxy of C++ Nsound::FilterCombLowPassFeedback class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterCombLowPassFeedback, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterCombLowPassFeedback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterCombLowPassFeedback self, Nsound::float64 const & sample_rate, Nsound::float64 const & delay_time_seconds, 
            Nsound::float64 const & feedback_gain, Nsound::float64 const & low_pass_frequency_Hz) -> FilterCombLowPassFeedback
        __init__(Nsound::FilterCombLowPassFeedback self, FilterCombLowPassFeedback copy) -> FilterCombLowPassFeedback
        """
        this = _Nsound.new_FilterCombLowPassFeedback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterCombLowPassFeedback
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterCombLowPassFeedback self, AudioStream x) -> AudioStream
        filter(FilterCombLowPassFeedback self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterCombLowPassFeedback self, Buffer x) -> Buffer
        filter(FilterCombLowPassFeedback self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterCombLowPassFeedback self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterCombLowPassFeedback self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterCombLowPassFeedback_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterCombLowPassFeedback self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterCombLowPassFeedback self, Nsound::boolean show_fc=True)
        plot(FilterCombLowPassFeedback self)
        """
        return _Nsound.FilterCombLowPassFeedback_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterCombLowPassFeedback self)"""
        return _Nsound.FilterCombLowPassFeedback_reset(self)

FilterCombLowPassFeedback_swigregister = _Nsound.FilterCombLowPassFeedback_swigregister
FilterCombLowPassFeedback_swigregister(FilterCombLowPassFeedback)

class FilterDelay(Filter):
    """Proxy of C++ Nsound::FilterDelay class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterDelay, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterDelay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterDelay self, Nsound::float64 const & sample_rate, Nsound::float64 const & max_delay_time_seconds) -> FilterDelay
        __init__(Nsound::FilterDelay self, FilterDelay copy) -> FilterDelay
        """
        this = _Nsound.new_FilterDelay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterDelay
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterDelay self, AudioStream x) -> AudioStream
        filter(FilterDelay self, AudioStream x, Nsound::float64 const & delay_in_seconds) -> AudioStream
        filter(FilterDelay self, AudioStream x, Buffer delay_in_seconds) -> AudioStream
        filter(FilterDelay self, Buffer x) -> Buffer
        filter(FilterDelay self, Buffer x, Nsound::float64 const & delay_in_seconds) -> Buffer
        filter(FilterDelay self, Buffer x, Buffer delay_in_seconds) -> Buffer
        filter(FilterDelay self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterDelay self, Nsound::float64 const & x, Nsound::float64 const & delay_in_seconds) -> Nsound::float64
        """
        return _Nsound.FilterDelay_filter(self, *args)

    def reset(self):
        """reset(FilterDelay self)"""
        return _Nsound.FilterDelay_reset(self)

FilterDelay_swigregister = _Nsound.FilterDelay_swigregister
FilterDelay_swigregister(FilterDelay)

class FilterDC(_object):
    """Proxy of C++ Nsound::FilterDC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterDC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterDC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FilterDC self, Nsound::float64 const & feedback_gain) -> FilterDC"""
        this = _Nsound.new_FilterDC(*args)
        try: self.this.append(this)
        except: self.this = this
    def filter(self, *args):
        """
        filter(FilterDC self, AudioStream x) -> AudioStream
        filter(FilterDC self, Buffer x) -> Buffer
        filter(FilterDC self, Nsound::float64 const & x) -> Nsound::float64
        """
        return _Nsound.FilterDC_filter(self, *args)

    __swig_destroy__ = _Nsound.delete_FilterDC
    __del__ = lambda self : None;
FilterDC_swigregister = _Nsound.FilterDC_swigregister
FilterDC_swigregister(FilterDC)

class FilterIIR(Filter):
    """Proxy of C++ Nsound::FilterIIR class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterIIR, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterIIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles) -> FilterIIR
        __init__(Nsound::FilterIIR self, FilterIIR copy) -> FilterIIR
        """
        this = _Nsound.new_FilterIIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterIIR
    __del__ = lambda self : None;
    def designFrequencyResponse(self, *args):
        """
        designFrequencyResponse(FilterIIR self, Buffer frequency_response, Nsound::float64 const & max_error=0.01, Nsound::int32 const max_iterations=1000) -> Buffer
        designFrequencyResponse(FilterIIR self, Buffer frequency_response, Nsound::float64 const & max_error=0.01) -> Buffer
        designFrequencyResponse(FilterIIR self, Buffer frequency_response) -> Buffer
        """
        return _Nsound.FilterIIR_designFrequencyResponse(self, *args)

    def designImpulseResponse(self, *args):
        """
        designImpulseResponse(FilterIIR self, Buffer impulse_response, Nsound::float64 const & max_error=0.01, Nsound::int32 const max_iterations=1000) -> Buffer
        designImpulseResponse(FilterIIR self, Buffer impulse_response, Nsound::float64 const & max_error=0.01) -> Buffer
        designImpulseResponse(FilterIIR self, Buffer impulse_response) -> Buffer
        """
        return _Nsound.FilterIIR_designImpulseResponse(self, *args)

    def filter(self, *args):
        """
        filter(FilterIIR self, AudioStream x) -> AudioStream
        filter(FilterIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterIIR self, Buffer x) -> Buffer
        filter(FilterIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterIIR_filter(self, *args)

    def getKernelSize(self):
        """getKernelSize(FilterIIR self) -> Nsound::uint32"""
        return _Nsound.FilterIIR_getKernelSize(self)

    def getImpulseResponse(self, n_samples=8192):
        """
        getImpulseResponse(FilterIIR self, Nsound::uint32 const n_samples=8192) -> Buffer
        getImpulseResponse(FilterIIR self) -> Buffer
        """
        return _Nsound.FilterIIR_getImpulseResponse(self, n_samples)

    def reset(self):
        """reset(FilterIIR self)"""
        return _Nsound.FilterIIR_reset(self)

FilterIIR_swigregister = _Nsound.FilterIIR_swigregister
FilterIIR_swigregister(FilterIIR)

class FilterStageIIR(Filter):
    """Proxy of C++ Nsound::FilterStageIIR class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterStageIIR, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterStageIIR, name)
    __repr__ = _swig_repr
    LOW_PASS = _Nsound.FilterStageIIR_LOW_PASS
    HIGH_PASS = _Nsound.FilterStageIIR_HIGH_PASS
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterStageIIR self, Nsound::FilterStageIIR::Type type, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, 
            Nsound::float64 const & frequency, Nsound::float64 const & percent_ripple) -> FilterStageIIR
        __init__(Nsound::FilterStageIIR self, FilterStageIIR copy) -> FilterStageIIR
        """
        this = _Nsound.new_FilterStageIIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterStageIIR
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterStageIIR self, AudioStream x) -> AudioStream
        filter(FilterStageIIR self, AudioStream x, Nsound::float64 const & f) -> AudioStream
        filter(FilterStageIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterStageIIR self, Buffer x) -> Buffer
        filter(FilterStageIIR self, Buffer x, Nsound::float64 const & f) -> Buffer
        filter(FilterStageIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterStageIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterStageIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterStageIIR_filter(self, *args)

    def makeKernel(self, *args):
        """makeKernel(FilterStageIIR self, Nsound::float64 const & frequency)"""
        return _Nsound.FilterStageIIR_makeKernel(self, *args)

    def reset(self):
        """reset(FilterStageIIR self)"""
        return _Nsound.FilterStageIIR_reset(self)

FilterStageIIR_swigregister = _Nsound.FilterStageIIR_swigregister
FilterStageIIR_swigregister(FilterStageIIR)

class FilterLeastSquaresFIR(Filter):
    """Proxy of C++ Nsound::FilterLeastSquaresFIR class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterLeastSquaresFIR, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterLeastSquaresFIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterLeastSquaresFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Buffer freq_axis, 
            Buffer amplitude_axis, Nsound::float64 const & beta=5.0) -> FilterLeastSquaresFIR
        __init__(Nsound::FilterLeastSquaresFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Buffer freq_axis, 
            Buffer amplitude_axis) -> FilterLeastSquaresFIR
        __init__(Nsound::FilterLeastSquaresFIR self, FilterLeastSquaresFIR copy) -> FilterLeastSquaresFIR
        """
        this = _Nsound.new_FilterLeastSquaresFIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterLeastSquaresFIR
    __del__ = lambda self : None;
    def getKernel(self):
        """getKernel(FilterLeastSquaresFIR self) -> Buffer"""
        return _Nsound.FilterLeastSquaresFIR_getKernel(self)

    def setKernel(self, *args):
        """setKernel(FilterLeastSquaresFIR self, Buffer k)"""
        return _Nsound.FilterLeastSquaresFIR_setKernel(self, *args)

    def getKernelFrequencies(self):
        """getKernelFrequencies(FilterLeastSquaresFIR self) -> Buffer"""
        return _Nsound.FilterLeastSquaresFIR_getKernelFrequencies(self)

    def getKernelAmplitudes(self):
        """getKernelAmplitudes(FilterLeastSquaresFIR self) -> Buffer"""
        return _Nsound.FilterLeastSquaresFIR_getKernelAmplitudes(self)

    def filter(self, *args):
        """
        filter(FilterLeastSquaresFIR self, AudioStream x) -> AudioStream
        filter(FilterLeastSquaresFIR self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterLeastSquaresFIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterLeastSquaresFIR self, Buffer x) -> Buffer
        filter(FilterLeastSquaresFIR self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterLeastSquaresFIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterLeastSquaresFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterLeastSquaresFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        """
        return _Nsound.FilterLeastSquaresFIR_filter(self, *args)

    def getImpulseResponse(self):
        """getImpulseResponse(FilterLeastSquaresFIR self) -> Buffer"""
        return _Nsound.FilterLeastSquaresFIR_getImpulseResponse(self)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterLeastSquaresFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterLeastSquaresFIR self, Nsound::boolean show_fc=True)
        plot(FilterLeastSquaresFIR self)
        """
        return _Nsound.FilterLeastSquaresFIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterLeastSquaresFIR self)"""
        return _Nsound.FilterLeastSquaresFIR_reset(self)

    def setWindow(self, *args):
        """setWindow(FilterLeastSquaresFIR self, Nsound::WindowType type)"""
        return _Nsound.FilterLeastSquaresFIR_setWindow(self, *args)

    def makeKernel(self, *args):
        """makeKernel(FilterLeastSquaresFIR self, Buffer freq_axis, Buffer amplitude_axis)"""
        return _Nsound.FilterLeastSquaresFIR_makeKernel(self, *args)

FilterLeastSquaresFIR_swigregister = _Nsound.FilterLeastSquaresFIR_swigregister
FilterLeastSquaresFIR_swigregister(FilterLeastSquaresFIR)

class FilterLowPassFIR(Filter):
    """Proxy of C++ Nsound::FilterLowPassFIR class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterLowPassFIR, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterLowPassFIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FilterLowPassFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & cutoff_frequency_Hz) -> FilterLowPassFIR"""
        this = _Nsound.new_FilterLowPassFIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterLowPassFIR
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterLowPassFIR self, AudioStream x) -> AudioStream
        filter(FilterLowPassFIR self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterLowPassFIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterLowPassFIR self, Buffer x) -> Buffer
        filter(FilterLowPassFIR self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterLowPassFIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterLowPassFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterLowPassFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        """
        return _Nsound.FilterLowPassFIR_filter(self, *args)

    def getFrequency(self):
        """getFrequency(FilterLowPassFIR self) -> Nsound::float64"""
        return _Nsound.FilterLowPassFIR_getFrequency(self)

    def getImpulseResponse(self):
        """getImpulseResponse(FilterLowPassFIR self) -> Buffer"""
        return _Nsound.FilterLowPassFIR_getImpulseResponse(self)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterLowPassFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterLowPassFIR self, Nsound::boolean show_fc=True)
        plot(FilterLowPassFIR self)
        """
        return _Nsound.FilterLowPassFIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterLowPassFIR self)"""
        return _Nsound.FilterLowPassFIR_reset(self)

    def setCutoff(self, *args):
        """setCutoff(FilterLowPassFIR self, Nsound::float64 const & fc)"""
        return _Nsound.FilterLowPassFIR_setCutoff(self, *args)

FilterLowPassFIR_swigregister = _Nsound.FilterLowPassFIR_swigregister
FilterLowPassFIR_swigregister(FilterLowPassFIR)

class FilterLowPassIIR(FilterStageIIR):
    """Proxy of C++ Nsound::FilterLowPassIIR class"""
    __swig_setmethods__ = {}
    for _s in [FilterStageIIR]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterLowPassIIR, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterStageIIR]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterLowPassIIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterLowPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency, 
            Nsound::float64 const & percent_ripple=0.0) -> FilterLowPassIIR
        __init__(Nsound::FilterLowPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency) -> FilterLowPassIIR
        """
        this = _Nsound.new_FilterLowPassIIR(*args)
        try: self.this.append(this)
        except: self.this = this
    def filter(self, *args):
        """
        filter(FilterLowPassIIR self, AudioStream x) -> AudioStream
        filter(FilterLowPassIIR self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterLowPassIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterLowPassIIR self, Buffer x) -> Buffer
        filter(FilterLowPassIIR self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterLowPassIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterLowPassIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterLowPassIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterLowPassIIR_filter(self, *args)

    def getFrequency(self):
        """getFrequency(FilterLowPassIIR self) -> Nsound::float64"""
        return _Nsound.FilterLowPassIIR_getFrequency(self)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterLowPassIIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterLowPassIIR self, Nsound::boolean show_fc=True)
        plot(FilterLowPassIIR self)
        """
        return _Nsound.FilterLowPassIIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterLowPassIIR self)"""
        return _Nsound.FilterLowPassIIR_reset(self)

    def setCutoff(self, *args):
        """setCutoff(FilterLowPassIIR self, Nsound::float64 const & fc)"""
        return _Nsound.FilterLowPassIIR_setCutoff(self, *args)

    __swig_destroy__ = _Nsound.delete_FilterLowPassIIR
    __del__ = lambda self : None;
FilterLowPassIIR_swigregister = _Nsound.FilterLowPassIIR_swigregister
FilterLowPassIIR_swigregister(FilterLowPassIIR)

class FilterLowPassMoogVcf(Filter):
    """Proxy of C++ Nsound::FilterLowPassMoogVcf class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterLowPassMoogVcf, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterLowPassMoogVcf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FilterLowPassMoogVcf self, Nsound::float64 const & sample_rate, Nsound::float64 const & cutoff_hz, Nsound::float64 const & resonance) -> FilterLowPassMoogVcf"""
        this = _Nsound.new_FilterLowPassMoogVcf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterLowPassMoogVcf
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterLowPassMoogVcf self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterLowPassMoogVcf self, Nsound::float64 const & x, Nsound::float64 const & cutoff_hz) -> Nsound::float64
        filter(FilterLowPassMoogVcf self, Nsound::float64 const & x, Nsound::float64 const & cutoff_hz, Nsound::float64 const & resonance) -> Nsound::float64
        """
        return _Nsound.FilterLowPassMoogVcf_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterLowPassMoogVcf self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterLowPassMoogVcf self, Nsound::boolean show_fc=True)
        plot(FilterLowPassMoogVcf self)
        """
        return _Nsound.FilterLowPassMoogVcf_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterLowPassMoogVcf self)"""
        return _Nsound.FilterLowPassMoogVcf_reset(self)

FilterLowPassMoogVcf_swigregister = _Nsound.FilterLowPassMoogVcf_swigregister
FilterLowPassMoogVcf_swigregister(FilterLowPassMoogVcf)

class FilterHighPassFIR(FilterLowPassFIR):
    """Proxy of C++ Nsound::FilterHighPassFIR class"""
    __swig_setmethods__ = {}
    for _s in [FilterLowPassFIR]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterHighPassFIR, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterLowPassFIR]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterHighPassFIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FilterHighPassFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & cutoff_frequency_Hz) -> FilterHighPassFIR"""
        this = _Nsound.new_FilterHighPassFIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterHighPassFIR
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterHighPassFIR self, AudioStream x) -> AudioStream
        filter(FilterHighPassFIR self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterHighPassFIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterHighPassFIR self, Buffer x) -> Buffer
        filter(FilterHighPassFIR self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterHighPassFIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterHighPassFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterHighPassFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        """
        return _Nsound.FilterHighPassFIR_filter(self, *args)

    def getFrequency(self):
        """getFrequency(FilterHighPassFIR self) -> Nsound::float64"""
        return _Nsound.FilterHighPassFIR_getFrequency(self)

    def getImpulseResponse(self):
        """getImpulseResponse(FilterHighPassFIR self) -> Buffer"""
        return _Nsound.FilterHighPassFIR_getImpulseResponse(self)

    def makeKernel(self, *args):
        """makeKernel(FilterHighPassFIR self, Nsound::float64 const & frequency)"""
        return _Nsound.FilterHighPassFIR_makeKernel(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterHighPassFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterHighPassFIR self, Nsound::boolean show_fc=True)
        plot(FilterHighPassFIR self)
        """
        return _Nsound.FilterHighPassFIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterHighPassFIR self)"""
        return _Nsound.FilterHighPassFIR_reset(self)

FilterHighPassFIR_swigregister = _Nsound.FilterHighPassFIR_swigregister
FilterHighPassFIR_swigregister(FilterHighPassFIR)

class FilterHighPassIIR(FilterStageIIR):
    """Proxy of C++ Nsound::FilterHighPassIIR class"""
    __swig_setmethods__ = {}
    for _s in [FilterStageIIR]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterHighPassIIR, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterStageIIR]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterHighPassIIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterHighPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency, 
            Nsound::float64 const & percent_ripple=0.0) -> FilterHighPassIIR
        __init__(Nsound::FilterHighPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency) -> FilterHighPassIIR
        """
        this = _Nsound.new_FilterHighPassIIR(*args)
        try: self.this.append(this)
        except: self.this = this
    def filter(self, *args):
        """
        filter(FilterHighPassIIR self, AudioStream x) -> AudioStream
        filter(FilterHighPassIIR self, AudioStream x, Nsound::float64 const & f) -> AudioStream
        filter(FilterHighPassIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterHighPassIIR self, Buffer x) -> Buffer
        filter(FilterHighPassIIR self, Buffer x, Nsound::float64 const & f) -> Buffer
        filter(FilterHighPassIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterHighPassIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterHighPassIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterHighPassIIR_filter(self, *args)

    def getFrequency(self):
        """getFrequency(FilterHighPassIIR self) -> Nsound::float64"""
        return _Nsound.FilterHighPassIIR_getFrequency(self)

    def makeKernel(self, *args):
        """makeKernel(FilterHighPassIIR self, Nsound::float64 const & frequency)"""
        return _Nsound.FilterHighPassIIR_makeKernel(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterHighPassIIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterHighPassIIR self, Nsound::boolean show_fc=True)
        plot(FilterHighPassIIR self)
        """
        return _Nsound.FilterHighPassIIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterHighPassIIR self)"""
        return _Nsound.FilterHighPassIIR_reset(self)

    __swig_destroy__ = _Nsound.delete_FilterHighPassIIR
    __del__ = lambda self : None;
FilterHighPassIIR_swigregister = _Nsound.FilterHighPassIIR_swigregister
FilterHighPassIIR_swigregister(FilterHighPassIIR)

class FilterBandRejectFIR(FilterHighPassFIR):
    """Proxy of C++ Nsound::FilterBandRejectFIR class"""
    __swig_setmethods__ = {}
    for _s in [FilterHighPassFIR]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterBandRejectFIR, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterHighPassFIR]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterBandRejectFIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterBandRejectFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & frequency_Hz_low, 
            Nsound::float64 const & frequency_Hz_high) -> FilterBandRejectFIR
        """
        this = _Nsound.new_FilterBandRejectFIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterBandRejectFIR
    __del__ = lambda self : None;
    def getFrequencyLow(self):
        """getFrequencyLow(FilterBandRejectFIR self) -> Nsound::float64"""
        return _Nsound.FilterBandRejectFIR_getFrequencyLow(self)

    def getFrequencyHigh(self):
        """getFrequencyHigh(FilterBandRejectFIR self) -> Nsound::float64"""
        return _Nsound.FilterBandRejectFIR_getFrequencyHigh(self)

    def filter(self, *args):
        """
        filter(FilterBandRejectFIR self, AudioStream x) -> AudioStream
        filter(FilterBandRejectFIR self, AudioStream x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> AudioStream
        filter(FilterBandRejectFIR self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandRejectFIR self, Buffer x) -> Buffer
        filter(FilterBandRejectFIR self, Buffer x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> Buffer
        filter(FilterBandRejectFIR self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandRejectFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandRejectFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandRejectFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandRejectFIR_filter(self, *args)

    def makeKernel(self, *args):
        """makeKernel(FilterBandRejectFIR self, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high)"""
        return _Nsound.FilterBandRejectFIR_makeKernel(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterBandRejectFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterBandRejectFIR self, Nsound::boolean show_fc=True)
        plot(FilterBandRejectFIR self)
        """
        return _Nsound.FilterBandRejectFIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterBandRejectFIR self)"""
        return _Nsound.FilterBandRejectFIR_reset(self)

FilterBandRejectFIR_swigregister = _Nsound.FilterBandRejectFIR_swigregister
FilterBandRejectFIR_swigregister(FilterBandRejectFIR)

class FilterBandRejectIIR(Filter):
    """Proxy of C++ Nsound::FilterBandRejectIIR class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterBandRejectIIR, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterBandRejectIIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterBandRejectIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency_Hz_low, 
            Nsound::float64 const & frequency_Hz_high, Nsound::float64 const & percent_ripple=0.0) -> FilterBandRejectIIR
        __init__(Nsound::FilterBandRejectIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency_Hz_low, 
            Nsound::float64 const & frequency_Hz_high) -> FilterBandRejectIIR
        """
        this = _Nsound.new_FilterBandRejectIIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterBandRejectIIR
    __del__ = lambda self : None;
    def getFrequencyLow(self):
        """getFrequencyLow(FilterBandRejectIIR self) -> Nsound::float64"""
        return _Nsound.FilterBandRejectIIR_getFrequencyLow(self)

    def getFrequencyHigh(self):
        """getFrequencyHigh(FilterBandRejectIIR self) -> Nsound::float64"""
        return _Nsound.FilterBandRejectIIR_getFrequencyHigh(self)

    def filter(self, *args):
        """
        filter(FilterBandRejectIIR self, AudioStream x) -> AudioStream
        filter(FilterBandRejectIIR self, AudioStream x, Nsound::float64 const & f) -> AudioStream
        filter(FilterBandRejectIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterBandRejectIIR self, AudioStream x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> AudioStream
        filter(FilterBandRejectIIR self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandRejectIIR self, Buffer x) -> Buffer
        filter(FilterBandRejectIIR self, Buffer x, Nsound::float64 const & f) -> Buffer
        filter(FilterBandRejectIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterBandRejectIIR self, Buffer x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> Buffer
        filter(FilterBandRejectIIR self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandRejectIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandRejectIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandRejectIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandRejectIIR_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterBandRejectIIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterBandRejectIIR self, Nsound::boolean show_fc=True)
        plot(FilterBandRejectIIR self)
        """
        return _Nsound.FilterBandRejectIIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterBandRejectIIR self)"""
        return _Nsound.FilterBandRejectIIR_reset(self)

FilterBandRejectIIR_swigregister = _Nsound.FilterBandRejectIIR_swigregister
FilterBandRejectIIR_swigregister(FilterBandRejectIIR)

class FilterBandPassFIR(Filter):
    """Proxy of C++ Nsound::FilterBandPassFIR class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterBandPassFIR, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterBandPassFIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterBandPassFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & frequency_Hz_low, 
            Nsound::float64 const & frequency_Hz_high) -> FilterBandPassFIR
        """
        this = _Nsound.new_FilterBandPassFIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterBandPassFIR
    __del__ = lambda self : None;
    def getFrequencyLow(self):
        """getFrequencyLow(FilterBandPassFIR self) -> Nsound::float64"""
        return _Nsound.FilterBandPassFIR_getFrequencyLow(self)

    def getFrequencyHigh(self):
        """getFrequencyHigh(FilterBandPassFIR self) -> Nsound::float64"""
        return _Nsound.FilterBandPassFIR_getFrequencyHigh(self)

    def filter(self, *args):
        """
        filter(FilterBandPassFIR self, AudioStream x) -> AudioStream
        filter(FilterBandPassFIR self, AudioStream x, Nsound::float64 const & low_frequencies, Nsound::float64 const & high_frequencies) -> AudioStream
        filter(FilterBandPassFIR self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandPassFIR self, Buffer x) -> Buffer
        filter(FilterBandPassFIR self, Buffer x, Nsound::float64 const & frequencies_Hz_low, Nsound::float64 const & frequencies_Hz_high) -> Buffer
        filter(FilterBandPassFIR self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandPassFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandPassFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandPassFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandPassFIR_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterBandPassFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterBandPassFIR self, Nsound::boolean show_fc=True)
        plot(FilterBandPassFIR self)
        """
        return _Nsound.FilterBandPassFIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterBandPassFIR self)"""
        return _Nsound.FilterBandPassFIR_reset(self)

FilterBandPassFIR_swigregister = _Nsound.FilterBandPassFIR_swigregister
FilterBandPassFIR_swigregister(FilterBandPassFIR)

class FilterBandPassIIR(Filter):
    """Proxy of C++ Nsound::FilterBandPassIIR class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterBandPassIIR, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterBandPassIIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterBandPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & frequency_Hz_low, 
            Nsound::float64 const & frequency_Hz_high, Nsound::float64 const & percent_ripple=0.0) -> FilterBandPassIIR
        __init__(Nsound::FilterBandPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & frequency_Hz_low, 
            Nsound::float64 const & frequency_Hz_high) -> FilterBandPassIIR
        """
        this = _Nsound.new_FilterBandPassIIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterBandPassIIR
    __del__ = lambda self : None;
    def getFrequencyLow(self):
        """getFrequencyLow(FilterBandPassIIR self) -> Nsound::float64"""
        return _Nsound.FilterBandPassIIR_getFrequencyLow(self)

    def getFrequencyHigh(self):
        """getFrequencyHigh(FilterBandPassIIR self) -> Nsound::float64"""
        return _Nsound.FilterBandPassIIR_getFrequencyHigh(self)

    def filter(self, *args):
        """
        filter(FilterBandPassIIR self, AudioStream x) -> AudioStream
        filter(FilterBandPassIIR self, AudioStream x, Nsound::float64 const & f) -> AudioStream
        filter(FilterBandPassIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterBandPassIIR self, AudioStream x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> AudioStream
        filter(FilterBandPassIIR self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandPassIIR self, Buffer x) -> Buffer
        filter(FilterBandPassIIR self, Buffer x, Nsound::float64 const & f) -> Buffer
        filter(FilterBandPassIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterBandPassIIR self, Buffer x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> Buffer
        filter(FilterBandPassIIR self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandPassIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandPassIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandPassIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandPassIIR_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterBandPassIIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterBandPassIIR self, Nsound::boolean show_fc=True)
        plot(FilterBandPassIIR self)
        """
        return _Nsound.FilterBandPassIIR_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterBandPassIIR self)"""
        return _Nsound.FilterBandPassIIR_reset(self)

FilterBandPassIIR_swigregister = _Nsound.FilterBandPassIIR_swigregister
FilterBandPassIIR_swigregister(FilterBandPassIIR)

class FilterMovingAverage(Filter):
    """Proxy of C++ Nsound::FilterMovingAverage class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterMovingAverage, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterMovingAverage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterMovingAverage self, Nsound::uint32 n_samples_to_average) -> FilterMovingAverage
        __init__(Nsound::FilterMovingAverage self, FilterMovingAverage copy) -> FilterMovingAverage
        """
        this = _Nsound.new_FilterMovingAverage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterMovingAverage
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterMovingAverage self, AudioStream x) -> AudioStream
        filter(FilterMovingAverage self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterMovingAverage self, Buffer x) -> Buffer
        filter(FilterMovingAverage self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterMovingAverage self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterMovingAverage self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterMovingAverage_filter(self, *args)

    def reset(self):
        """reset(FilterMovingAverage self)"""
        return _Nsound.FilterMovingAverage_reset(self)

FilterMovingAverage_swigregister = _Nsound.FilterMovingAverage_swigregister
FilterMovingAverage_swigregister(FilterMovingAverage)

class FilterFlanger(Filter):
    """Proxy of C++ Nsound::FilterFlanger class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterFlanger, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterFlanger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterFlanger self, Nsound::float64 const & sample_rate, Nsound::float64 const & frequency, Nsound::float64 const & max_delay_time_seconds) -> FilterFlanger
        __init__(Nsound::FilterFlanger self, FilterFlanger copy) -> FilterFlanger
        """
        this = _Nsound.new_FilterFlanger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterFlanger
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterFlanger self, AudioStream x) -> AudioStream
        filter(FilterFlanger self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterFlanger self, AudioStream x, Nsound::float64 const & frequency, Nsound::float64 const & delay) -> AudioStream
        filter(FilterFlanger self, AudioStream x, Buffer frequency, Buffer delay) -> AudioStream
        filter(FilterFlanger self, Buffer x) -> Buffer
        filter(FilterFlanger self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterFlanger self, Buffer x, Nsound::float64 const & frequency, Nsound::float64 const & delay) -> Buffer
        filter(FilterFlanger self, Buffer x, Buffer frequency, Buffer delay) -> Buffer
        filter(FilterFlanger self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterFlanger self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        filter(FilterFlanger self, Nsound::float64 const & x, Nsound::float64 const & frequency, Nsound::float64 const & delay) -> Nsound::float64
        """
        return _Nsound.FilterFlanger_filter(self, *args)

    def plot(self, show_fc=False, show_phase=False):
        """
        plot(FilterFlanger self, Nsound::boolean show_fc=False, Nsound::boolean show_phase=False)
        plot(FilterFlanger self, Nsound::boolean show_fc=False)
        plot(FilterFlanger self)
        """
        return _Nsound.FilterFlanger_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterFlanger self)"""
        return _Nsound.FilterFlanger_reset(self)

FilterFlanger_swigregister = _Nsound.FilterFlanger_swigregister
FilterFlanger_swigregister(FilterFlanger)

class FilterParametricEqualizer(Filter):
    """Proxy of C++ Nsound::FilterParametricEqualizer class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterParametricEqualizer, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterParametricEqualizer, name)
    __repr__ = _swig_repr
    PEAKING = _Nsound.FilterParametricEqualizer_PEAKING
    LOW_SHELF = _Nsound.FilterParametricEqualizer_LOW_SHELF
    HIGH_SHELF = _Nsound.FilterParametricEqualizer_HIGH_SHELF
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterParametricEqualizer self, Nsound::FilterParametricEqualizer::Type const & type, Nsound::float64 const & sample_rate, 
            Nsound::float64 const & frequency, Nsound::float64 const & resonance=0.707106781187, 
            Nsound::float64 const & boost_dB=0.0) -> FilterParametricEqualizer
        __init__(Nsound::FilterParametricEqualizer self, Nsound::FilterParametricEqualizer::Type const & type, Nsound::float64 const & sample_rate, 
            Nsound::float64 const & frequency, Nsound::float64 const & resonance=0.707106781187) -> FilterParametricEqualizer
        __init__(Nsound::FilterParametricEqualizer self, Nsound::FilterParametricEqualizer::Type const & type, Nsound::float64 const & sample_rate, 
            Nsound::float64 const & frequency) -> FilterParametricEqualizer
        """
        this = _Nsound.new_FilterParametricEqualizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterParametricEqualizer
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterParametricEqualizer self, AudioStream x) -> AudioStream
        filter(FilterParametricEqualizer self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterParametricEqualizer self, AudioStream x, Buffer frequencies, Buffer resonance) -> AudioStream
        filter(FilterParametricEqualizer self, AudioStream x, Buffer frequencies, Buffer resonance, Buffer boost_dB) -> AudioStream
        filter(FilterParametricEqualizer self, Buffer x) -> Buffer
        filter(FilterParametricEqualizer self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterParametricEqualizer self, Buffer x, Buffer frequencies, Buffer resonance) -> Buffer
        filter(FilterParametricEqualizer self, Buffer x, Buffer frequencies, Buffer resonance, Buffer boost_dB) -> Buffer
        filter(FilterParametricEqualizer self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterParametricEqualizer self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        filter(FilterParametricEqualizer self, Nsound::float64 const & x, Nsound::float64 const & frequency, Nsound::float64 const & resonance) -> Nsound::float64
        filter(FilterParametricEqualizer self, Nsound::float64 const & x, Nsound::float64 const & frequency, Nsound::float64 const & resonance, 
            Nsound::float64 const & boost_dB) -> Nsound::float64
        """
        return _Nsound.FilterParametricEqualizer_filter(self, *args)

    def makeKernel(self, *args):
        """makeKernel(FilterParametricEqualizer self, Nsound::float64 const & frequency, Nsound::float64 const & resonance, Nsound::float64 const & boost)"""
        return _Nsound.FilterParametricEqualizer_makeKernel(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterParametricEqualizer self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterParametricEqualizer self, Nsound::boolean show_fc=True)
        plot(FilterParametricEqualizer self)
        """
        return _Nsound.FilterParametricEqualizer_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterParametricEqualizer self)"""
        return _Nsound.FilterParametricEqualizer_reset(self)

FilterParametricEqualizer_swigregister = _Nsound.FilterParametricEqualizer_swigregister
FilterParametricEqualizer_swigregister(FilterParametricEqualizer)

class FilterPhaser(Filter):
    """Proxy of C++ Nsound::FilterPhaser class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterPhaser, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterPhaser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::FilterPhaser self, Nsound::float64 const & sample_rate, Nsound::uint32 const n_stages, Nsound::float64 const & frequency, 
            Nsound::float64 const & frequency_step_per_stage, Nsound::float64 const & max_delay_in_seconds) -> FilterPhaser
        __init__(Nsound::FilterPhaser self, FilterPhaser copy) -> FilterPhaser
        """
        this = _Nsound.new_FilterPhaser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterPhaser
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterPhaser self, AudioStream x) -> AudioStream
        filter(FilterPhaser self, Buffer x) -> Buffer
        filter(FilterPhaser self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterPhaser self, Nsound::float64 const & x, Nsound::float64 const & ignored) -> Nsound::float64
        """
        return _Nsound.FilterPhaser_filter(self, *args)

    def plot(self, show_fc=False, show_phase=False):
        """
        plot(FilterPhaser self, Nsound::boolean show_fc=False, Nsound::boolean show_phase=False)
        plot(FilterPhaser self, Nsound::boolean show_fc=False)
        plot(FilterPhaser self)
        """
        return _Nsound.FilterPhaser_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterPhaser self)"""
        return _Nsound.FilterPhaser_reset(self)

FilterPhaser_swigregister = _Nsound.FilterPhaser_swigregister
FilterPhaser_swigregister(FilterPhaser)

class FilterSlinky(Filter):
    """Proxy of C++ Nsound::FilterSlinky class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterSlinky, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterSlinky, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FilterSlinky self, Nsound::float64 const & sample_rate, Nsound::float64 const & delay_time, Nsound::float64 const & frequency_window) -> FilterSlinky"""
        this = _Nsound.new_FilterSlinky(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterSlinky
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterSlinky self, AudioStream x) -> AudioStream
        filter(FilterSlinky self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterSlinky self, Buffer x) -> Buffer
        filter(FilterSlinky self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterSlinky self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterSlinky self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterSlinky_filter(self, *args)

    def reset(self):
        """reset(FilterSlinky self)"""
        return _Nsound.FilterSlinky_reset(self)

FilterSlinky_swigregister = _Nsound.FilterSlinky_swigregister
FilterSlinky_swigregister(FilterSlinky)

class FilterTone(Filter):
    """Proxy of C++ Nsound::FilterTone class"""
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterTone, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterTone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FilterTone self, Nsound::float64 const & sample_rate, Nsound::float64 const & half_power_frequency) -> FilterTone"""
        this = _Nsound.new_FilterTone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FilterTone
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(FilterTone self, AudioStream x) -> AudioStream
        filter(FilterTone self, AudioStream x, Buffer hp_frequencies) -> AudioStream
        filter(FilterTone self, Buffer x) -> Buffer
        filter(FilterTone self, Buffer x, Buffer hp_frequencies) -> Buffer
        filter(FilterTone self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterTone self, Nsound::float64 const & x, Nsound::float64 const & hp_frequency) -> Nsound::float64
        """
        return _Nsound.FilterTone_filter(self, *args)

    def getFrequency(self):
        """getFrequency(FilterTone self) -> Nsound::float64"""
        return _Nsound.FilterTone_getFrequency(self)

    def getKernelSize(self):
        """getKernelSize(FilterTone self) -> Nsound::uint32"""
        return _Nsound.FilterTone_getKernelSize(self)

    def plot(self, show_fc=True, show_phase=False):
        """
        plot(FilterTone self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)
        plot(FilterTone self, Nsound::boolean show_fc=True)
        plot(FilterTone self)
        """
        return _Nsound.FilterTone_plot(self, show_fc, show_phase)

    def reset(self):
        """reset(FilterTone self)"""
        return _Nsound.FilterTone_reset(self)

    def makeKernel(self, *args):
        """makeKernel(FilterTone self, Nsound::float64 const & half_power_frequency)"""
        return _Nsound.FilterTone_makeKernel(self, *args)

FilterTone_swigregister = _Nsound.FilterTone_swigregister
FilterTone_swigregister(FilterTone)

class FluteSlide(Instrument):
    """Proxy of C++ Nsound::FluteSlide class"""
    __swig_setmethods__ = {}
    for _s in [Instrument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FluteSlide, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FluteSlide, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::FluteSlide self, Nsound::float64 const & sample_rate) -> FluteSlide"""
        this = _Nsound.new_FluteSlide(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_FluteSlide
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(FluteSlide self) -> AudioStream
        play(FluteSlide self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(FluteSlide self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & presure, 
            Nsound::float64 const & breath) -> AudioStream
        """
        return _Nsound.FluteSlide_play(self, *args)

    def getInfo(self):
        """getInfo(FluteSlide self) -> std::string"""
        return _Nsound.FluteSlide_getInfo(self)

FluteSlide_swigregister = _Nsound.FluteSlide_swigregister
FluteSlide_swigregister(FluteSlide)

class Generator(_object):
    """Proxy of C++ Nsound::Generator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Generator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Generator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Generator self, Nsound::float64 const & sample_rate) -> Generator
        __init__(Nsound::Generator self, Nsound::float64 const & sample_rate, Buffer waveform) -> Generator
        __init__(Nsound::Generator self, std::string const & wave_filename) -> Generator
        __init__(Nsound::Generator self, Generator gen) -> Generator
        """
        this = _Nsound.new_Generator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Generator
    __del__ = lambda self : None;
    def setRealtime(self, *args):
        """setRealtime(Generator self, bool flag)"""
        return _Nsound.Generator_setRealtime(self, *args)

    def addSlaveSync(self, *args):
        """addSlaveSync(Generator self, Generator slave)"""
        return _Nsound.Generator_addSlaveSync(self, *args)

    def buzzInit(self, *args):
        """buzzInit(Generator self, Nsound::uint32 const & max_harmonics)"""
        return _Nsound.Generator_buzzInit(self, *args)

    def buzz(self, *args):
        """
        buzz(Generator self, Nsound::float64 const & frequency, Nsound::float64 const & n_harmonics, Nsound::float64 const & delay) -> Nsound::float64
        buzz(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & n_harmonics, 
            Nsound::float64 const & delay) -> Buffer
        buzz(Generator self, Nsound::float64 const & duration, Buffer frequency, Buffer n_harmonics, Buffer delay) -> Buffer
        """
        return _Nsound.Generator_buzz(self, *args)

    def setChorus(self, *args):
        """
        setChorus(Generator self, Nsound::uint32 const n_voices, Nsound::float64 const & sigma=0.02)
        setChorus(Generator self, Nsound::uint32 const n_voices)
        """
        return _Nsound.Generator_setChorus(self, *args)

    def drawDecay(self, *args):
        """
        drawDecay(Generator self, Nsound::float64 const & duration, Nsound::float64 const & alpha=2.0*3.1415926535897932846) -> Buffer
        drawDecay(Generator self, Nsound::float64 const & duration) -> Buffer
        """
        return _Nsound.Generator_drawDecay(self, *args)

    def drawGaussian(self, *args):
        """
        drawGaussian(Generator self, Nsound::float64 const & duration, Nsound::float64 const & mu, Nsound::float64 const & sigma, 
            Nsound::boolean const & normalize=True) -> Buffer
        drawGaussian(Generator self, Nsound::float64 const & duration, Nsound::float64 const & mu, Nsound::float64 const & sigma) -> Buffer
        """
        return _Nsound.Generator_drawGaussian(self, *args)

    def drawFatGaussian(self, *args):
        """
        drawFatGaussian(Generator self, Nsound::float64 const & duration, Nsound::float64 const & pass_band_percent=0.01) -> Buffer
        drawFatGaussian(Generator self, Nsound::float64 const & duration) -> Buffer
        """
        return _Nsound.Generator_drawFatGaussian(self, *args)

    def drawLine(self, *args):
        """drawLine(Generator self, Nsound::float64 const & duration, Nsound::float64 const & amplitude_start, Nsound::float64 const & amplitude_finish) -> Buffer"""
        return _Nsound.Generator_drawLine(self, *args)

    def drawParabola(self, *args):
        """
        drawParabola(Generator self, Nsound::float64 const & duration, Nsound::float64 const & y1, Nsound::float64 const & x2, 
            Nsound::float64 const & y2, Nsound::float64 const & y3) -> Buffer
        """
        return _Nsound.Generator_drawParabola(self, *args)

    def drawSine(self, *args):
        """
        drawSine(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> Buffer
        drawSine(Generator self, Nsound::float64 const & duration, Buffer frequency) -> Buffer
        drawSine(Generator self, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.Generator_drawSine(self, *args)

    def drawSine2(self, *args):
        """
        drawSine2(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & phase) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & duration, Buffer frequency, Buffer phase) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & duration, Buffer frequency, Nsound::float64 const & phase=0.0) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & duration, Buffer frequency) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Buffer phase) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & frequency, Nsound::float64 const & phase) -> Nsound::float64
        """
        return _Nsound.Generator_drawSine2(self, *args)

    def drawWindow(self, *args):
        """drawWindow(Generator self, Nsound::float64 const & duration, Nsound::WindowType type) -> Buffer"""
        return _Nsound.Generator_drawWindow(self, *args)

    def drawWindowBartlett(self, *args):
        """drawWindowBartlett(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowBartlett(self, *args)

    def drawWindowBlackman(self, *args):
        """drawWindowBlackman(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowBlackman(self, *args)

    def drawWindowBlackmanHarris(self, *args):
        """drawWindowBlackmanHarris(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowBlackmanHarris(self, *args)

    def drawWindowHamming(self, *args):
        """drawWindowHamming(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowHamming(self, *args)

    def drawWindowHanning(self, *args):
        """drawWindowHanning(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowHanning(self, *args)

    def drawWindowKaiser(self, *args):
        """
        drawWindowKaiser(Generator self, Nsound::float64 const & duration, Nsound::float64 const & beta=5.0) -> Buffer
        drawWindowKaiser(Generator self, Nsound::float64 const & duration) -> Buffer
        """
        return _Nsound.Generator_drawWindowKaiser(self, *args)

    def drawWindowNuttall(self, *args):
        """drawWindowNuttall(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowNuttall(self, *args)

    def drawWindowParzen(self, *args):
        """drawWindowParzen(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowParzen(self, *args)

    def drawWindowRectangular(self, *args):
        """drawWindowRectangular(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowRectangular(self, *args)

    def generate(self, *args):
        """
        generate(Generator self, Nsound::float64 const & frequency) -> Nsound::float64
        generate(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> Buffer
        generate(Generator self, Nsound::float64 const & duration, Buffer frequencies) -> Buffer
        """
        return _Nsound.Generator_generate(self, *args)

    def generate2(self, *args):
        """
        generate2(Generator self, Nsound::float64 const & frequency, Nsound::float64 const & phase) -> Nsound::float64
        generate2(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & phase) -> Buffer
        generate2(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequencies, Buffer phase) -> Buffer
        generate2(Generator self, Nsound::float64 const & duration, Buffer frequencies, Nsound::float64 const & phase) -> Buffer
        generate2(Generator self, Nsound::float64 const & duration, Buffer frequencies, Buffer phase) -> Buffer
        """
        return _Nsound.Generator_generate2(self, *args)

    def removeSlaveSync(self, *args):
        """removeSlaveSync(Generator self, Generator slave)"""
        return _Nsound.Generator_removeSlaveSync(self, *args)

    def reset(self):
        """reset(Generator self)"""
        return _Nsound.Generator_reset(self)

    def getRandomNumberGenerator(self):
        """getRandomNumberGenerator(Generator self) -> RandomNumberGenerator"""
        return _Nsound.Generator_getRandomNumberGenerator(self)

    def setSeed(self, *args):
        """setSeed(Generator self, Nsound::uint32 const seed)"""
        return _Nsound.Generator_setSeed(self, *args)

    def silence(self, *args):
        """silence(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_silence(self, *args)

    def tell(self):
        """tell(Generator self) -> Nsound::float64"""
        return _Nsound.Generator_tell(self)

    def whiteNoise(self, *args):
        """whiteNoise(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_whiteNoise(self, *args)

    def gaussianNoise(self, *args):
        """gaussianNoise(Generator self, Nsound::float64 const & duration, Nsound::float64 const & mu, Nsound::float64 const & sigma) -> Buffer"""
        return _Nsound.Generator_gaussianNoise(self, *args)

    def tanh(self, *args):
        """tanh(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_tanh(self, *args)

Generator_swigregister = _Nsound.Generator_swigregister
Generator_swigregister(Generator)

class GeneratorDecay(Generator):
    """Proxy of C++ Nsound::GeneratorDecay class"""
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorDecay, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorDecay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::GeneratorDecay self, Nsound::float64 const & sample_rate) -> GeneratorDecay"""
        this = _Nsound.new_GeneratorDecay(*args)
        try: self.this.append(this)
        except: self.this = this
    def generate(self, *args):
        """generate(GeneratorDecay self, Nsound::float64 const & frequency) -> Nsound::float64"""
        return _Nsound.GeneratorDecay_generate(self, *args)

    def generate2(self, *args):
        """
        generate2(GeneratorDecay self, Nsound::float64 const & frequency, Nsound::float64 const & alpha) -> Nsound::float64
        generate2(GeneratorDecay self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & alpha) -> Buffer
        generate2(GeneratorDecay self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Buffer alpha) -> Buffer
        generate2(GeneratorDecay self, Nsound::float64 const & duration, Buffer frequencies, Nsound::float64 const & alpha) -> Buffer
        generate2(GeneratorDecay self, Nsound::float64 const & duration, Buffer frequencies, Buffer alpha) -> Buffer
        """
        return _Nsound.GeneratorDecay_generate2(self, *args)

    __swig_destroy__ = _Nsound.delete_GeneratorDecay
    __del__ = lambda self : None;
GeneratorDecay_swigregister = _Nsound.GeneratorDecay_swigregister
GeneratorDecay_swigregister(GeneratorDecay)

class Granulator(_object):
    """Proxy of C++ Nsound::Granulator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Granulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Granulator, name)
    __repr__ = _swig_repr
    CUSTOM = _Nsound.Granulator_CUSTOM
    GAUSSIAN = _Nsound.Granulator_GAUSSIAN
    GAUSSIAN_90 = _Nsound.Granulator_GAUSSIAN_90
    GAUSSIAN_70 = _Nsound.Granulator_GAUSSIAN_70
    GAUSSIAN_50 = _Nsound.Granulator_GAUSSIAN_50
    GAUSSIAN_30 = _Nsound.Granulator_GAUSSIAN_30
    GAUSSIAN_10 = _Nsound.Granulator_GAUSSIAN_10
    DECAY = _Nsound.Granulator_DECAY
    REVERSE_DECAY = _Nsound.Granulator_REVERSE_DECAY
    def __init__(self, *args): 
        """
        __init__(Nsound::Granulator self, Nsound::float64 const & sample_rate, Nsound::Granulator::EnvelopeType_e env_type, 
            Nsound::float64 const & envelope_noise=0.0, Buffer custom_envelope=None) -> Granulator
        __init__(Nsound::Granulator self, Nsound::float64 const & sample_rate, Nsound::Granulator::EnvelopeType_e env_type, 
            Nsound::float64 const & envelope_noise=0.0) -> Granulator
        __init__(Nsound::Granulator self, Nsound::float64 const & sample_rate, Nsound::Granulator::EnvelopeType_e env_type) -> Granulator
        __init__(Nsound::Granulator self, Granulator gran) -> Granulator
        """
        this = _Nsound.new_Granulator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Granulator
    __del__ = lambda self : None;
    def generate(self, *args):
        """
        generate(Granulator self, Nsound::float64 const & duration, Nsound::float64 const & grain_frequency, Nsound::float64 const & waves_per_grain, 
            Nsound::float64 const & grains_per_second) -> Buffer
        generate(Granulator self, Nsound::float64 const & duration, Buffer grain_frequency, Buffer waves_per_grain, 
            Buffer grains_per_second) -> Buffer
        """
        return _Nsound.Granulator_generate(self, *args)

Granulator_swigregister = _Nsound.Granulator_swigregister
Granulator_swigregister(Granulator)

class GuitarBass(Instrument):
    """Proxy of C++ Nsound::GuitarBass class"""
    __swig_setmethods__ = {}
    for _s in [Instrument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuitarBass, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuitarBass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::GuitarBass self, Nsound::float64 const & sample_rate) -> GuitarBass"""
        this = _Nsound.new_GuitarBass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_GuitarBass
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(GuitarBass self) -> AudioStream
        play(GuitarBass self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        """
        return _Nsound.GuitarBass_play(self, *args)

    def getInfo(self):
        """getInfo(GuitarBass self) -> std::string"""
        return _Nsound.GuitarBass_getInfo(self)

GuitarBass_swigregister = _Nsound.GuitarBass_swigregister
GuitarBass_swigregister(GuitarBass)

class Hat(Instrument):
    """Proxy of C++ Nsound::Hat class"""
    __swig_setmethods__ = {}
    for _s in [Instrument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hat, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Hat self, Nsound::float64 const & sample_rate) -> Hat
        __init__(Nsound::Hat self, Hat copy) -> Hat
        """
        this = _Nsound.new_Hat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Hat
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(Hat self) -> AudioStream
        play(Hat self, Nsound::float64 const & duration, Nsound::float64 const & tune) -> AudioStream
        play(Hat self, Nsound::float64 const & duration, Nsound::float64 const & tune, Nsound::boolean is_closed) -> AudioStream
        """
        return _Nsound.Hat_play(self, *args)

    def getInfo(self):
        """getInfo(Hat self) -> std::string"""
        return _Nsound.Hat_getInfo(self)

Hat_swigregister = _Nsound.Hat_swigregister
Hat_swigregister(Hat)

class Mesh2D(_object):
    """Proxy of C++ Nsound::Mesh2D class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Mesh2D self, Nsound::float64 const & sample_rate, Nsound::uint32 width, Nsound::uint32 height, 
            Nsound::float64 const & leak_gain, Nsound::float64 const & tau, Nsound::float64 const & delta=6.0, 
            Nsound::float64 const & gamma=8.0) -> Mesh2D
        __init__(Nsound::Mesh2D self, Nsound::float64 const & sample_rate, Nsound::uint32 width, Nsound::uint32 height, 
            Nsound::float64 const & leak_gain, Nsound::float64 const & tau, Nsound::float64 const & delta=6.0) -> Mesh2D
        __init__(Nsound::Mesh2D self, Nsound::float64 const & sample_rate, Nsound::uint32 width, Nsound::uint32 height, 
            Nsound::float64 const & leak_gain, Nsound::float64 const & tau) -> Mesh2D
        __init__(Nsound::Mesh2D self, Mesh2D copy) -> Mesh2D
        """
        this = _Nsound.new_Mesh2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Mesh2D
    __del__ = lambda self : None;
    def clear(self):
        """clear(Mesh2D self)"""
        return _Nsound.Mesh2D_clear(self)

    def getEnergy(self):
        """getEnergy(Mesh2D self) -> Nsound::float64"""
        return _Nsound.Mesh2D_getEnergy(self)

    def strike(self, *args):
        """
        strike(Mesh2D self, Buffer x_pos, Buffer y_pos, Buffer velocity) -> Buffer
        strike(Mesh2D self, Nsound::float64 const & x_pos, Nsound::float64 const & y_pos, Nsound::float64 const & velocity) -> Buffer
        """
        return _Nsound.Mesh2D_strike(self, *args)

    def setMeshDumping(self, *args):
        """
        setMeshDumping(Mesh2D self, Nsound::boolean flag, std::string const & dirname=".", std::string const & prefix="mesh")
        setMeshDumping(Mesh2D self, Nsound::boolean flag, std::string const & dirname=".")
        setMeshDumping(Mesh2D self, Nsound::boolean flag)
        """
        return _Nsound.Mesh2D_setMeshDumping(self, *args)

Mesh2D_swigregister = _Nsound.Mesh2D_swigregister
Mesh2D_swigregister(Mesh2D)

class Mixer(_object):
    """Proxy of C++ Nsound::Mixer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mixer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mixer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Nsound::Mixer self) -> Mixer"""
        this = _Nsound.new_Mixer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Mixer
    __del__ = lambda self : None;
    def add(self, *args):
        """add(Mixer self, Nsound::float64 first_beat_time, Nsound::float64 beats_per_minute, AudioStream audio_stream)"""
        return _Nsound.Mixer_add(self, *args)

    def getStream(self, *args):
        """
        getStream(Mixer self, Nsound::float64 end_time) -> AudioStream
        getStream(Mixer self, Nsound::float64 start_time, Nsound::float64 end_time) -> AudioStream
        """
        return _Nsound.Mixer_getStream(self, *args)

    def clear(self):
        """clear(Mixer self)"""
        return _Nsound.Mixer_clear(self)

    def size(self):
        """size(Mixer self) -> Nsound::uint32"""
        return _Nsound.Mixer_size(self)

Mixer_swigregister = _Nsound.Mixer_swigregister
Mixer_swigregister(Mixer)

class OrganPipe(Instrument):
    """Proxy of C++ Nsound::OrganPipe class"""
    __swig_setmethods__ = {}
    for _s in [Instrument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrganPipe, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrganPipe, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::OrganPipe self, Nsound::float64 const & sample_rate) -> OrganPipe"""
        this = _Nsound.new_OrganPipe(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_OrganPipe
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(OrganPipe self) -> AudioStream
        play(OrganPipe self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(OrganPipe self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & pan) -> AudioStream
        """
        return _Nsound.OrganPipe_play(self, *args)

    def getInfo(self):
        """getInfo(OrganPipe self) -> std::string"""
        return _Nsound.OrganPipe_getInfo(self)

OrganPipe_swigregister = _Nsound.OrganPipe_swigregister
OrganPipe_swigregister(OrganPipe)

class Axes(_object):
    """Proxy of C++ Nsound::Axes class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Axes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Axes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Axes self, PyObject * axes_ptr) -> Axes
        __init__(Nsound::Axes self, Axes copy) -> Axes
        """
        this = _Nsound.new_Axes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Axes
    __del__ = lambda self : None;
    def get_axes(self):
        """get_axes(Axes self) -> PyObject *"""
        return _Nsound.Axes_get_axes(self)

Axes_swigregister = _Nsound.Axes_swigregister
Axes_swigregister(Axes)

class Plotter(_object):
    """Proxy of C++ Nsound::Plotter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plotter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plotter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Nsound::Plotter self) -> Plotter"""
        this = _Nsound.new_Plotter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Plotter
    __del__ = lambda self : None;
    def axhline(self, y_pos=0.0, kwargs=""):
        """
        axhline(Plotter self, Nsound::float64 const & y_pos=0.0, std::string const & kwargs="")
        axhline(Plotter self, Nsound::float64 const & y_pos=0.0)
        axhline(Plotter self)
        """
        return _Nsound.Plotter_axhline(self, y_pos, kwargs)

    def axvline(self, x_pos=0.0, kwargs=""):
        """
        axvline(Plotter self, Nsound::float64 const & x_pos=0.0, std::string const & kwargs="")
        axvline(Plotter self, Nsound::float64 const & x_pos=0.0)
        axvline(Plotter self)
        """
        return _Nsound.Plotter_axvline(self, x_pos, kwargs)

    def xlim(self, *args):
        """xlim(Plotter self, Nsound::float64 const & xmin, Nsound::float64 const & xmax)"""
        return _Nsound.Plotter_xlim(self, *args)

    def ylim(self, *args):
        """ylim(Plotter self, Nsound::float64 const & ymin, Nsound::float64 const & ymax)"""
        return _Nsound.Plotter_ylim(self, *args)

    def figure(self, kwargs=""):
        """
        figure(Plotter self, std::string const & kwargs="")
        figure(Plotter self)
        """
        return _Nsound.Plotter_figure(self, kwargs)

    def grid(self, *args):
        """grid(Plotter self, Nsound::boolean flag)"""
        return _Nsound.Plotter_grid(self, *args)

    def hide(self):
        """hide(Plotter self)"""
        return _Nsound.Plotter_hide(self)

    def hold(self, *args):
        """hold(Plotter self, Nsound::boolean flag)"""
        return _Nsound.Plotter_hold(self, *args)

    def imagesc(self, *args):
        """
        imagesc(Plotter self, AudioStream Z, std::string const & kwargs="")
        imagesc(Plotter self, AudioStream Z)
        imagesc(Plotter self, Buffer x_axis, Buffer y_axis, AudioStream Z, std::string const & kwargs="")
        imagesc(Plotter self, Buffer x_axis, Buffer y_axis, AudioStream Z)
        """
        return _Nsound.Plotter_imagesc(self, *args)

    def legend(self, kwargs=""):
        """
        legend(Plotter self, std::string const & kwargs="")
        legend(Plotter self)
        """
        return _Nsound.Plotter_legend(self, kwargs)

    def plot(self, *args):
        """
        plot(Plotter self, Buffer y, std::string const & fmt="", std::string const & kwargs="")
        plot(Plotter self, Buffer y, std::string const & fmt="")
        plot(Plotter self, Buffer y)
        plot(Plotter self, Buffer x, Buffer y, std::string const & fmt="", std::string const & kwargs="")
        plot(Plotter self, Buffer x, Buffer y, std::string const & fmt="")
        plot(Plotter self, Buffer x, Buffer y)
        plot(Plotter self, Nsound::float64 const & x, Nsound::float64 const & y, std::string const & fmt="", 
            std::string const & kwargs="")
        plot(Plotter self, Nsound::float64 const & x, Nsound::float64 const & y, std::string const & fmt="")
        plot(Plotter self, Nsound::float64 const & x, Nsound::float64 const & y)
        """
        return _Nsound.Plotter_plot(self, *args)

    def run_string(self, *args):
        """run_string(Plotter self, std::string const & command)"""
        return _Nsound.Plotter_run_string(self, *args)

    def savefig(self, *args):
        """
        savefig(Plotter self, std::string const & filename, std::string const & kwargs="")
        savefig(Plotter self, std::string const & filename)
        """
        return _Nsound.Plotter_savefig(self, *args)

    def set_xscale(self, *args):
        """set_xscale(Plotter self, std::string const & s)"""
        return _Nsound.Plotter_set_xscale(self, *args)

    def set_yscale(self, *args):
        """set_yscale(Plotter self, std::string const & s)"""
        return _Nsound.Plotter_set_yscale(self, *args)

    def subplot(self, *args):
        """
        subplot(Plotter self, Nsound::uint32 const n_rows, Nsound::uint32 const n_cols, Nsound::uint32 const n, 
            std::string const & kwargs="", Axes sharex=None, Axes sharey=None) -> Axes
        subplot(Plotter self, Nsound::uint32 const n_rows, Nsound::uint32 const n_cols, Nsound::uint32 const n, 
            std::string const & kwargs="", Axes sharex=None) -> Axes
        subplot(Plotter self, Nsound::uint32 const n_rows, Nsound::uint32 const n_cols, Nsound::uint32 const n, 
            std::string const & kwargs="") -> Axes
        subplot(Plotter self, Nsound::uint32 const n_rows, Nsound::uint32 const n_cols, Nsound::uint32 const n) -> Axes
        """
        return _Nsound.Plotter_subplot(self, *args)

    def text(self, *args):
        """
        text(Plotter self, Nsound::float64 const & x, Nsound::float64 const & y, std::string const & text, std::string const & kwargs="")
        text(Plotter self, Nsound::float64 const & x, Nsound::float64 const & y, std::string const & text)
        """
        return _Nsound.Plotter_text(self, *args)

    def title(self, *args):
        """
        title(Plotter self, std::string const & title, std::string const & kwargs="")
        title(Plotter self, std::string const & title)
        """
        return _Nsound.Plotter_title(self, *args)

    def xlabel(self, *args):
        """
        xlabel(Plotter self, std::string const & label, std::string const & kwargs="")
        xlabel(Plotter self, std::string const & label)
        """
        return _Nsound.Plotter_xlabel(self, *args)

    def ylabel(self, *args):
        """
        ylabel(Plotter self, std::string const & label, std::string const & kwargs="")
        ylabel(Plotter self, std::string const & label)
        """
        return _Nsound.Plotter_ylabel(self, *args)

    def show():
        try:
            matplotlib.pylab.show()
        except:

            # If NSOUND_C_PYLAB doesn't exist, then matplotlib wasn't compiled in
            if not 'NSOUND_C_PYLAB' in dir():
                warnings.warn("Nsound wan't compiled with matplotlib")

            pass

    show = staticmethod(show)


Plotter_swigregister = _Nsound.Plotter_swigregister
Plotter_swigregister(Plotter)

class Pluck(Generator):
    """Proxy of C++ Nsound::Pluck class"""
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pluck, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pluck, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::Pluck self, Nsound::float64 const & sample_rate, Nsound::uint32 n_smooth_samples) -> Pluck"""
        this = _Nsound.new_Pluck(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Pluck
    __del__ = lambda self : None;
    def generate(self, *args):
        """
        generate(Pluck self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> Buffer
        generate(Pluck self, Nsound::float64 const & f) -> Nsound::float64
        generate(Pluck self, Nsound::float64 const & d, Buffer f) -> Buffer
        """
        return _Nsound.Pluck_generate(self, *args)

    def generate2(self, *args):
        """
        generate2(Pluck self, Nsound::float64 const & f, Nsound::float64 const & p) -> Nsound::float64
        generate2(Pluck self, Nsound::float64 const & d, Nsound::float64 const & f, Nsound::float64 const & p) -> Buffer
        generate2(Pluck self, Nsound::float64 const & d, Nsound::float64 const & f, Buffer p) -> Buffer
        generate2(Pluck self, Nsound::float64 const & d, Buffer f, Nsound::float64 const & p) -> Buffer
        generate2(Pluck self, Nsound::float64 const & d, Buffer f, Buffer p) -> Buffer
        """
        return _Nsound.Pluck_generate2(self, *args)

Pluck_swigregister = _Nsound.Pluck_swigregister
Pluck_swigregister(Pluck)

class Pulse(Generator):
    """Proxy of C++ Nsound::Pulse class"""
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pulse, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pulse, name)
    __repr__ = _swig_repr
    PULSE_SECONDS = _Nsound.Pulse_PULSE_SECONDS
    PULSE_PERCENT = _Nsound.Pulse_PULSE_PERCENT
    def __init__(self, *args): 
        """
        __init__(Nsound::Pulse self, Nsound::float64 const & sample_rate, Nsound::float64 const & pulse_width, Nsound::Pulse::PulseUnits const & units=PULSE_PERCENT) -> Pulse
        __init__(Nsound::Pulse self, Nsound::float64 const & sample_rate, Nsound::float64 const & pulse_width) -> Pulse
        """
        this = _Nsound.new_Pulse(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Pulse
    __del__ = lambda self : None;
    def setUnits(self, *args):
        """setUnits(Pulse self, Nsound::Pulse::PulseUnits const & units)"""
        return _Nsound.Pulse_setUnits(self, *args)

    def generate(self, *args):
        """
        generate(Pulse self, Nsound::float64 const & frequency) -> Nsound::float64
        generate(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> Buffer
        generate(Pulse self, Nsound::float64 const & duration, Buffer frequencies) -> Buffer
        generate(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & pulse_width) -> Buffer
        generate(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Buffer pulse_widths) -> Buffer
        generate(Pulse self, Nsound::float64 const & duration, Buffer frequencies, Buffer pulse_widths) -> Buffer
        """
        return _Nsound.Pulse_generate(self, *args)

    def generate2(self, *args):
        """
        generate2(Pulse self, Nsound::float64 const & frequency, Nsound::float64 const & pulse_width) -> Nsound::float64
        generate2(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & pulse_width) -> Buffer
        generate2(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Buffer pulse_width) -> Buffer
        generate2(Pulse self, Nsound::float64 const & duration, Buffer frequency, Nsound::float64 const & pulse_width) -> Buffer
        generate2(Pulse self, Nsound::float64 const & duration, Buffer frequency, Buffer pulse_width) -> Buffer
        """
        return _Nsound.Pulse_generate2(self, *args)

    def reset(self):
        """reset(Pulse self)"""
        return _Nsound.Pulse_reset(self)

    def riseTime(self):
        """riseTime(Pulse self) -> Nsound::float64"""
        return _Nsound.Pulse_riseTime(self)

    def fallTime(self):
        """fallTime(Pulse self) -> Nsound::float64"""
        return _Nsound.Pulse_fallTime(self)

Pulse_swigregister = _Nsound.Pulse_swigregister
Pulse_swigregister(Pulse)

class RandomNumberGenerator(_object):
    """Proxy of C++ Nsound::RandomNumberGenerator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomNumberGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomNumberGenerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_RandomNumberGenerator
    __del__ = lambda self : None;
    def get(self, *args):
        """
        get(RandomNumberGenerator self) -> Nsound::uint32
        get(RandomNumberGenerator self, Nsound::float64 const & min, Nsound::float64 const & max) -> Nsound::float64
        """
        return _Nsound.RandomNumberGenerator_get(self, *args)

    def setSeed(self, *args):
        """setSeed(RandomNumberGenerator self, Nsound::uint32 seed)"""
        return _Nsound.RandomNumberGenerator_setSeed(self, *args)

RandomNumberGenerator_swigregister = _Nsound.RandomNumberGenerator_swigregister
RandomNumberGenerator_swigregister(RandomNumberGenerator)

class ReverberationRoom(_object):
    """Proxy of C++ Nsound::ReverberationRoom class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReverberationRoom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReverberationRoom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::ReverberationRoom self, Nsound::float64 const & sample_rate, Nsound::float64 const & room_feedback, Nsound::float64 const & wet_percent=0.5, 
            Nsound::float64 const & dry_percent=1.0, 
            Nsound::float64 const & low_pass_frequency_Hz=7644.9, Nsound::float64 const & stereo_spread_seconds=0.0005215) -> ReverberationRoom
        __init__(Nsound::ReverberationRoom self, Nsound::float64 const & sample_rate, Nsound::float64 const & room_feedback, Nsound::float64 const & wet_percent=0.5, 
            Nsound::float64 const & dry_percent=1.0, 
            Nsound::float64 const & low_pass_frequency_Hz=7644.9) -> ReverberationRoom
        __init__(Nsound::ReverberationRoom self, Nsound::float64 const & sample_rate, Nsound::float64 const & room_feedback, Nsound::float64 const & wet_percent=0.5, 
            Nsound::float64 const & dry_percent=1.0) -> ReverberationRoom
        __init__(Nsound::ReverberationRoom self, Nsound::float64 const & sample_rate, Nsound::float64 const & room_feedback, Nsound::float64 const & wet_percent=0.5) -> ReverberationRoom
        __init__(Nsound::ReverberationRoom self, Nsound::float64 const & sample_rate, Nsound::float64 const & room_feedback) -> ReverberationRoom
        __init__(Nsound::ReverberationRoom self, ReverberationRoom copy) -> ReverberationRoom
        """
        this = _Nsound.new_ReverberationRoom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_ReverberationRoom
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(ReverberationRoom self, AudioStream x) -> AudioStream
        filter(ReverberationRoom self, Buffer x) -> AudioStream
        filter(ReverberationRoom self, Nsound::float64 & out_left, Nsound::float64 & out_right, Nsound::float64 const & in_left, 
            Nsound::float64 const & in_right)
        """
        return _Nsound.ReverberationRoom_filter(self, *args)

    def getSampleRate(self):
        """getSampleRate(ReverberationRoom self) -> Nsound::float64"""
        return _Nsound.ReverberationRoom_getSampleRate(self)

    def reset(self):
        """reset(ReverberationRoom self)"""
        return _Nsound.ReverberationRoom_reset(self)

ReverberationRoom_swigregister = _Nsound.ReverberationRoom_swigregister
ReverberationRoom_swigregister(ReverberationRoom)

class RngTausworthe(RandomNumberGenerator):
    """Proxy of C++ Nsound::RngTausworthe class"""
    __swig_setmethods__ = {}
    for _s in [RandomNumberGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RngTausworthe, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumberGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RngTausworthe, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Nsound::RngTausworthe self) -> RngTausworthe"""
        this = _Nsound.new_RngTausworthe()
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(RngTausworthe self) -> Nsound::uint32
        get(RngTausworthe self, Nsound::int32 const min, Nsound::int32 const max) -> Nsound::int32
        get(RngTausworthe self, Nsound::float64 const & min, Nsound::float64 const & max) -> Nsound::float64
        """
        return _Nsound.RngTausworthe_get(self, *args)

    def setSeed(self, *args):
        """setSeed(RngTausworthe self, Nsound::uint32 seed)"""
        return _Nsound.RngTausworthe_setSeed(self, *args)

    __swig_destroy__ = _Nsound.delete_RngTausworthe
    __del__ = lambda self : None;
RngTausworthe_swigregister = _Nsound.RngTausworthe_swigregister
RngTausworthe_swigregister(RngTausworthe)

class Sawtooth(Generator):
    """Proxy of C++ Nsound::Sawtooth class"""
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sawtooth, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sawtooth, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Sawtooth self, Nsound::float64 const & sample_rate, Nsound::int32 const n_harmonics=100) -> Sawtooth
        __init__(Nsound::Sawtooth self, Nsound::float64 const & sample_rate) -> Sawtooth
        """
        this = _Nsound.new_Sawtooth(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Sawtooth
    __del__ = lambda self : None;
Sawtooth_swigregister = _Nsound.Sawtooth_swigregister
Sawtooth_swigregister(Sawtooth)

class Sine(Generator):
    """Proxy of C++ Nsound::Sine class"""
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sine, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::Sine self, Nsound::float64 const & sample_rate) -> Sine"""
        this = _Nsound.new_Sine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Sine
    __del__ = lambda self : None;
Sine_swigregister = _Nsound.Sine_swigregister
Sine_swigregister(Sine)

class Spectrogram(_object):
    """Proxy of C++ Nsound::Spectrogram class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spectrogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spectrogram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Spectrogram self, Buffer x, Nsound::float64 const & sample_rate, Nsound::float64 const & time_window, 
            Nsound::float64 const & time_step, Nsound::WindowType const & type) -> Spectrogram
        __init__(Nsound::Spectrogram self, Spectrogram copy) -> Spectrogram
        """
        this = _Nsound.new_Spectrogram(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Spectrogram
    __del__ = lambda self : None;
    def getFrequencyAxis(self):
        """getFrequencyAxis(Spectrogram self) -> Buffer"""
        return _Nsound.Spectrogram_getFrequencyAxis(self)

    def getMagnitude(self):
        """getMagnitude(Spectrogram self) -> AudioStream"""
        return _Nsound.Spectrogram_getMagnitude(self)

    def getTimeAxis(self):
        """getTimeAxis(Spectrogram self) -> Buffer"""
        return _Nsound.Spectrogram_getTimeAxis(self)

    def plot(self, title="", use_dB=True, squash=0.5):
        """
        plot(Spectrogram self, std::string const & title="", Nsound::boolean const & use_dB=True, Nsound::float64 const & squash=0.5)
        plot(Spectrogram self, std::string const & title="", Nsound::boolean const & use_dB=True)
        plot(Spectrogram self, std::string const & title="")
        plot(Spectrogram self)
        """
        return _Nsound.Spectrogram_plot(self, title, use_dB, squash)

    def computeMagnitude(self, *args):
        """computeMagnitude(Spectrogram self, Buffer x) -> Buffer"""
        return _Nsound.Spectrogram_computeMagnitude(self, *args)

Spectrogram_swigregister = _Nsound.Spectrogram_swigregister
Spectrogram_swigregister(Spectrogram)

class Cosine(Generator):
    """Proxy of C++ Nsound::Cosine class"""
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cosine, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cosine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Nsound::Cosine self, Nsound::float64 const & sample_rate) -> Cosine"""
        this = _Nsound.new_Cosine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Cosine
    __del__ = lambda self : None;
Cosine_swigregister = _Nsound.Cosine_swigregister
Cosine_swigregister(Cosine)

class Square(Generator):
    """Proxy of C++ Nsound::Square class"""
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Square, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Square, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Square self, Nsound::float64 const & sample_rate) -> Square
        __init__(Nsound::Square self, Nsound::float64 const & sample_rate, Nsound::int32 const n_harmonics) -> Square
        __init__(Nsound::Square self, Nsound::float64 const & sample_rate, Nsound::float64 const & percent_lambda_1, Nsound::float64 const & amplitude_1, 
            Nsound::float64 const & percent_lambda_2, 
            Nsound::float64 const & percent_lambda_3, Nsound::float64 const & amplitude_3, 
            Nsound::float64 const & percent_lambda_4) -> Square
        """
        this = _Nsound.new_Square(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Square
    __del__ = lambda self : None;
Square_swigregister = _Nsound.Square_swigregister
Square_swigregister(Square)

class Stretcher(_object):
    """Proxy of C++ Nsound::Stretcher class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stretcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stretcher, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Stretcher self, Nsound::float64 const & sample_rate, Nsound::float64 const & window_size_seconds=0.08, 
            Nsound::float64 const & max_delta_window=0.25) -> Stretcher
        __init__(Nsound::Stretcher self, Nsound::float64 const & sample_rate, Nsound::float64 const & window_size_seconds=0.08) -> Stretcher
        __init__(Nsound::Stretcher self, Nsound::float64 const & sample_rate) -> Stretcher
        __init__(Nsound::Stretcher self, Stretcher copy) -> Stretcher
        """
        this = _Nsound.new_Stretcher(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Stretcher
    __del__ = lambda self : None;
    def pitchShift(self, *args):
        """
        pitchShift(Stretcher self, AudioStream x, Nsound::float64 const & factor) -> AudioStream
        pitchShift(Stretcher self, AudioStream x, Buffer factor) -> AudioStream
        pitchShift(Stretcher self, Buffer x, Nsound::float64 const & factor) -> Buffer
        pitchShift(Stretcher self, Buffer x, Buffer factor) -> Buffer
        """
        return _Nsound.Stretcher_pitchShift(self, *args)

    def showProgress(self, *args):
        """showProgress(Stretcher self, Nsound::boolean flag)"""
        return _Nsound.Stretcher_showProgress(self, *args)

    def timeShift(self, *args):
        """
        timeShift(Stretcher self, AudioStream x, Nsound::float64 const & factor) -> AudioStream
        timeShift(Stretcher self, AudioStream x, Buffer factor) -> AudioStream
        timeShift(Stretcher self, Buffer x, Nsound::float64 const & factor) -> Buffer
        timeShift(Stretcher self, Buffer x, Buffer factor) -> Buffer
        """
        return _Nsound.Stretcher_timeShift(self, *args)

Stretcher_swigregister = _Nsound.Stretcher_swigregister
Stretcher_swigregister(Stretcher)


def Tic():
  """Tic()"""
  return _Nsound.Tic()

def Toc():
  """Toc() -> Nsound::float64"""
  return _Nsound.Toc()
class Triangle(Generator):
    """Proxy of C++ Nsound::Triangle class"""
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triangle, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triangle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Triangle self, Nsound::float64 const & sample_rate) -> Triangle
        __init__(Nsound::Triangle self, Nsound::float64 const & sample_rate, Nsound::float64 const & attack_time, Nsound::float64 const & release_time) -> Triangle
        __init__(Nsound::Triangle self, Nsound::float64 const & sample_rate, Nsound::float64 const & percent_lambda_1, Nsound::float64 const & percent_lambda_2, 
            Nsound::float64 const & amplitude_2, 
            Nsound::float64 const & percent_lambda_3, Nsound::float64 const & percent_lambda_4, 
            Nsound::float64 const & percent_lambda_5, Nsound::float64 const & amplitude_5, 
            Nsound::float64 const & percent_lambda_6) -> Triangle
        """
        this = _Nsound.new_Triangle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Triangle
    __del__ = lambda self : None;
Triangle_swigregister = _Nsound.Triangle_swigregister
Triangle_swigregister(Triangle)


def getFrequencyOffset(*args):
  """
    getFrequencyOffset(Nsound::float64 const & f1, Nsound::float64 const & octaves=0.0, Nsound::float64 const & cents=0.0) -> Nsound::float64
    getFrequencyOffset(Nsound::float64 const & f1, Nsound::float64 const & octaves=0.0) -> Nsound::float64
    getFrequencyOffset(Nsound::float64 const & f1) -> Nsound::float64
    """
  return _Nsound.getFrequencyOffset(*args)
class Vocoder(_object):
    """Proxy of C++ Nsound::Vocoder class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vocoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vocoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nsound::Vocoder self, Nsound::float64 const & sample_rate, Nsound::float64 const & window_length, Nsound::uint32 const & n_bands, 
            Nsound::float64 const & freq_max=4000.0, bool const use_mel_scale=True, 
            bool const plot_filter_bank=False) -> Vocoder
        __init__(Nsound::Vocoder self, Nsound::float64 const & sample_rate, Nsound::float64 const & window_length, Nsound::uint32 const & n_bands, 
            Nsound::float64 const & freq_max=4000.0, bool const use_mel_scale=True) -> Vocoder
        __init__(Nsound::Vocoder self, Nsound::float64 const & sample_rate, Nsound::float64 const & window_length, Nsound::uint32 const & n_bands, 
            Nsound::float64 const & freq_max=4000.0) -> Vocoder
        __init__(Nsound::Vocoder self, Nsound::float64 const & sample_rate, Nsound::float64 const & window_length, Nsound::uint32 const & n_bands) -> Vocoder
        """
        this = _Nsound.new_Vocoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Vocoder
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(Vocoder self, Buffer voice, Buffer carrier) -> Buffer
        filter(Vocoder self, Nsound::float64 const & voice, Nsound::float64 const & carrier) -> Nsound::float64
        """
        return _Nsound.Vocoder_filter(self, *args)

    def getSampleRate(self):
        """getSampleRate(Vocoder self) -> Nsound::float64"""
        return _Nsound.Vocoder_getSampleRate(self)

    def reset(self):
        """reset(Vocoder self)"""
        return _Nsound.Vocoder_reset(self)

Vocoder_swigregister = _Nsound.Vocoder_swigregister
Vocoder_swigregister(Vocoder)

class Wavefile(_object):
    """Proxy of C++ Nsound::Wavefile class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wavefile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wavefile, name)
    __repr__ = _swig_repr
    DATA_ = _Nsound.Wavefile_DATA_
    FACT_ = _Nsound.Wavefile_FACT_
    FMT_ = _Nsound.Wavefile_FMT_
    PEAK_ = _Nsound.Wavefile_PEAK_
    RIFF_ = _Nsound.Wavefile_RIFF_
    WAVE_ = _Nsound.Wavefile_WAVE_
    WAVE_FORMAT_PCM_ = _Nsound.Wavefile_WAVE_FORMAT_PCM_
    WAVE_FORMAT_IEEE_FLOAT_ = _Nsound.Wavefile_WAVE_FORMAT_IEEE_FLOAT_
    UNSIGNED_64_BIT_ = _Nsound.Wavefile_UNSIGNED_64_BIT_
    UNSIGNED_48_BIT_ = _Nsound.Wavefile_UNSIGNED_48_BIT_
    UNSIGNED_32_BIT_ = _Nsound.Wavefile_UNSIGNED_32_BIT_
    UNSIGNED_24_BIT_ = _Nsound.Wavefile_UNSIGNED_24_BIT_
    UNSIGNED_16_BIT_ = _Nsound.Wavefile_UNSIGNED_16_BIT_
    UNSIGNED_8_BIT_ = _Nsound.Wavefile_UNSIGNED_8_BIT_
    def decodeFormatTag(*args):
        """decodeFormatTag(Nsound::uint16 const format_tag) -> std::string"""
        return _Nsound.Wavefile_decodeFormatTag(*args)

    if _newclass:decodeFormatTag = staticmethod(decodeFormatTag)
    __swig_getmethods__["decodeFormatTag"] = lambda x: decodeFormatTag
    def getDefaultSampleRate():
        """getDefaultSampleRate() -> Nsound::uint32"""
        return _Nsound.Wavefile_getDefaultSampleRate()

    if _newclass:getDefaultSampleRate = staticmethod(getDefaultSampleRate)
    __swig_getmethods__["getDefaultSampleRate"] = lambda x: getDefaultSampleRate
    def getDefaultSampleSize():
        """getDefaultSampleSize() -> Nsound::uint32"""
        return _Nsound.Wavefile_getDefaultSampleSize()

    if _newclass:getDefaultSampleSize = staticmethod(getDefaultSampleSize)
    __swig_getmethods__["getDefaultSampleSize"] = lambda x: getDefaultSampleSize
    def setDefaultSampleRate(*args):
        """
        setDefaultSampleRate(Nsound::int32 const rate)
        setDefaultSampleRate(Nsound::float64 const & rate)
        """
        return _Nsound.Wavefile_setDefaultSampleRate(*args)

    if _newclass:setDefaultSampleRate = staticmethod(setDefaultSampleRate)
    __swig_getmethods__["setDefaultSampleRate"] = lambda x: setDefaultSampleRate
    def setDefaultSampleSize(*args):
        """setDefaultSampleSize(Nsound::uint32 size)"""
        return _Nsound.Wavefile_setDefaultSampleSize(*args)

    if _newclass:setDefaultSampleSize = staticmethod(setDefaultSampleSize)
    __swig_getmethods__["setDefaultSampleSize"] = lambda x: setDefaultSampleSize
    def setIEEEFloat(*args):
        """setIEEEFloat(Nsound::boolean flag)"""
        return _Nsound.Wavefile_setIEEEFloat(*args)

    if _newclass:setIEEEFloat = staticmethod(setIEEEFloat)
    __swig_getmethods__["setIEEEFloat"] = lambda x: setIEEEFloat
    def setDefaults(sample_rate=44100.0, sample_bits=16.0, use_ieee_floats=False):
        """
        setDefaults(Nsound::float64 const & sample_rate=44100.0, Nsound::float64 const & sample_bits=16.0, 
            Nsound::boolean const & use_ieee_floats=False)
        setDefaults(Nsound::float64 const & sample_rate=44100.0, Nsound::float64 const & sample_bits=16.0)
        setDefaults(Nsound::float64 const & sample_rate=44100.0)
        setDefaults()
        """
        return _Nsound.Wavefile_setDefaults(sample_rate, sample_bits, use_ieee_floats)

    if _newclass:setDefaults = staticmethod(setDefaults)
    __swig_getmethods__["setDefaults"] = lambda x: setDefaults
    def read(*args):
        """read(std::string const & fileName, AudioStream astream) -> Nsound::boolean"""
        return _Nsound.Wavefile_read(*args)

    if _newclass:read = staticmethod(read)
    __swig_getmethods__["read"] = lambda x: read
    def readHeader(*args):
        """readHeader(std::string const & filename, std::string & info) -> Nsound::boolean"""
        return _Nsound.Wavefile_readHeader(*args)

    if _newclass:readHeader = staticmethod(readHeader)
    __swig_getmethods__["readHeader"] = lambda x: readHeader
    def write(*args):
        """
        write(std::string const & fileName, AudioStream as, Nsound::uint32 bits_per_sample=16) -> Nsound::boolean
        write(std::string const & fileName, AudioStream as) -> Nsound::boolean
        write(std::string const & fileName, Buffer as, Nsound::uint32 bits_per_sample, Nsound::uint32 sample_rate) -> Nsound::boolean
        """
        return _Nsound.Wavefile_write(*args)

    if _newclass:write = staticmethod(write)
    __swig_getmethods__["write"] = lambda x: write
    def __init__(self): 
        """__init__(Nsound::Wavefile self) -> Wavefile"""
        this = _Nsound.new_Wavefile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Nsound.delete_Wavefile
    __del__ = lambda self : None;
Wavefile_swigregister = _Nsound.Wavefile_swigregister
Wavefile_swigregister(Wavefile)
cvar = _Nsound.cvar
Wavefile.SIGNED_64_BIT_ = _Nsound.cvar.Wavefile_SIGNED_64_BIT_
Wavefile.SIGNED_48_BIT_ = _Nsound.cvar.Wavefile_SIGNED_48_BIT_
Wavefile.SIGNED_32_BIT_ = _Nsound.cvar.Wavefile_SIGNED_32_BIT_
Wavefile.SIGNED_24_BIT_ = _Nsound.cvar.Wavefile_SIGNED_24_BIT_
Wavefile.SIGNED_16_BIT_ = _Nsound.cvar.Wavefile_SIGNED_16_BIT_
Wavefile.SIGNED_8_BIT_ = _Nsound.cvar.Wavefile_SIGNED_8_BIT_

def Wavefile_decodeFormatTag(*args):
  """Wavefile_decodeFormatTag(Nsound::uint16 const format_tag) -> std::string"""
  return _Nsound.Wavefile_decodeFormatTag(*args)

def Wavefile_getDefaultSampleRate():
  """Wavefile_getDefaultSampleRate() -> Nsound::uint32"""
  return _Nsound.Wavefile_getDefaultSampleRate()

def Wavefile_getDefaultSampleSize():
  """Wavefile_getDefaultSampleSize() -> Nsound::uint32"""
  return _Nsound.Wavefile_getDefaultSampleSize()

def Wavefile_setDefaultSampleRate(*args):
  """
    setDefaultSampleRate(Nsound::int32 const rate)
    Wavefile_setDefaultSampleRate(Nsound::float64 const & rate)
    """
  return _Nsound.Wavefile_setDefaultSampleRate(*args)

def Wavefile_setDefaultSampleSize(*args):
  """Wavefile_setDefaultSampleSize(Nsound::uint32 size)"""
  return _Nsound.Wavefile_setDefaultSampleSize(*args)

def Wavefile_setIEEEFloat(*args):
  """Wavefile_setIEEEFloat(Nsound::boolean flag)"""
  return _Nsound.Wavefile_setIEEEFloat(*args)

def Wavefile_setDefaults(sample_rate=44100.0, sample_bits=16.0, use_ieee_floats=False):
  """
    setDefaults(Nsound::float64 const & sample_rate=44100.0, Nsound::float64 const & sample_bits=16.0, 
        Nsound::boolean const & use_ieee_floats=False)
    setDefaults(Nsound::float64 const & sample_rate=44100.0, Nsound::float64 const & sample_bits=16.0)
    setDefaults(Nsound::float64 const & sample_rate=44100.0)
    Wavefile_setDefaults()
    """
  return _Nsound.Wavefile_setDefaults(sample_rate, sample_bits, use_ieee_floats)

def Wavefile_read(*args):
  """Wavefile_read(std::string const & fileName, AudioStream astream) -> Nsound::boolean"""
  return _Nsound.Wavefile_read(*args)

def Wavefile_readHeader(*args):
  """Wavefile_readHeader(std::string const & filename, std::string & info) -> Nsound::boolean"""
  return _Nsound.Wavefile_readHeader(*args)

def Wavefile_write(*args):
  """
    write(std::string const & fileName, AudioStream as, Nsound::uint32 bits_per_sample=16) -> Nsound::boolean
    write(std::string const & fileName, AudioStream as) -> Nsound::boolean
    Wavefile_write(std::string const & fileName, Buffer as, Nsound::uint32 bits_per_sample, Nsound::uint32 sample_rate) -> Nsound::boolean
    """
  return _Nsound.Wavefile_write(*args)


def __rshift__(*args):
  """
    __rshift__(AudioStream lhs, AudioPlayback rhs)
    __rshift__(Buffer lhs, AudioPlayback rhs)
    __rshift__(AudioStream lhs, AudioPlaybackRt rhs)
    __rshift__(Buffer lhs, AudioPlaybackRt rhs)
    __rshift__(Nsound::float64 sample, AudioPlaybackRt rhs)
    __rshift__(Buffer lhs, char const * rhs)
    __rshift__(AudioStream lhs, char const * rhs)
    """
  return _Nsound.__rshift__(*args)
class ID3v1Tag(_object):
    """Proxy of C++ Nsound::ID3v1Tag class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ID3v1Tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ID3v1Tag, name)
    __repr__ = _swig_repr
    def __init__(self, filename="", show_warnings=True): 
        """
        __init__(Nsound::ID3v1Tag self, std::string const & filename="", Nsound::boolean show_warnings=True) -> ID3v1Tag
        __init__(Nsound::ID3v1Tag self, std::string const & filename="") -> ID3v1Tag
        __init__(Nsound::ID3v1Tag self) -> ID3v1Tag
        """
        this = _Nsound.new_ID3v1Tag(filename, show_warnings)
        try: self.this.append(this)
        except: self.this = this
    def read(self, *args):
        """
        read(ID3v1Tag self, std::string const & filename, Nsound::boolean show_warnings=True) -> Nsound::boolean
        read(ID3v1Tag self, std::string const & filename) -> Nsound::boolean
        """
        return _Nsound.ID3v1Tag_read(self, *args)

    def write(self, *args):
        """
        write(ID3v1Tag self, std::string const & filename, Nsound::boolean show_warnings=True) -> Nsound::boolean
        write(ID3v1Tag self, std::string const & filename) -> Nsound::boolean
        """
        return _Nsound.ID3v1Tag_write(self, *args)

    __swig_setmethods__["title"] = _Nsound.ID3v1Tag_title_set
    __swig_getmethods__["title"] = _Nsound.ID3v1Tag_title_get
    if _newclass:title = _swig_property(_Nsound.ID3v1Tag_title_get, _Nsound.ID3v1Tag_title_set)
    __swig_setmethods__["artist"] = _Nsound.ID3v1Tag_artist_set
    __swig_getmethods__["artist"] = _Nsound.ID3v1Tag_artist_get
    if _newclass:artist = _swig_property(_Nsound.ID3v1Tag_artist_get, _Nsound.ID3v1Tag_artist_set)
    __swig_setmethods__["album"] = _Nsound.ID3v1Tag_album_set
    __swig_getmethods__["album"] = _Nsound.ID3v1Tag_album_get
    if _newclass:album = _swig_property(_Nsound.ID3v1Tag_album_get, _Nsound.ID3v1Tag_album_set)
    __swig_setmethods__["year"] = _Nsound.ID3v1Tag_year_set
    __swig_getmethods__["year"] = _Nsound.ID3v1Tag_year_get
    if _newclass:year = _swig_property(_Nsound.ID3v1Tag_year_get, _Nsound.ID3v1Tag_year_set)
    __swig_setmethods__["comment"] = _Nsound.ID3v1Tag_comment_set
    __swig_getmethods__["comment"] = _Nsound.ID3v1Tag_comment_get
    if _newclass:comment = _swig_property(_Nsound.ID3v1Tag_comment_get, _Nsound.ID3v1Tag_comment_set)
    __swig_setmethods__["genre"] = _Nsound.ID3v1Tag_genre_set
    __swig_getmethods__["genre"] = _Nsound.ID3v1Tag_genre_get
    if _newclass:genre = _swig_property(_Nsound.ID3v1Tag_genre_get, _Nsound.ID3v1Tag_genre_set)
    __swig_destroy__ = _Nsound.delete_ID3v1Tag
    __del__ = lambda self : None;
ID3v1Tag_swigregister = _Nsound.ID3v1Tag_swigregister
ID3v1Tag_swigregister(ID3v1Tag)


def __lshift__(*args):
  """
    __lshift__(std::ostream & out, Buffer rhs) -> std::ostream
    __lshift__(std::ostream & out, FilterIIR rhs) -> std::ostream
    __lshift__(Buffer lhs, char const * rhs) -> Buffer
    __lshift__(AudioStream lhs, char const * rhs) -> AudioStream
    __lshift__(std::ostream & out, ID3v1Tag rhs) -> std::ostream &
    """
  return _Nsound.__lshift__(*args)
#------------------------------------------------------------------------------
# from nsound.i

# python modules
import inspect
import os.path
import types
import sys
import warnings

import matplotlib.pylab

__package__ = "%s" % PACKAGE_RELEASE
__version__ = "%s" % PACKAGE_VERSION
__author__ = "%s" % NSOUND_AUTHORS
__copyright__ = "%s" % NSOUND_COPYRIGHT
__license__ = "GNU General Public License 2.0 or later"

def get_caller(offset = 0, basename = False):

    filename, line_number = inspect.stack()[1 + offset][1:3]

    if basename:
        filename = os.path.basename(filename)

    return filename, line_number

def rel_to_abs(path):

    if os.path.isabs(path):
        return path

    caller, line_no = get_caller(offset = 1)
    caller = os.path.abspath(caller)
    prefix = os.path.dirname(caller)

    return os.path.abspath(os.path.join(prefix, path))


# This file is compatible with both classic and new-style classes.


