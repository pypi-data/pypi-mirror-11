    describe('EpisodeListCtrl', function() {
        var $scope, $cookieStore, $controller, $q, $dialog;
        var $location, $routeParams, $http;
        var Flow;
        var episodes, controller;

        beforeEach(function() {
            inject(function($injector) {
                $rootScope   = $injector.get('$rootScope');
                $scope       = $rootScope.$new();
                $cookieStore = $injector.get('$cookieStore');
                $controller  = $injector.get('$controller');
                $q           = $injector.get('$q');
                $modal       = $injector.get('$modal');
                $http        = $injector.get('$http');
                $routeParams = $injector.get('$routeParams');
                $location    = $injector.get('$location');
            });

            episodes = {123: new Episode(episodeData, schema)};
            options = optionsData;
            $routeParams.tag = 'tropical';
            Flow = jasmine.createSpy('Flow').andCallFake(function(){return {then: function(){}}});
            
            $rootScope.fields = fields


            controller = $controller('EpisodeListCtrl', {
                $rootScope    : $rootScope,
                $scope        : $scope,
                $q            : $q,
                $http         : $http,
                $cookieStore  : $cookieStore,
                $location     : $location,
                $routeParams  : $routeParams,
                Flow          : Flow,
                schema        : schema,
                episodes      : episodes,
                profile       : profile,
                options       : options,
                viewDischarged: false
            });
        });

        describe('newly-created controller', function() {
            it('should have state "normal"', function() {
                expect($scope.state).toBe('normal');
            });
        });

        describe('adding an episode', function() {
            it('should change stated to "modal"', function() {
                $scope.addEpisode();
                expect($scope.state).toBe('modal');
            });

            it('should call the enter flow', function() {
                $scope.addEpisode();
                expect(Flow).toHaveBeenCalledWith(
                    'enter', schema, options, {
                        current_tags: {
                            tag   : 'tropical',
                            subtag: 'all'
                        }
                    }
                )
            });

            describe('for a readonly user', function(){
                beforeEach(function(){
                    profile.readonly = true;
                });

                it('should return null', function(){
                    expect($scope.addEpisode()).toBe(null);
                });
            });

        });

        describe('discharging an episode', function(){
            var mockEvent;

            beforeEach(function(){
                mockEvent = {preventDefault: function(){}};
            });

            it('should prevent the link from continuing', function(){
                spyOn(mockEvent, 'preventDefault');
                $scope.dischargeEpisode(0, mockEvent)
            })

            it('should call the exit flow', function(){
                $scope.dischargeEpisode(0, mockEvent);
                expect(Flow).toHaveBeenCalled()
            });

            describe('for a readonly user', function(){
                beforeEach(function(){
                    profile.readonly = true;
                });

                it('should return null', function(){
                    expect($scope.dischargeEpisode(0,  mockEvent)).toBe(null);
                });
            });

        });

        describe('editing an item', function() {
            it('should select that item', function() {
                $scope.editItem(0, 0, 0);
                expect([$scope.rix, $scope.cix, $scope.iix]).toEqual([0, 0, 0]);
            });

            it('should change state to "modal"', function() {
                $scope.editItem(0, 0, 0);
                expect($scope.state).toBe('modal');
            });

            it('should set up the demographics modal', function() {
                var callArgs;

                spyOn($modal, 'open').andCallThrough();

                $scope.editItem(0, 0, 0);

                callArgs = $modal.open.mostRecentCall.args;
                expect(callArgs.length).toBe(1);
                expect(callArgs[0].templateUrl).toBe('/templates/modals/demographics.html/tropical/all');
                expect(callArgs[0].controller).toBe('EditItemCtrl');
            });

            it('should open the demographics modal', function() {
                var modalSpy;

                modalSpy = {open: function() {}};
                spyOn($modal, 'open').andReturn({result:  {then: function() {}}});

                $scope.editItem(0, 0, 0);

                expect($modal.open).toHaveBeenCalled();
            });

            it('should change state to "normal" when the modal is closed', function() {
                var deferred;

                deferred = $q.defer();
                spyOn($modal, 'open').andReturn({result: deferred.promise});

                $scope.editItem(0, 0, 0);

                deferred.resolve('save');
                $rootScope.$apply();

                expect($scope.state).toBe('normal');
            });


            describe('for a readonly user', function(){
                beforeEach(function(){
                    profile.readonly = true;
                });

                it('should return null', function(){
                    expect($scope.editItem(0,  0, 0)).toBe(null);
                });
            });

        });

        describe('adding an item', function() {
            var iix;

            beforeEach(function() {
                iix = episodeData.diagnosis.length;
            });

            it('should select "Add"', function() {
                $scope.editItem(0, 2, iix);
                expect([$scope.rix, $scope.cix, $scope.iix]).toEqual([0, 2, iix]);
            });

            it('should change state to "modal"', function() {
                $scope.editItem(0, 2, iix);
                expect($scope.state).toBe('modal');
            });

            it('should set up the modal', function() {
                var callArgs;

                spyOn($modal, 'open').andCallThrough();

                $scope.editItem(0, 2, iix);

                callArgs = $modal.open.mostRecentCall.args;
                expect(callArgs.length).toBe(1);
                expect(callArgs[0].templateUrl).toBe('/templates/modals/diagnosis.html/tropical/all');
                expect(callArgs[0].controller).toBe('EditItemCtrl');
                expect(callArgs[0].resolve.item().id).toBeUndefined();
            });
        });

        describe('deleting an item', function() {
            it('should do nothing if item is singleton', function() {
                $scope.deleteItem(0, 0, 0);
                expect($scope.state).toBe('normal');
            });

            it('should do nothing if item is new item', function() {
                $scope.deleteItem(0, 2, 2);
                expect($scope.state).toBe('normal');
            });

            it('should change state to "modal"', function() {
                $scope.deleteItem(0, 2, 1);
                expect($scope.state).toBe('modal');
            });

            describe('for a readonly user', function(){
                beforeEach(function(){
                    profile.readonly = true;
                });

                it('should return null', function(){
                    expect($scope.deleteItem(0, 0, 0)).toBe(null);
                });
            });

        });
    });
