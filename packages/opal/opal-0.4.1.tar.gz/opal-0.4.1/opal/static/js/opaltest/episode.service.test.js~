    describe('Episode', function() {
        var Episode, episode, EpisodeResource, resource, Schema, schema, Item;

        beforeEach(function() {
            inject(function($injector) {
                Episode = $injector.get('Episode');
                Schema = $injector.get('Schema');
                Item = $injector.get('Item');
            });

            schema = new Schema(_.values(columns.fields));
            episode = new Episode(episodeData, schema);
        });

        it('Should have access to the attributes', function () {
            expect(episode.active).toEqual(true);
        });

        it('Should convert date attributes to Date objects', function () {
            expect(episode.date_of_admission).toEqual(new Date(2013, 10, 19))
        });

        it('should create Items', function() {
            expect(episode.demographics.length).toBe(1);
            expect(episode.diagnosis.length).toBe(2);
        });

        it('should have access to attributes of items', function() {
            expect(episode.id).toBe(123);
            expect(episode.demographics[0].name).toBe('John Smith');
        });

        it('should be able to get specific item', function() {
            expect(episode.getItem('diagnosis', 1).id).toEqual(103);
        });

        it('should know how many items it has in each column', function() {
            expect(episode.getNumberOfItems('demographics')).toBe(1);
            expect(episode.getNumberOfItems('diagnosis')).toBe(2);
        });

        it('should get the current tags', function(){
            expect(episode.getTags()).toEqual(['mine', 'tropical'])
        });

        it('should be able to add a new item', function() {
            var item = new Item(
                {id: 104, condition: 'Ebola', provisional: false,
                 date_of_diagnosis: '2005-02-18'},
                episode,
                schema.getColumn('diagnosis')
            );
            expect(episode.getNumberOfItems('diagnosis')).toBe(2);
            episode.addItem(item);
            expect(episode.getNumberOfItems('diagnosis')).toBe(3);
        });

        it('Should be able to produce a copy of attributes', function () {
            expect(episode.makeCopy()).toEqual({
                id: 123,
                date_of_admission: new Date(2013, 10, 19),
                date_of_episode: null,
                discharge_date: null,
            });
        });

        describe('communicating with server', function (){
            var $httpBackend, episode;

            beforeEach(function(){
                inject(function($injector){
                    $httpBackend = $injector.get('$httpBackend');
                });
            });

            afterEach(function(){
                $httpBackend.verifyNoOutstandingExpectation();
                $httpBackend.verifyNoOutstandingRequest();
            });


            describe('saving an existing episode', function (){
                var attrsJsonDate, attrsHumanDate;

                beforeEach(function(){
                    attrsJsonDate = {
                        id               : 555,
                        active           : true,
                        date_of_admission: '2013-11-20',
                        discharge_date   : null
                    };
                    attrsHumanDate = {
                        id               : 555,
                        active           : true,
                        date_of_admission: '20/11/2013',
                        discharge_date   : null
                    }

                    episode = new Episode(episodeData, schema);

                    $httpBackend.whenPUT('/episode/555/')
                        .respond(attrsJsonDate);

                });

                it('Should hit server', function () {
                    $httpBackend.expectPUT('/episode/555/', attrsJsonDate);
                    episode.save(attrsHumanDate);
                    $httpBackend.flush();
                });

                it('Should update item attributes', function () {
                    $httpBackend.expectPUT('/episode/555/', attrsJsonDate);
                    episode.save(attrsHumanDate);
                    $httpBackend.flush();
                    expect(episode.date_of_admission).toEqual(new Date(2013, 10, 20))
                });

            });

        });
    });
